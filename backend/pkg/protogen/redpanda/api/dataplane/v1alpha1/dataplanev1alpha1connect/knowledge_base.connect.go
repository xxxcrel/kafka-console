// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: redpanda/api/dataplane/v1alpha1/knowledge_base.proto

package dataplanev1alpha1connect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect "connectrpc.com/connect"

	v1alpha1 "github.com/redpanda-data/console/backend/pkg/protogen/redpanda/api/dataplane/v1alpha1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// KnowledgeBaseServiceName is the fully-qualified name of the KnowledgeBaseService service.
	KnowledgeBaseServiceName = "redpanda.api.dataplane.v1alpha1.KnowledgeBaseService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// KnowledgeBaseServiceCreateKnowledgeBaseProcedure is the fully-qualified name of the
	// KnowledgeBaseService's CreateKnowledgeBase RPC.
	KnowledgeBaseServiceCreateKnowledgeBaseProcedure = "/redpanda.api.dataplane.v1alpha1.KnowledgeBaseService/CreateKnowledgeBase"
	// KnowledgeBaseServiceGetKnowledgeBaseProcedure is the fully-qualified name of the
	// KnowledgeBaseService's GetKnowledgeBase RPC.
	KnowledgeBaseServiceGetKnowledgeBaseProcedure = "/redpanda.api.dataplane.v1alpha1.KnowledgeBaseService/GetKnowledgeBase"
	// KnowledgeBaseServiceListKnowledgeBasesProcedure is the fully-qualified name of the
	// KnowledgeBaseService's ListKnowledgeBases RPC.
	KnowledgeBaseServiceListKnowledgeBasesProcedure = "/redpanda.api.dataplane.v1alpha1.KnowledgeBaseService/ListKnowledgeBases"
	// KnowledgeBaseServiceUpdateKnowledgeBaseProcedure is the fully-qualified name of the
	// KnowledgeBaseService's UpdateKnowledgeBase RPC.
	KnowledgeBaseServiceUpdateKnowledgeBaseProcedure = "/redpanda.api.dataplane.v1alpha1.KnowledgeBaseService/UpdateKnowledgeBase"
	// KnowledgeBaseServiceDeleteKnowledgeBaseProcedure is the fully-qualified name of the
	// KnowledgeBaseService's DeleteKnowledgeBase RPC.
	KnowledgeBaseServiceDeleteKnowledgeBaseProcedure = "/redpanda.api.dataplane.v1alpha1.KnowledgeBaseService/DeleteKnowledgeBase"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	knowledgeBaseServiceServiceDescriptor                   = v1alpha1.File_redpanda_api_dataplane_v1alpha1_knowledge_base_proto.Services().ByName("KnowledgeBaseService")
	knowledgeBaseServiceCreateKnowledgeBaseMethodDescriptor = knowledgeBaseServiceServiceDescriptor.Methods().ByName("CreateKnowledgeBase")
	knowledgeBaseServiceGetKnowledgeBaseMethodDescriptor    = knowledgeBaseServiceServiceDescriptor.Methods().ByName("GetKnowledgeBase")
	knowledgeBaseServiceListKnowledgeBasesMethodDescriptor  = knowledgeBaseServiceServiceDescriptor.Methods().ByName("ListKnowledgeBases")
	knowledgeBaseServiceUpdateKnowledgeBaseMethodDescriptor = knowledgeBaseServiceServiceDescriptor.Methods().ByName("UpdateKnowledgeBase")
	knowledgeBaseServiceDeleteKnowledgeBaseMethodDescriptor = knowledgeBaseServiceServiceDescriptor.Methods().ByName("DeleteKnowledgeBase")
)

// KnowledgeBaseServiceClient is a client for the
// redpanda.api.dataplane.v1alpha1.KnowledgeBaseService service.
type KnowledgeBaseServiceClient interface {
	CreateKnowledgeBase(context.Context, *connect.Request[v1alpha1.CreateKnowledgeBaseRequest]) (*connect.Response[v1alpha1.CreateKnowledgeBaseResponse], error)
	GetKnowledgeBase(context.Context, *connect.Request[v1alpha1.GetKnowledgeBaseRequest]) (*connect.Response[v1alpha1.GetKnowledgeBaseResponse], error)
	ListKnowledgeBases(context.Context, *connect.Request[v1alpha1.ListKnowledgeBasesRequest]) (*connect.Response[v1alpha1.ListKnowledgeBasesResponse], error)
	UpdateKnowledgeBase(context.Context, *connect.Request[v1alpha1.UpdateKnowledgeBaseRequest]) (*connect.Response[v1alpha1.UpdateKnowledgeBaseResponse], error)
	DeleteKnowledgeBase(context.Context, *connect.Request[v1alpha1.DeleteKnowledgeBaseRequest]) (*connect.Response[v1alpha1.DeleteKnowledgeBaseResponse], error)
}

// NewKnowledgeBaseServiceClient constructs a client for the
// redpanda.api.dataplane.v1alpha1.KnowledgeBaseService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewKnowledgeBaseServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) KnowledgeBaseServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &knowledgeBaseServiceClient{
		createKnowledgeBase: connect.NewClient[v1alpha1.CreateKnowledgeBaseRequest, v1alpha1.CreateKnowledgeBaseResponse](
			httpClient,
			baseURL+KnowledgeBaseServiceCreateKnowledgeBaseProcedure,
			connect.WithSchema(knowledgeBaseServiceCreateKnowledgeBaseMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getKnowledgeBase: connect.NewClient[v1alpha1.GetKnowledgeBaseRequest, v1alpha1.GetKnowledgeBaseResponse](
			httpClient,
			baseURL+KnowledgeBaseServiceGetKnowledgeBaseProcedure,
			connect.WithSchema(knowledgeBaseServiceGetKnowledgeBaseMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listKnowledgeBases: connect.NewClient[v1alpha1.ListKnowledgeBasesRequest, v1alpha1.ListKnowledgeBasesResponse](
			httpClient,
			baseURL+KnowledgeBaseServiceListKnowledgeBasesProcedure,
			connect.WithSchema(knowledgeBaseServiceListKnowledgeBasesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateKnowledgeBase: connect.NewClient[v1alpha1.UpdateKnowledgeBaseRequest, v1alpha1.UpdateKnowledgeBaseResponse](
			httpClient,
			baseURL+KnowledgeBaseServiceUpdateKnowledgeBaseProcedure,
			connect.WithSchema(knowledgeBaseServiceUpdateKnowledgeBaseMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteKnowledgeBase: connect.NewClient[v1alpha1.DeleteKnowledgeBaseRequest, v1alpha1.DeleteKnowledgeBaseResponse](
			httpClient,
			baseURL+KnowledgeBaseServiceDeleteKnowledgeBaseProcedure,
			connect.WithSchema(knowledgeBaseServiceDeleteKnowledgeBaseMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// knowledgeBaseServiceClient implements KnowledgeBaseServiceClient.
type knowledgeBaseServiceClient struct {
	createKnowledgeBase *connect.Client[v1alpha1.CreateKnowledgeBaseRequest, v1alpha1.CreateKnowledgeBaseResponse]
	getKnowledgeBase    *connect.Client[v1alpha1.GetKnowledgeBaseRequest, v1alpha1.GetKnowledgeBaseResponse]
	listKnowledgeBases  *connect.Client[v1alpha1.ListKnowledgeBasesRequest, v1alpha1.ListKnowledgeBasesResponse]
	updateKnowledgeBase *connect.Client[v1alpha1.UpdateKnowledgeBaseRequest, v1alpha1.UpdateKnowledgeBaseResponse]
	deleteKnowledgeBase *connect.Client[v1alpha1.DeleteKnowledgeBaseRequest, v1alpha1.DeleteKnowledgeBaseResponse]
}

// CreateKnowledgeBase calls
// redpanda.api.dataplane.v1alpha1.KnowledgeBaseService.CreateKnowledgeBase.
func (c *knowledgeBaseServiceClient) CreateKnowledgeBase(ctx context.Context, req *connect.Request[v1alpha1.CreateKnowledgeBaseRequest]) (*connect.Response[v1alpha1.CreateKnowledgeBaseResponse], error) {
	return c.createKnowledgeBase.CallUnary(ctx, req)
}

// GetKnowledgeBase calls redpanda.api.dataplane.v1alpha1.KnowledgeBaseService.GetKnowledgeBase.
func (c *knowledgeBaseServiceClient) GetKnowledgeBase(ctx context.Context, req *connect.Request[v1alpha1.GetKnowledgeBaseRequest]) (*connect.Response[v1alpha1.GetKnowledgeBaseResponse], error) {
	return c.getKnowledgeBase.CallUnary(ctx, req)
}

// ListKnowledgeBases calls redpanda.api.dataplane.v1alpha1.KnowledgeBaseService.ListKnowledgeBases.
func (c *knowledgeBaseServiceClient) ListKnowledgeBases(ctx context.Context, req *connect.Request[v1alpha1.ListKnowledgeBasesRequest]) (*connect.Response[v1alpha1.ListKnowledgeBasesResponse], error) {
	return c.listKnowledgeBases.CallUnary(ctx, req)
}

// UpdateKnowledgeBase calls
// redpanda.api.dataplane.v1alpha1.KnowledgeBaseService.UpdateKnowledgeBase.
func (c *knowledgeBaseServiceClient) UpdateKnowledgeBase(ctx context.Context, req *connect.Request[v1alpha1.UpdateKnowledgeBaseRequest]) (*connect.Response[v1alpha1.UpdateKnowledgeBaseResponse], error) {
	return c.updateKnowledgeBase.CallUnary(ctx, req)
}

// DeleteKnowledgeBase calls
// redpanda.api.dataplane.v1alpha1.KnowledgeBaseService.DeleteKnowledgeBase.
func (c *knowledgeBaseServiceClient) DeleteKnowledgeBase(ctx context.Context, req *connect.Request[v1alpha1.DeleteKnowledgeBaseRequest]) (*connect.Response[v1alpha1.DeleteKnowledgeBaseResponse], error) {
	return c.deleteKnowledgeBase.CallUnary(ctx, req)
}

// KnowledgeBaseServiceHandler is an implementation of the
// redpanda.api.dataplane.v1alpha1.KnowledgeBaseService service.
type KnowledgeBaseServiceHandler interface {
	CreateKnowledgeBase(context.Context, *connect.Request[v1alpha1.CreateKnowledgeBaseRequest]) (*connect.Response[v1alpha1.CreateKnowledgeBaseResponse], error)
	GetKnowledgeBase(context.Context, *connect.Request[v1alpha1.GetKnowledgeBaseRequest]) (*connect.Response[v1alpha1.GetKnowledgeBaseResponse], error)
	ListKnowledgeBases(context.Context, *connect.Request[v1alpha1.ListKnowledgeBasesRequest]) (*connect.Response[v1alpha1.ListKnowledgeBasesResponse], error)
	UpdateKnowledgeBase(context.Context, *connect.Request[v1alpha1.UpdateKnowledgeBaseRequest]) (*connect.Response[v1alpha1.UpdateKnowledgeBaseResponse], error)
	DeleteKnowledgeBase(context.Context, *connect.Request[v1alpha1.DeleteKnowledgeBaseRequest]) (*connect.Response[v1alpha1.DeleteKnowledgeBaseResponse], error)
}

// NewKnowledgeBaseServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewKnowledgeBaseServiceHandler(svc KnowledgeBaseServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	knowledgeBaseServiceCreateKnowledgeBaseHandler := connect.NewUnaryHandler(
		KnowledgeBaseServiceCreateKnowledgeBaseProcedure,
		svc.CreateKnowledgeBase,
		connect.WithSchema(knowledgeBaseServiceCreateKnowledgeBaseMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	knowledgeBaseServiceGetKnowledgeBaseHandler := connect.NewUnaryHandler(
		KnowledgeBaseServiceGetKnowledgeBaseProcedure,
		svc.GetKnowledgeBase,
		connect.WithSchema(knowledgeBaseServiceGetKnowledgeBaseMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	knowledgeBaseServiceListKnowledgeBasesHandler := connect.NewUnaryHandler(
		KnowledgeBaseServiceListKnowledgeBasesProcedure,
		svc.ListKnowledgeBases,
		connect.WithSchema(knowledgeBaseServiceListKnowledgeBasesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	knowledgeBaseServiceUpdateKnowledgeBaseHandler := connect.NewUnaryHandler(
		KnowledgeBaseServiceUpdateKnowledgeBaseProcedure,
		svc.UpdateKnowledgeBase,
		connect.WithSchema(knowledgeBaseServiceUpdateKnowledgeBaseMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	knowledgeBaseServiceDeleteKnowledgeBaseHandler := connect.NewUnaryHandler(
		KnowledgeBaseServiceDeleteKnowledgeBaseProcedure,
		svc.DeleteKnowledgeBase,
		connect.WithSchema(knowledgeBaseServiceDeleteKnowledgeBaseMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/redpanda.api.dataplane.v1alpha1.KnowledgeBaseService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case KnowledgeBaseServiceCreateKnowledgeBaseProcedure:
			knowledgeBaseServiceCreateKnowledgeBaseHandler.ServeHTTP(w, r)
		case KnowledgeBaseServiceGetKnowledgeBaseProcedure:
			knowledgeBaseServiceGetKnowledgeBaseHandler.ServeHTTP(w, r)
		case KnowledgeBaseServiceListKnowledgeBasesProcedure:
			knowledgeBaseServiceListKnowledgeBasesHandler.ServeHTTP(w, r)
		case KnowledgeBaseServiceUpdateKnowledgeBaseProcedure:
			knowledgeBaseServiceUpdateKnowledgeBaseHandler.ServeHTTP(w, r)
		case KnowledgeBaseServiceDeleteKnowledgeBaseProcedure:
			knowledgeBaseServiceDeleteKnowledgeBaseHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedKnowledgeBaseServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedKnowledgeBaseServiceHandler struct{}

func (UnimplementedKnowledgeBaseServiceHandler) CreateKnowledgeBase(context.Context, *connect.Request[v1alpha1.CreateKnowledgeBaseRequest]) (*connect.Response[v1alpha1.CreateKnowledgeBaseResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.dataplane.v1alpha1.KnowledgeBaseService.CreateKnowledgeBase is not implemented"))
}

func (UnimplementedKnowledgeBaseServiceHandler) GetKnowledgeBase(context.Context, *connect.Request[v1alpha1.GetKnowledgeBaseRequest]) (*connect.Response[v1alpha1.GetKnowledgeBaseResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.dataplane.v1alpha1.KnowledgeBaseService.GetKnowledgeBase is not implemented"))
}

func (UnimplementedKnowledgeBaseServiceHandler) ListKnowledgeBases(context.Context, *connect.Request[v1alpha1.ListKnowledgeBasesRequest]) (*connect.Response[v1alpha1.ListKnowledgeBasesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.dataplane.v1alpha1.KnowledgeBaseService.ListKnowledgeBases is not implemented"))
}

func (UnimplementedKnowledgeBaseServiceHandler) UpdateKnowledgeBase(context.Context, *connect.Request[v1alpha1.UpdateKnowledgeBaseRequest]) (*connect.Response[v1alpha1.UpdateKnowledgeBaseResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.dataplane.v1alpha1.KnowledgeBaseService.UpdateKnowledgeBase is not implemented"))
}

func (UnimplementedKnowledgeBaseServiceHandler) DeleteKnowledgeBase(context.Context, *connect.Request[v1alpha1.DeleteKnowledgeBaseRequest]) (*connect.Response[v1alpha1.DeleteKnowledgeBaseResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.dataplane.v1alpha1.KnowledgeBaseService.DeleteKnowledgeBase is not implemented"))
}
