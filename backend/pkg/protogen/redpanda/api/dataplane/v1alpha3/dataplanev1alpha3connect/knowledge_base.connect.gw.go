// Code generated by protoc-gen-connect-gateway. DO NOT EDIT.
//
// Source: redpanda/api/dataplane/v1alpha3/knowledge_base.proto

package dataplanev1alpha3connect

import (
	context "context"
	fmt "fmt"

	runtime "github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	connect_gateway "go.vallahaye.net/connect-gateway"

	v1alpha3 "github.com/redpanda-data/console/backend/pkg/protogen/redpanda/api/dataplane/v1alpha3"
)

// KnowledgeBaseServiceGatewayServer implements the gRPC server API for the KnowledgeBaseService
// service.
type KnowledgeBaseServiceGatewayServer struct {
	v1alpha3.UnimplementedKnowledgeBaseServiceServer
	createKnowledgeBase connect_gateway.UnaryHandler[v1alpha3.CreateKnowledgeBaseRequest, v1alpha3.CreateKnowledgeBaseResponse]
	getKnowledgeBase    connect_gateway.UnaryHandler[v1alpha3.GetKnowledgeBaseRequest, v1alpha3.GetKnowledgeBaseResponse]
	listKnowledgeBases  connect_gateway.UnaryHandler[v1alpha3.ListKnowledgeBasesRequest, v1alpha3.ListKnowledgeBasesResponse]
	updateKnowledgeBase connect_gateway.UnaryHandler[v1alpha3.UpdateKnowledgeBaseRequest, v1alpha3.UpdateKnowledgeBaseResponse]
	deleteKnowledgeBase connect_gateway.UnaryHandler[v1alpha3.DeleteKnowledgeBaseRequest, v1alpha3.DeleteKnowledgeBaseResponse]
}

// NewKnowledgeBaseServiceGatewayServer constructs a Connect-Gateway gRPC server for the
// KnowledgeBaseService service.
func NewKnowledgeBaseServiceGatewayServer(svc KnowledgeBaseServiceHandler, opts ...connect_gateway.HandlerOption) *KnowledgeBaseServiceGatewayServer {
	return &KnowledgeBaseServiceGatewayServer{
		createKnowledgeBase: connect_gateway.NewUnaryHandler(KnowledgeBaseServiceCreateKnowledgeBaseProcedure, svc.CreateKnowledgeBase, opts...),
		getKnowledgeBase:    connect_gateway.NewUnaryHandler(KnowledgeBaseServiceGetKnowledgeBaseProcedure, svc.GetKnowledgeBase, opts...),
		listKnowledgeBases:  connect_gateway.NewUnaryHandler(KnowledgeBaseServiceListKnowledgeBasesProcedure, svc.ListKnowledgeBases, opts...),
		updateKnowledgeBase: connect_gateway.NewUnaryHandler(KnowledgeBaseServiceUpdateKnowledgeBaseProcedure, svc.UpdateKnowledgeBase, opts...),
		deleteKnowledgeBase: connect_gateway.NewUnaryHandler(KnowledgeBaseServiceDeleteKnowledgeBaseProcedure, svc.DeleteKnowledgeBase, opts...),
	}
}

func (s *KnowledgeBaseServiceGatewayServer) CreateKnowledgeBase(ctx context.Context, req *v1alpha3.CreateKnowledgeBaseRequest) (*v1alpha3.CreateKnowledgeBaseResponse, error) {
	return s.createKnowledgeBase(ctx, req)
}

func (s *KnowledgeBaseServiceGatewayServer) GetKnowledgeBase(ctx context.Context, req *v1alpha3.GetKnowledgeBaseRequest) (*v1alpha3.GetKnowledgeBaseResponse, error) {
	return s.getKnowledgeBase(ctx, req)
}

func (s *KnowledgeBaseServiceGatewayServer) ListKnowledgeBases(ctx context.Context, req *v1alpha3.ListKnowledgeBasesRequest) (*v1alpha3.ListKnowledgeBasesResponse, error) {
	return s.listKnowledgeBases(ctx, req)
}

func (s *KnowledgeBaseServiceGatewayServer) UpdateKnowledgeBase(ctx context.Context, req *v1alpha3.UpdateKnowledgeBaseRequest) (*v1alpha3.UpdateKnowledgeBaseResponse, error) {
	return s.updateKnowledgeBase(ctx, req)
}

func (s *KnowledgeBaseServiceGatewayServer) DeleteKnowledgeBase(ctx context.Context, req *v1alpha3.DeleteKnowledgeBaseRequest) (*v1alpha3.DeleteKnowledgeBaseResponse, error) {
	return s.deleteKnowledgeBase(ctx, req)
}

// RegisterKnowledgeBaseServiceHandlerGatewayServer registers the Connect handlers for the
// KnowledgeBaseService "svc" to "mux".
func RegisterKnowledgeBaseServiceHandlerGatewayServer(mux *runtime.ServeMux, svc KnowledgeBaseServiceHandler, opts ...connect_gateway.HandlerOption) {
	if err := v1alpha3.RegisterKnowledgeBaseServiceHandlerServer(context.TODO(), mux, NewKnowledgeBaseServiceGatewayServer(svc, opts...)); err != nil {
		panic(fmt.Errorf("connect-gateway: %w", err))
	}
}
