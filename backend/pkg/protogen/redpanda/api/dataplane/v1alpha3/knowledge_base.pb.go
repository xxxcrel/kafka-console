// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        (unknown)
// source: redpanda/api/dataplane/v1alpha3/knowledge_base.proto

package dataplanev1alpha3

import (
	reflect "reflect"
	sync "sync"

	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	_ "github.com/redpanda-data/console/backend/pkg/protogen/redpanda/api/auth/v1"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type KnowledgeBase struct {
	state              protoimpl.MessageState            `protogen:"open.v1"`
	Id                 string                            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DisplayName        string                            `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Description        string                            `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	VectorDatabase     *KnowledgeBase_VectorDatabase     `protobuf:"bytes,4,opt,name=vector_database,json=vectorDatabase,proto3" json:"vector_database,omitempty"`
	EmbeddingGenerator *KnowledgeBase_EmbeddingGenerator `protobuf:"bytes,5,opt,name=embedding_generator,json=embeddingGenerator,proto3" json:"embedding_generator,omitempty"`
	RetrievalApiUrl    string                            `protobuf:"bytes,6,opt,name=retrieval_api_url,json=retrievalApiUrl,proto3" json:"retrieval_api_url,omitempty"`
	// Optional list of tags to attach to a pipeline.
	Tags          map[string]string         `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Indexer       *KnowledgeBase_Indexer    `protobuf:"bytes,8,opt,name=indexer,proto3" json:"indexer,omitempty"`
	Retriever     *KnowledgeBase_Retriever  `protobuf:"bytes,9,opt,name=retriever,proto3" json:"retriever,omitempty"`
	Generation    *KnowledgeBase_Generation `protobuf:"bytes,10,opt,name=generation,proto3" json:"generation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KnowledgeBase) Reset() {
	*x = KnowledgeBase{}
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeBase) ProtoMessage() {}

func (x *KnowledgeBase) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeBase.ProtoReflect.Descriptor instead.
func (*KnowledgeBase) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP(), []int{0}
}

func (x *KnowledgeBase) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *KnowledgeBase) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *KnowledgeBase) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *KnowledgeBase) GetVectorDatabase() *KnowledgeBase_VectorDatabase {
	if x != nil {
		return x.VectorDatabase
	}
	return nil
}

func (x *KnowledgeBase) GetEmbeddingGenerator() *KnowledgeBase_EmbeddingGenerator {
	if x != nil {
		return x.EmbeddingGenerator
	}
	return nil
}

func (x *KnowledgeBase) GetRetrievalApiUrl() string {
	if x != nil {
		return x.RetrievalApiUrl
	}
	return ""
}

func (x *KnowledgeBase) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *KnowledgeBase) GetIndexer() *KnowledgeBase_Indexer {
	if x != nil {
		return x.Indexer
	}
	return nil
}

func (x *KnowledgeBase) GetRetriever() *KnowledgeBase_Retriever {
	if x != nil {
		return x.Retriever
	}
	return nil
}

func (x *KnowledgeBase) GetGeneration() *KnowledgeBase_Generation {
	if x != nil {
		return x.Generation
	}
	return nil
}

type KnowledgeBaseCreate struct {
	state              protoimpl.MessageState                  `protogen:"open.v1"`
	DisplayName        string                                  `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Description        string                                  `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	VectorDatabase     *KnowledgeBaseCreate_VectorDatabase     `protobuf:"bytes,3,opt,name=vector_database,json=vectorDatabase,proto3" json:"vector_database,omitempty"`
	EmbeddingGenerator *KnowledgeBaseCreate_EmbeddingGenerator `protobuf:"bytes,4,opt,name=embedding_generator,json=embeddingGenerator,proto3" json:"embedding_generator,omitempty"`
	// Optional list of tags to attach to a pipeline.
	Tags          map[string]string               `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Indexer       *KnowledgeBaseCreate_Indexer    `protobuf:"bytes,6,opt,name=indexer,proto3" json:"indexer,omitempty"`
	Retriever     *KnowledgeBaseCreate_Retriever  `protobuf:"bytes,7,opt,name=retriever,proto3" json:"retriever,omitempty"`
	Generation    *KnowledgeBaseCreate_Generation `protobuf:"bytes,8,opt,name=generation,proto3" json:"generation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KnowledgeBaseCreate) Reset() {
	*x = KnowledgeBaseCreate{}
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeBaseCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeBaseCreate) ProtoMessage() {}

func (x *KnowledgeBaseCreate) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeBaseCreate.ProtoReflect.Descriptor instead.
func (*KnowledgeBaseCreate) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP(), []int{1}
}

func (x *KnowledgeBaseCreate) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *KnowledgeBaseCreate) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *KnowledgeBaseCreate) GetVectorDatabase() *KnowledgeBaseCreate_VectorDatabase {
	if x != nil {
		return x.VectorDatabase
	}
	return nil
}

func (x *KnowledgeBaseCreate) GetEmbeddingGenerator() *KnowledgeBaseCreate_EmbeddingGenerator {
	if x != nil {
		return x.EmbeddingGenerator
	}
	return nil
}

func (x *KnowledgeBaseCreate) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *KnowledgeBaseCreate) GetIndexer() *KnowledgeBaseCreate_Indexer {
	if x != nil {
		return x.Indexer
	}
	return nil
}

func (x *KnowledgeBaseCreate) GetRetriever() *KnowledgeBaseCreate_Retriever {
	if x != nil {
		return x.Retriever
	}
	return nil
}

func (x *KnowledgeBaseCreate) GetGeneration() *KnowledgeBaseCreate_Generation {
	if x != nil {
		return x.Generation
	}
	return nil
}

type KnowledgeBaseUpdate struct {
	state              protoimpl.MessageState                  `protogen:"open.v1"`
	DisplayName        string                                  `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Description        string                                  `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	VectorDatabase     *KnowledgeBaseUpdate_VectorDatabase     `protobuf:"bytes,3,opt,name=vector_database,json=vectorDatabase,proto3" json:"vector_database,omitempty"`
	EmbeddingGenerator *KnowledgeBaseUpdate_EmbeddingGenerator `protobuf:"bytes,4,opt,name=embedding_generator,json=embeddingGenerator,proto3" json:"embedding_generator,omitempty"`
	// Optional list of tags to attach to a pipeline.
	Tags          map[string]string               `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Indexer       *KnowledgeBaseUpdate_Indexer    `protobuf:"bytes,6,opt,name=indexer,proto3" json:"indexer,omitempty"`
	Retriever     *KnowledgeBaseUpdate_Retriever  `protobuf:"bytes,7,opt,name=retriever,proto3" json:"retriever,omitempty"`
	Generation    *KnowledgeBaseUpdate_Generation `protobuf:"bytes,8,opt,name=generation,proto3" json:"generation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KnowledgeBaseUpdate) Reset() {
	*x = KnowledgeBaseUpdate{}
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeBaseUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeBaseUpdate) ProtoMessage() {}

func (x *KnowledgeBaseUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeBaseUpdate.ProtoReflect.Descriptor instead.
func (*KnowledgeBaseUpdate) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP(), []int{2}
}

func (x *KnowledgeBaseUpdate) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *KnowledgeBaseUpdate) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *KnowledgeBaseUpdate) GetVectorDatabase() *KnowledgeBaseUpdate_VectorDatabase {
	if x != nil {
		return x.VectorDatabase
	}
	return nil
}

func (x *KnowledgeBaseUpdate) GetEmbeddingGenerator() *KnowledgeBaseUpdate_EmbeddingGenerator {
	if x != nil {
		return x.EmbeddingGenerator
	}
	return nil
}

func (x *KnowledgeBaseUpdate) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *KnowledgeBaseUpdate) GetIndexer() *KnowledgeBaseUpdate_Indexer {
	if x != nil {
		return x.Indexer
	}
	return nil
}

func (x *KnowledgeBaseUpdate) GetRetriever() *KnowledgeBaseUpdate_Retriever {
	if x != nil {
		return x.Retriever
	}
	return nil
}

func (x *KnowledgeBaseUpdate) GetGeneration() *KnowledgeBaseUpdate_Generation {
	if x != nil {
		return x.Generation
	}
	return nil
}

type CreateKnowledgeBaseRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	KnowledgeBase *KnowledgeBaseCreate   `protobuf:"bytes,1,opt,name=knowledge_base,json=knowledgeBase,proto3" json:"knowledge_base,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateKnowledgeBaseRequest) Reset() {
	*x = CreateKnowledgeBaseRequest{}
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateKnowledgeBaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKnowledgeBaseRequest) ProtoMessage() {}

func (x *CreateKnowledgeBaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKnowledgeBaseRequest.ProtoReflect.Descriptor instead.
func (*CreateKnowledgeBaseRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP(), []int{3}
}

func (x *CreateKnowledgeBaseRequest) GetKnowledgeBase() *KnowledgeBaseCreate {
	if x != nil {
		return x.KnowledgeBase
	}
	return nil
}

type CreateKnowledgeBaseResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	KnowledgeBase *KnowledgeBase         `protobuf:"bytes,1,opt,name=knowledge_base,json=knowledgeBase,proto3" json:"knowledge_base,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateKnowledgeBaseResponse) Reset() {
	*x = CreateKnowledgeBaseResponse{}
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateKnowledgeBaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKnowledgeBaseResponse) ProtoMessage() {}

func (x *CreateKnowledgeBaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKnowledgeBaseResponse.ProtoReflect.Descriptor instead.
func (*CreateKnowledgeBaseResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP(), []int{4}
}

func (x *CreateKnowledgeBaseResponse) GetKnowledgeBase() *KnowledgeBase {
	if x != nil {
		return x.KnowledgeBase
	}
	return nil
}

type GetKnowledgeBaseRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetKnowledgeBaseRequest) Reset() {
	*x = GetKnowledgeBaseRequest{}
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKnowledgeBaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKnowledgeBaseRequest) ProtoMessage() {}

func (x *GetKnowledgeBaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKnowledgeBaseRequest.ProtoReflect.Descriptor instead.
func (*GetKnowledgeBaseRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP(), []int{5}
}

func (x *GetKnowledgeBaseRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetKnowledgeBaseResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	KnowledgeBase *KnowledgeBase         `protobuf:"bytes,1,opt,name=knowledge_base,json=knowledgeBase,proto3" json:"knowledge_base,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetKnowledgeBaseResponse) Reset() {
	*x = GetKnowledgeBaseResponse{}
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKnowledgeBaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKnowledgeBaseResponse) ProtoMessage() {}

func (x *GetKnowledgeBaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKnowledgeBaseResponse.ProtoReflect.Descriptor instead.
func (*GetKnowledgeBaseResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP(), []int{6}
}

func (x *GetKnowledgeBaseResponse) GetKnowledgeBase() *KnowledgeBase {
	if x != nil {
		return x.KnowledgeBase
	}
	return nil
}

type ListKnowledgeBasesRequest struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	PageSize      int32                             `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken     string                            `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Filter        *ListKnowledgeBasesRequest_Filter `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListKnowledgeBasesRequest) Reset() {
	*x = ListKnowledgeBasesRequest{}
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListKnowledgeBasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKnowledgeBasesRequest) ProtoMessage() {}

func (x *ListKnowledgeBasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKnowledgeBasesRequest.ProtoReflect.Descriptor instead.
func (*ListKnowledgeBasesRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP(), []int{7}
}

func (x *ListKnowledgeBasesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListKnowledgeBasesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListKnowledgeBasesRequest) GetFilter() *ListKnowledgeBasesRequest_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ListKnowledgeBasesResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	KnowledgeBases []*KnowledgeBase       `protobuf:"bytes,1,rep,name=knowledge_bases,json=knowledgeBases,proto3" json:"knowledge_bases,omitempty"`
	NextPageToken  string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ListKnowledgeBasesResponse) Reset() {
	*x = ListKnowledgeBasesResponse{}
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListKnowledgeBasesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKnowledgeBasesResponse) ProtoMessage() {}

func (x *ListKnowledgeBasesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKnowledgeBasesResponse.ProtoReflect.Descriptor instead.
func (*ListKnowledgeBasesResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP(), []int{8}
}

func (x *ListKnowledgeBasesResponse) GetKnowledgeBases() []*KnowledgeBase {
	if x != nil {
		return x.KnowledgeBases
	}
	return nil
}

func (x *ListKnowledgeBasesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type UpdateKnowledgeBaseRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	KnowledgeBase *KnowledgeBaseUpdate   `protobuf:"bytes,2,opt,name=knowledge_base,json=knowledgeBase,proto3" json:"knowledge_base,omitempty"`
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateKnowledgeBaseRequest) Reset() {
	*x = UpdateKnowledgeBaseRequest{}
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateKnowledgeBaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateKnowledgeBaseRequest) ProtoMessage() {}

func (x *UpdateKnowledgeBaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateKnowledgeBaseRequest.ProtoReflect.Descriptor instead.
func (*UpdateKnowledgeBaseRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateKnowledgeBaseRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateKnowledgeBaseRequest) GetKnowledgeBase() *KnowledgeBaseUpdate {
	if x != nil {
		return x.KnowledgeBase
	}
	return nil
}

func (x *UpdateKnowledgeBaseRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type UpdateKnowledgeBaseResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	KnowledgeBase *KnowledgeBase         `protobuf:"bytes,1,opt,name=knowledge_base,json=knowledgeBase,proto3" json:"knowledge_base,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateKnowledgeBaseResponse) Reset() {
	*x = UpdateKnowledgeBaseResponse{}
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateKnowledgeBaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateKnowledgeBaseResponse) ProtoMessage() {}

func (x *UpdateKnowledgeBaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateKnowledgeBaseResponse.ProtoReflect.Descriptor instead.
func (*UpdateKnowledgeBaseResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateKnowledgeBaseResponse) GetKnowledgeBase() *KnowledgeBase {
	if x != nil {
		return x.KnowledgeBase
	}
	return nil
}

type DeleteKnowledgeBaseRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteKnowledgeBaseRequest) Reset() {
	*x = DeleteKnowledgeBaseRequest{}
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteKnowledgeBaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKnowledgeBaseRequest) ProtoMessage() {}

func (x *DeleteKnowledgeBaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKnowledgeBaseRequest.ProtoReflect.Descriptor instead.
func (*DeleteKnowledgeBaseRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteKnowledgeBaseRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteKnowledgeBaseResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteKnowledgeBaseResponse) Reset() {
	*x = DeleteKnowledgeBaseResponse{}
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteKnowledgeBaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKnowledgeBaseResponse) ProtoMessage() {}

func (x *DeleteKnowledgeBaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKnowledgeBaseResponse.ProtoReflect.Descriptor instead.
func (*DeleteKnowledgeBaseResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP(), []int{12}
}

type KnowledgeBase_VectorDatabase struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to VectorDatabase:
	//
	//	*KnowledgeBase_VectorDatabase_Postgres_
	VectorDatabase isKnowledgeBase_VectorDatabase_VectorDatabase `protobuf_oneof:"vector_database"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *KnowledgeBase_VectorDatabase) Reset() {
	*x = KnowledgeBase_VectorDatabase{}
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeBase_VectorDatabase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeBase_VectorDatabase) ProtoMessage() {}

func (x *KnowledgeBase_VectorDatabase) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeBase_VectorDatabase.ProtoReflect.Descriptor instead.
func (*KnowledgeBase_VectorDatabase) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP(), []int{0, 0}
}

func (x *KnowledgeBase_VectorDatabase) GetVectorDatabase() isKnowledgeBase_VectorDatabase_VectorDatabase {
	if x != nil {
		return x.VectorDatabase
	}
	return nil
}

func (x *KnowledgeBase_VectorDatabase) GetPostgres() *KnowledgeBase_VectorDatabase_Postgres {
	if x != nil {
		if x, ok := x.VectorDatabase.(*KnowledgeBase_VectorDatabase_Postgres_); ok {
			return x.Postgres
		}
	}
	return nil
}

type isKnowledgeBase_VectorDatabase_VectorDatabase interface {
	isKnowledgeBase_VectorDatabase_VectorDatabase()
}

type KnowledgeBase_VectorDatabase_Postgres_ struct {
	Postgres *KnowledgeBase_VectorDatabase_Postgres `protobuf:"bytes,1,opt,name=postgres,proto3,oneof"`
}

func (*KnowledgeBase_VectorDatabase_Postgres_) isKnowledgeBase_VectorDatabase_VectorDatabase() {}

type KnowledgeBase_EmbeddingGenerator struct {
	state         protoimpl.MessageState                     `protogen:"open.v1"`
	Provider      *KnowledgeBase_EmbeddingGenerator_Provider `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	Dimensions    int32                                      `protobuf:"varint,2,opt,name=dimensions,proto3" json:"dimensions,omitempty"`
	Model         string                                     `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KnowledgeBase_EmbeddingGenerator) Reset() {
	*x = KnowledgeBase_EmbeddingGenerator{}
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeBase_EmbeddingGenerator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeBase_EmbeddingGenerator) ProtoMessage() {}

func (x *KnowledgeBase_EmbeddingGenerator) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeBase_EmbeddingGenerator.ProtoReflect.Descriptor instead.
func (*KnowledgeBase_EmbeddingGenerator) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP(), []int{0, 1}
}

func (x *KnowledgeBase_EmbeddingGenerator) GetProvider() *KnowledgeBase_EmbeddingGenerator_Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *KnowledgeBase_EmbeddingGenerator) GetDimensions() int32 {
	if x != nil {
		return x.Dimensions
	}
	return 0
}

func (x *KnowledgeBase_EmbeddingGenerator) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

type KnowledgeBase_Indexer struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ChunkSize        int32                  `protobuf:"varint,1,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size,omitempty"`
	ChunkOverlap     int32                  `protobuf:"varint,2,opt,name=chunk_overlap,json=chunkOverlap,proto3" json:"chunk_overlap,omitempty"`
	RedpandaUsername string                 `protobuf:"bytes,3,opt,name=redpanda_username,json=redpandaUsername,proto3" json:"redpanda_username,omitempty"`
	RedpandaPassword string                 `protobuf:"bytes,4,opt,name=redpanda_password,json=redpandaPassword,proto3" json:"redpanda_password,omitempty"`
	InputTopics      []string               `protobuf:"bytes,5,rep,name=input_topics,json=inputTopics,proto3" json:"input_topics,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *KnowledgeBase_Indexer) Reset() {
	*x = KnowledgeBase_Indexer{}
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeBase_Indexer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeBase_Indexer) ProtoMessage() {}

func (x *KnowledgeBase_Indexer) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeBase_Indexer.ProtoReflect.Descriptor instead.
func (*KnowledgeBase_Indexer) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP(), []int{0, 3}
}

func (x *KnowledgeBase_Indexer) GetChunkSize() int32 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

func (x *KnowledgeBase_Indexer) GetChunkOverlap() int32 {
	if x != nil {
		return x.ChunkOverlap
	}
	return 0
}

func (x *KnowledgeBase_Indexer) GetRedpandaUsername() string {
	if x != nil {
		return x.RedpandaUsername
	}
	return ""
}

func (x *KnowledgeBase_Indexer) GetRedpandaPassword() string {
	if x != nil {
		return x.RedpandaPassword
	}
	return ""
}

func (x *KnowledgeBase_Indexer) GetInputTopics() []string {
	if x != nil {
		return x.InputTopics
	}
	return nil
}

type KnowledgeBase_Retriever struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Reranker      *KnowledgeBase_Retriever_Reranker `protobuf:"bytes,1,opt,name=reranker,proto3" json:"reranker,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KnowledgeBase_Retriever) Reset() {
	*x = KnowledgeBase_Retriever{}
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeBase_Retriever) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeBase_Retriever) ProtoMessage() {}

func (x *KnowledgeBase_Retriever) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeBase_Retriever.ProtoReflect.Descriptor instead.
func (*KnowledgeBase_Retriever) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP(), []int{0, 4}
}

func (x *KnowledgeBase_Retriever) GetReranker() *KnowledgeBase_Retriever_Reranker {
	if x != nil {
		return x.Reranker
	}
	return nil
}

type KnowledgeBase_Generation struct {
	state         protoimpl.MessageState             `protogen:"open.v1"`
	Provider      *KnowledgeBase_Generation_Provider `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	Model         string                             `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KnowledgeBase_Generation) Reset() {
	*x = KnowledgeBase_Generation{}
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeBase_Generation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeBase_Generation) ProtoMessage() {}

func (x *KnowledgeBase_Generation) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeBase_Generation.ProtoReflect.Descriptor instead.
func (*KnowledgeBase_Generation) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP(), []int{0, 5}
}

func (x *KnowledgeBase_Generation) GetProvider() *KnowledgeBase_Generation_Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *KnowledgeBase_Generation) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

type KnowledgeBase_VectorDatabase_Postgres struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Dsn           string                 `protobuf:"bytes,1,opt,name=dsn,proto3" json:"dsn,omitempty"`
	Table         string                 `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KnowledgeBase_VectorDatabase_Postgres) Reset() {
	*x = KnowledgeBase_VectorDatabase_Postgres{}
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeBase_VectorDatabase_Postgres) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeBase_VectorDatabase_Postgres) ProtoMessage() {}

func (x *KnowledgeBase_VectorDatabase_Postgres) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeBase_VectorDatabase_Postgres.ProtoReflect.Descriptor instead.
func (*KnowledgeBase_VectorDatabase_Postgres) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *KnowledgeBase_VectorDatabase_Postgres) GetDsn() string {
	if x != nil {
		return x.Dsn
	}
	return ""
}

func (x *KnowledgeBase_VectorDatabase_Postgres) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

type KnowledgeBase_EmbeddingGenerator_Provider struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Provider:
	//
	//	*KnowledgeBase_EmbeddingGenerator_Provider_Openai
	//	*KnowledgeBase_EmbeddingGenerator_Provider_Cohere_
	Provider      isKnowledgeBase_EmbeddingGenerator_Provider_Provider `protobuf_oneof:"provider"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KnowledgeBase_EmbeddingGenerator_Provider) Reset() {
	*x = KnowledgeBase_EmbeddingGenerator_Provider{}
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeBase_EmbeddingGenerator_Provider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeBase_EmbeddingGenerator_Provider) ProtoMessage() {}

func (x *KnowledgeBase_EmbeddingGenerator_Provider) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeBase_EmbeddingGenerator_Provider.ProtoReflect.Descriptor instead.
func (*KnowledgeBase_EmbeddingGenerator_Provider) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *KnowledgeBase_EmbeddingGenerator_Provider) GetProvider() isKnowledgeBase_EmbeddingGenerator_Provider_Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *KnowledgeBase_EmbeddingGenerator_Provider) GetOpenai() *KnowledgeBase_EmbeddingGenerator_Provider_OpenAI {
	if x != nil {
		if x, ok := x.Provider.(*KnowledgeBase_EmbeddingGenerator_Provider_Openai); ok {
			return x.Openai
		}
	}
	return nil
}

func (x *KnowledgeBase_EmbeddingGenerator_Provider) GetCohere() *KnowledgeBase_EmbeddingGenerator_Provider_Cohere {
	if x != nil {
		if x, ok := x.Provider.(*KnowledgeBase_EmbeddingGenerator_Provider_Cohere_); ok {
			return x.Cohere
		}
	}
	return nil
}

type isKnowledgeBase_EmbeddingGenerator_Provider_Provider interface {
	isKnowledgeBase_EmbeddingGenerator_Provider_Provider()
}

type KnowledgeBase_EmbeddingGenerator_Provider_Openai struct {
	Openai *KnowledgeBase_EmbeddingGenerator_Provider_OpenAI `protobuf:"bytes,1,opt,name=openai,proto3,oneof"`
}

type KnowledgeBase_EmbeddingGenerator_Provider_Cohere_ struct {
	Cohere *KnowledgeBase_EmbeddingGenerator_Provider_Cohere `protobuf:"bytes,2,opt,name=cohere,proto3,oneof"`
}

func (*KnowledgeBase_EmbeddingGenerator_Provider_Openai) isKnowledgeBase_EmbeddingGenerator_Provider_Provider() {
}

func (*KnowledgeBase_EmbeddingGenerator_Provider_Cohere_) isKnowledgeBase_EmbeddingGenerator_Provider_Provider() {
}

type KnowledgeBase_EmbeddingGenerator_Provider_OpenAI struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ApiKey        string                 `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KnowledgeBase_EmbeddingGenerator_Provider_OpenAI) Reset() {
	*x = KnowledgeBase_EmbeddingGenerator_Provider_OpenAI{}
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeBase_EmbeddingGenerator_Provider_OpenAI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeBase_EmbeddingGenerator_Provider_OpenAI) ProtoMessage() {}

func (x *KnowledgeBase_EmbeddingGenerator_Provider_OpenAI) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeBase_EmbeddingGenerator_Provider_OpenAI.ProtoReflect.Descriptor instead.
func (*KnowledgeBase_EmbeddingGenerator_Provider_OpenAI) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP(), []int{0, 1, 0, 0}
}

func (x *KnowledgeBase_EmbeddingGenerator_Provider_OpenAI) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

type KnowledgeBase_EmbeddingGenerator_Provider_Cohere struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BaseUrl       string                 `protobuf:"bytes,1,opt,name=base_url,json=baseUrl,proto3" json:"base_url,omitempty"`
	ApiKey        string                 `protobuf:"bytes,2,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KnowledgeBase_EmbeddingGenerator_Provider_Cohere) Reset() {
	*x = KnowledgeBase_EmbeddingGenerator_Provider_Cohere{}
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeBase_EmbeddingGenerator_Provider_Cohere) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeBase_EmbeddingGenerator_Provider_Cohere) ProtoMessage() {}

func (x *KnowledgeBase_EmbeddingGenerator_Provider_Cohere) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeBase_EmbeddingGenerator_Provider_Cohere.ProtoReflect.Descriptor instead.
func (*KnowledgeBase_EmbeddingGenerator_Provider_Cohere) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP(), []int{0, 1, 0, 1}
}

func (x *KnowledgeBase_EmbeddingGenerator_Provider_Cohere) GetBaseUrl() string {
	if x != nil {
		return x.BaseUrl
	}
	return ""
}

func (x *KnowledgeBase_EmbeddingGenerator_Provider_Cohere) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

type KnowledgeBase_Retriever_Reranker struct {
	state         protoimpl.MessageState                     `protogen:"open.v1"`
	Enabled       bool                                       `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Provider      *KnowledgeBase_Retriever_Reranker_Provider `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KnowledgeBase_Retriever_Reranker) Reset() {
	*x = KnowledgeBase_Retriever_Reranker{}
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeBase_Retriever_Reranker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeBase_Retriever_Reranker) ProtoMessage() {}

func (x *KnowledgeBase_Retriever_Reranker) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeBase_Retriever_Reranker.ProtoReflect.Descriptor instead.
func (*KnowledgeBase_Retriever_Reranker) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP(), []int{0, 4, 0}
}

func (x *KnowledgeBase_Retriever_Reranker) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *KnowledgeBase_Retriever_Reranker) GetProvider() *KnowledgeBase_Retriever_Reranker_Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

type KnowledgeBase_Retriever_Reranker_Provider struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Provider:
	//
	//	*KnowledgeBase_Retriever_Reranker_Provider_Cohere_
	Provider      isKnowledgeBase_Retriever_Reranker_Provider_Provider `protobuf_oneof:"provider"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KnowledgeBase_Retriever_Reranker_Provider) Reset() {
	*x = KnowledgeBase_Retriever_Reranker_Provider{}
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeBase_Retriever_Reranker_Provider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeBase_Retriever_Reranker_Provider) ProtoMessage() {}

func (x *KnowledgeBase_Retriever_Reranker_Provider) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeBase_Retriever_Reranker_Provider.ProtoReflect.Descriptor instead.
func (*KnowledgeBase_Retriever_Reranker_Provider) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP(), []int{0, 4, 0, 0}
}

func (x *KnowledgeBase_Retriever_Reranker_Provider) GetProvider() isKnowledgeBase_Retriever_Reranker_Provider_Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *KnowledgeBase_Retriever_Reranker_Provider) GetCohere() *KnowledgeBase_Retriever_Reranker_Provider_Cohere {
	if x != nil {
		if x, ok := x.Provider.(*KnowledgeBase_Retriever_Reranker_Provider_Cohere_); ok {
			return x.Cohere
		}
	}
	return nil
}

type isKnowledgeBase_Retriever_Reranker_Provider_Provider interface {
	isKnowledgeBase_Retriever_Reranker_Provider_Provider()
}

type KnowledgeBase_Retriever_Reranker_Provider_Cohere_ struct {
	Cohere *KnowledgeBase_Retriever_Reranker_Provider_Cohere `protobuf:"bytes,1,opt,name=cohere,proto3,oneof"`
}

func (*KnowledgeBase_Retriever_Reranker_Provider_Cohere_) isKnowledgeBase_Retriever_Reranker_Provider_Provider() {
}

type KnowledgeBase_Retriever_Reranker_Provider_Cohere struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ApiKey        string                 `protobuf:"bytes,2,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	Model         string                 `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KnowledgeBase_Retriever_Reranker_Provider_Cohere) Reset() {
	*x = KnowledgeBase_Retriever_Reranker_Provider_Cohere{}
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeBase_Retriever_Reranker_Provider_Cohere) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeBase_Retriever_Reranker_Provider_Cohere) ProtoMessage() {}

func (x *KnowledgeBase_Retriever_Reranker_Provider_Cohere) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeBase_Retriever_Reranker_Provider_Cohere.ProtoReflect.Descriptor instead.
func (*KnowledgeBase_Retriever_Reranker_Provider_Cohere) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP(), []int{0, 4, 0, 0, 0}
}

func (x *KnowledgeBase_Retriever_Reranker_Provider_Cohere) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *KnowledgeBase_Retriever_Reranker_Provider_Cohere) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

type KnowledgeBase_Generation_Provider struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Provider:
	//
	//	*KnowledgeBase_Generation_Provider_Openai
	Provider      isKnowledgeBase_Generation_Provider_Provider `protobuf_oneof:"provider"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KnowledgeBase_Generation_Provider) Reset() {
	*x = KnowledgeBase_Generation_Provider{}
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeBase_Generation_Provider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeBase_Generation_Provider) ProtoMessage() {}

func (x *KnowledgeBase_Generation_Provider) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeBase_Generation_Provider.ProtoReflect.Descriptor instead.
func (*KnowledgeBase_Generation_Provider) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP(), []int{0, 5, 0}
}

func (x *KnowledgeBase_Generation_Provider) GetProvider() isKnowledgeBase_Generation_Provider_Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *KnowledgeBase_Generation_Provider) GetOpenai() *KnowledgeBase_Generation_Provider_OpenAI {
	if x != nil {
		if x, ok := x.Provider.(*KnowledgeBase_Generation_Provider_Openai); ok {
			return x.Openai
		}
	}
	return nil
}

type isKnowledgeBase_Generation_Provider_Provider interface {
	isKnowledgeBase_Generation_Provider_Provider()
}

type KnowledgeBase_Generation_Provider_Openai struct {
	Openai *KnowledgeBase_Generation_Provider_OpenAI `protobuf:"bytes,1,opt,name=openai,proto3,oneof"`
}

func (*KnowledgeBase_Generation_Provider_Openai) isKnowledgeBase_Generation_Provider_Provider() {}

type KnowledgeBase_Generation_Provider_OpenAI struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ApiKey        string                 `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KnowledgeBase_Generation_Provider_OpenAI) Reset() {
	*x = KnowledgeBase_Generation_Provider_OpenAI{}
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeBase_Generation_Provider_OpenAI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeBase_Generation_Provider_OpenAI) ProtoMessage() {}

func (x *KnowledgeBase_Generation_Provider_OpenAI) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeBase_Generation_Provider_OpenAI.ProtoReflect.Descriptor instead.
func (*KnowledgeBase_Generation_Provider_OpenAI) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP(), []int{0, 5, 0, 0}
}

func (x *KnowledgeBase_Generation_Provider_OpenAI) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

type KnowledgeBaseCreate_VectorDatabase struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to VectorDatabase:
	//
	//	*KnowledgeBaseCreate_VectorDatabase_Postgres_
	VectorDatabase isKnowledgeBaseCreate_VectorDatabase_VectorDatabase `protobuf_oneof:"vector_database"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *KnowledgeBaseCreate_VectorDatabase) Reset() {
	*x = KnowledgeBaseCreate_VectorDatabase{}
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeBaseCreate_VectorDatabase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeBaseCreate_VectorDatabase) ProtoMessage() {}

func (x *KnowledgeBaseCreate_VectorDatabase) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeBaseCreate_VectorDatabase.ProtoReflect.Descriptor instead.
func (*KnowledgeBaseCreate_VectorDatabase) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP(), []int{1, 0}
}

func (x *KnowledgeBaseCreate_VectorDatabase) GetVectorDatabase() isKnowledgeBaseCreate_VectorDatabase_VectorDatabase {
	if x != nil {
		return x.VectorDatabase
	}
	return nil
}

func (x *KnowledgeBaseCreate_VectorDatabase) GetPostgres() *KnowledgeBaseCreate_VectorDatabase_Postgres {
	if x != nil {
		if x, ok := x.VectorDatabase.(*KnowledgeBaseCreate_VectorDatabase_Postgres_); ok {
			return x.Postgres
		}
	}
	return nil
}

type isKnowledgeBaseCreate_VectorDatabase_VectorDatabase interface {
	isKnowledgeBaseCreate_VectorDatabase_VectorDatabase()
}

type KnowledgeBaseCreate_VectorDatabase_Postgres_ struct {
	Postgres *KnowledgeBaseCreate_VectorDatabase_Postgres `protobuf:"bytes,1,opt,name=postgres,proto3,oneof"`
}

func (*KnowledgeBaseCreate_VectorDatabase_Postgres_) isKnowledgeBaseCreate_VectorDatabase_VectorDatabase() {
}

type KnowledgeBaseCreate_EmbeddingGenerator struct {
	state         protoimpl.MessageState                           `protogen:"open.v1"`
	Provider      *KnowledgeBaseCreate_EmbeddingGenerator_Provider `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	Dimensions    int32                                            `protobuf:"varint,2,opt,name=dimensions,proto3" json:"dimensions,omitempty"`
	Model         string                                           `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KnowledgeBaseCreate_EmbeddingGenerator) Reset() {
	*x = KnowledgeBaseCreate_EmbeddingGenerator{}
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeBaseCreate_EmbeddingGenerator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeBaseCreate_EmbeddingGenerator) ProtoMessage() {}

func (x *KnowledgeBaseCreate_EmbeddingGenerator) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeBaseCreate_EmbeddingGenerator.ProtoReflect.Descriptor instead.
func (*KnowledgeBaseCreate_EmbeddingGenerator) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP(), []int{1, 1}
}

func (x *KnowledgeBaseCreate_EmbeddingGenerator) GetProvider() *KnowledgeBaseCreate_EmbeddingGenerator_Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *KnowledgeBaseCreate_EmbeddingGenerator) GetDimensions() int32 {
	if x != nil {
		return x.Dimensions
	}
	return 0
}

func (x *KnowledgeBaseCreate_EmbeddingGenerator) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

type KnowledgeBaseCreate_Indexer struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ChunkSize        int32                  `protobuf:"varint,1,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size,omitempty"`
	ChunkOverlap     int32                  `protobuf:"varint,2,opt,name=chunk_overlap,json=chunkOverlap,proto3" json:"chunk_overlap,omitempty"`
	RedpandaUsername string                 `protobuf:"bytes,3,opt,name=redpanda_username,json=redpandaUsername,proto3" json:"redpanda_username,omitempty"`
	RedpandaPassword string                 `protobuf:"bytes,4,opt,name=redpanda_password,json=redpandaPassword,proto3" json:"redpanda_password,omitempty"`
	InputTopics      []string               `protobuf:"bytes,5,rep,name=input_topics,json=inputTopics,proto3" json:"input_topics,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *KnowledgeBaseCreate_Indexer) Reset() {
	*x = KnowledgeBaseCreate_Indexer{}
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeBaseCreate_Indexer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeBaseCreate_Indexer) ProtoMessage() {}

func (x *KnowledgeBaseCreate_Indexer) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeBaseCreate_Indexer.ProtoReflect.Descriptor instead.
func (*KnowledgeBaseCreate_Indexer) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP(), []int{1, 3}
}

func (x *KnowledgeBaseCreate_Indexer) GetChunkSize() int32 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

func (x *KnowledgeBaseCreate_Indexer) GetChunkOverlap() int32 {
	if x != nil {
		return x.ChunkOverlap
	}
	return 0
}

func (x *KnowledgeBaseCreate_Indexer) GetRedpandaUsername() string {
	if x != nil {
		return x.RedpandaUsername
	}
	return ""
}

func (x *KnowledgeBaseCreate_Indexer) GetRedpandaPassword() string {
	if x != nil {
		return x.RedpandaPassword
	}
	return ""
}

func (x *KnowledgeBaseCreate_Indexer) GetInputTopics() []string {
	if x != nil {
		return x.InputTopics
	}
	return nil
}

type KnowledgeBaseCreate_Retriever struct {
	state         protoimpl.MessageState                  `protogen:"open.v1"`
	Reranker      *KnowledgeBaseCreate_Retriever_Reranker `protobuf:"bytes,1,opt,name=reranker,proto3" json:"reranker,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KnowledgeBaseCreate_Retriever) Reset() {
	*x = KnowledgeBaseCreate_Retriever{}
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeBaseCreate_Retriever) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeBaseCreate_Retriever) ProtoMessage() {}

func (x *KnowledgeBaseCreate_Retriever) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeBaseCreate_Retriever.ProtoReflect.Descriptor instead.
func (*KnowledgeBaseCreate_Retriever) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP(), []int{1, 4}
}

func (x *KnowledgeBaseCreate_Retriever) GetReranker() *KnowledgeBaseCreate_Retriever_Reranker {
	if x != nil {
		return x.Reranker
	}
	return nil
}

type KnowledgeBaseCreate_Generation struct {
	state         protoimpl.MessageState                   `protogen:"open.v1"`
	Provider      *KnowledgeBaseCreate_Generation_Provider `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	Model         string                                   `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KnowledgeBaseCreate_Generation) Reset() {
	*x = KnowledgeBaseCreate_Generation{}
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeBaseCreate_Generation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeBaseCreate_Generation) ProtoMessage() {}

func (x *KnowledgeBaseCreate_Generation) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeBaseCreate_Generation.ProtoReflect.Descriptor instead.
func (*KnowledgeBaseCreate_Generation) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP(), []int{1, 5}
}

func (x *KnowledgeBaseCreate_Generation) GetProvider() *KnowledgeBaseCreate_Generation_Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *KnowledgeBaseCreate_Generation) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

type KnowledgeBaseCreate_VectorDatabase_Postgres struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Dsn           string                 `protobuf:"bytes,1,opt,name=dsn,proto3" json:"dsn,omitempty"`
	Table         string                 `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KnowledgeBaseCreate_VectorDatabase_Postgres) Reset() {
	*x = KnowledgeBaseCreate_VectorDatabase_Postgres{}
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeBaseCreate_VectorDatabase_Postgres) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeBaseCreate_VectorDatabase_Postgres) ProtoMessage() {}

func (x *KnowledgeBaseCreate_VectorDatabase_Postgres) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeBaseCreate_VectorDatabase_Postgres.ProtoReflect.Descriptor instead.
func (*KnowledgeBaseCreate_VectorDatabase_Postgres) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (x *KnowledgeBaseCreate_VectorDatabase_Postgres) GetDsn() string {
	if x != nil {
		return x.Dsn
	}
	return ""
}

func (x *KnowledgeBaseCreate_VectorDatabase_Postgres) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

type KnowledgeBaseCreate_EmbeddingGenerator_Provider struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Provider:
	//
	//	*KnowledgeBaseCreate_EmbeddingGenerator_Provider_Openai
	//	*KnowledgeBaseCreate_EmbeddingGenerator_Provider_Cohere_
	Provider      isKnowledgeBaseCreate_EmbeddingGenerator_Provider_Provider `protobuf_oneof:"provider"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KnowledgeBaseCreate_EmbeddingGenerator_Provider) Reset() {
	*x = KnowledgeBaseCreate_EmbeddingGenerator_Provider{}
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeBaseCreate_EmbeddingGenerator_Provider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeBaseCreate_EmbeddingGenerator_Provider) ProtoMessage() {}

func (x *KnowledgeBaseCreate_EmbeddingGenerator_Provider) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeBaseCreate_EmbeddingGenerator_Provider.ProtoReflect.Descriptor instead.
func (*KnowledgeBaseCreate_EmbeddingGenerator_Provider) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP(), []int{1, 1, 0}
}

func (x *KnowledgeBaseCreate_EmbeddingGenerator_Provider) GetProvider() isKnowledgeBaseCreate_EmbeddingGenerator_Provider_Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *KnowledgeBaseCreate_EmbeddingGenerator_Provider) GetOpenai() *KnowledgeBaseCreate_EmbeddingGenerator_Provider_OpenAI {
	if x != nil {
		if x, ok := x.Provider.(*KnowledgeBaseCreate_EmbeddingGenerator_Provider_Openai); ok {
			return x.Openai
		}
	}
	return nil
}

func (x *KnowledgeBaseCreate_EmbeddingGenerator_Provider) GetCohere() *KnowledgeBaseCreate_EmbeddingGenerator_Provider_Cohere {
	if x != nil {
		if x, ok := x.Provider.(*KnowledgeBaseCreate_EmbeddingGenerator_Provider_Cohere_); ok {
			return x.Cohere
		}
	}
	return nil
}

type isKnowledgeBaseCreate_EmbeddingGenerator_Provider_Provider interface {
	isKnowledgeBaseCreate_EmbeddingGenerator_Provider_Provider()
}

type KnowledgeBaseCreate_EmbeddingGenerator_Provider_Openai struct {
	Openai *KnowledgeBaseCreate_EmbeddingGenerator_Provider_OpenAI `protobuf:"bytes,1,opt,name=openai,proto3,oneof"`
}

type KnowledgeBaseCreate_EmbeddingGenerator_Provider_Cohere_ struct {
	Cohere *KnowledgeBaseCreate_EmbeddingGenerator_Provider_Cohere `protobuf:"bytes,2,opt,name=cohere,proto3,oneof"`
}

func (*KnowledgeBaseCreate_EmbeddingGenerator_Provider_Openai) isKnowledgeBaseCreate_EmbeddingGenerator_Provider_Provider() {
}

func (*KnowledgeBaseCreate_EmbeddingGenerator_Provider_Cohere_) isKnowledgeBaseCreate_EmbeddingGenerator_Provider_Provider() {
}

type KnowledgeBaseCreate_EmbeddingGenerator_Provider_OpenAI struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ApiKey        string                 `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KnowledgeBaseCreate_EmbeddingGenerator_Provider_OpenAI) Reset() {
	*x = KnowledgeBaseCreate_EmbeddingGenerator_Provider_OpenAI{}
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeBaseCreate_EmbeddingGenerator_Provider_OpenAI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeBaseCreate_EmbeddingGenerator_Provider_OpenAI) ProtoMessage() {}

func (x *KnowledgeBaseCreate_EmbeddingGenerator_Provider_OpenAI) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeBaseCreate_EmbeddingGenerator_Provider_OpenAI.ProtoReflect.Descriptor instead.
func (*KnowledgeBaseCreate_EmbeddingGenerator_Provider_OpenAI) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP(), []int{1, 1, 0, 0}
}

func (x *KnowledgeBaseCreate_EmbeddingGenerator_Provider_OpenAI) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

type KnowledgeBaseCreate_EmbeddingGenerator_Provider_Cohere struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BaseUrl       string                 `protobuf:"bytes,1,opt,name=base_url,json=baseUrl,proto3" json:"base_url,omitempty"`
	ApiKey        string                 `protobuf:"bytes,2,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KnowledgeBaseCreate_EmbeddingGenerator_Provider_Cohere) Reset() {
	*x = KnowledgeBaseCreate_EmbeddingGenerator_Provider_Cohere{}
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeBaseCreate_EmbeddingGenerator_Provider_Cohere) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeBaseCreate_EmbeddingGenerator_Provider_Cohere) ProtoMessage() {}

func (x *KnowledgeBaseCreate_EmbeddingGenerator_Provider_Cohere) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeBaseCreate_EmbeddingGenerator_Provider_Cohere.ProtoReflect.Descriptor instead.
func (*KnowledgeBaseCreate_EmbeddingGenerator_Provider_Cohere) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP(), []int{1, 1, 0, 1}
}

func (x *KnowledgeBaseCreate_EmbeddingGenerator_Provider_Cohere) GetBaseUrl() string {
	if x != nil {
		return x.BaseUrl
	}
	return ""
}

func (x *KnowledgeBaseCreate_EmbeddingGenerator_Provider_Cohere) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

type KnowledgeBaseCreate_Retriever_Reranker struct {
	state         protoimpl.MessageState                           `protogen:"open.v1"`
	Enabled       bool                                             `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Provider      *KnowledgeBaseCreate_Retriever_Reranker_Provider `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KnowledgeBaseCreate_Retriever_Reranker) Reset() {
	*x = KnowledgeBaseCreate_Retriever_Reranker{}
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeBaseCreate_Retriever_Reranker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeBaseCreate_Retriever_Reranker) ProtoMessage() {}

func (x *KnowledgeBaseCreate_Retriever_Reranker) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeBaseCreate_Retriever_Reranker.ProtoReflect.Descriptor instead.
func (*KnowledgeBaseCreate_Retriever_Reranker) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP(), []int{1, 4, 0}
}

func (x *KnowledgeBaseCreate_Retriever_Reranker) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *KnowledgeBaseCreate_Retriever_Reranker) GetProvider() *KnowledgeBaseCreate_Retriever_Reranker_Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

type KnowledgeBaseCreate_Retriever_Reranker_Provider struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Provider:
	//
	//	*KnowledgeBaseCreate_Retriever_Reranker_Provider_Cohere_
	Provider      isKnowledgeBaseCreate_Retriever_Reranker_Provider_Provider `protobuf_oneof:"provider"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KnowledgeBaseCreate_Retriever_Reranker_Provider) Reset() {
	*x = KnowledgeBaseCreate_Retriever_Reranker_Provider{}
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeBaseCreate_Retriever_Reranker_Provider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeBaseCreate_Retriever_Reranker_Provider) ProtoMessage() {}

func (x *KnowledgeBaseCreate_Retriever_Reranker_Provider) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeBaseCreate_Retriever_Reranker_Provider.ProtoReflect.Descriptor instead.
func (*KnowledgeBaseCreate_Retriever_Reranker_Provider) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP(), []int{1, 4, 0, 0}
}

func (x *KnowledgeBaseCreate_Retriever_Reranker_Provider) GetProvider() isKnowledgeBaseCreate_Retriever_Reranker_Provider_Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *KnowledgeBaseCreate_Retriever_Reranker_Provider) GetCohere() *KnowledgeBaseCreate_Retriever_Reranker_Provider_Cohere {
	if x != nil {
		if x, ok := x.Provider.(*KnowledgeBaseCreate_Retriever_Reranker_Provider_Cohere_); ok {
			return x.Cohere
		}
	}
	return nil
}

type isKnowledgeBaseCreate_Retriever_Reranker_Provider_Provider interface {
	isKnowledgeBaseCreate_Retriever_Reranker_Provider_Provider()
}

type KnowledgeBaseCreate_Retriever_Reranker_Provider_Cohere_ struct {
	Cohere *KnowledgeBaseCreate_Retriever_Reranker_Provider_Cohere `protobuf:"bytes,1,opt,name=cohere,proto3,oneof"`
}

func (*KnowledgeBaseCreate_Retriever_Reranker_Provider_Cohere_) isKnowledgeBaseCreate_Retriever_Reranker_Provider_Provider() {
}

type KnowledgeBaseCreate_Retriever_Reranker_Provider_Cohere struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ApiKey        string                 `protobuf:"bytes,2,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	Model         string                 `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KnowledgeBaseCreate_Retriever_Reranker_Provider_Cohere) Reset() {
	*x = KnowledgeBaseCreate_Retriever_Reranker_Provider_Cohere{}
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeBaseCreate_Retriever_Reranker_Provider_Cohere) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeBaseCreate_Retriever_Reranker_Provider_Cohere) ProtoMessage() {}

func (x *KnowledgeBaseCreate_Retriever_Reranker_Provider_Cohere) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeBaseCreate_Retriever_Reranker_Provider_Cohere.ProtoReflect.Descriptor instead.
func (*KnowledgeBaseCreate_Retriever_Reranker_Provider_Cohere) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP(), []int{1, 4, 0, 0, 0}
}

func (x *KnowledgeBaseCreate_Retriever_Reranker_Provider_Cohere) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *KnowledgeBaseCreate_Retriever_Reranker_Provider_Cohere) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

type KnowledgeBaseCreate_Generation_Provider struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Provider:
	//
	//	*KnowledgeBaseCreate_Generation_Provider_Openai
	Provider      isKnowledgeBaseCreate_Generation_Provider_Provider `protobuf_oneof:"provider"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KnowledgeBaseCreate_Generation_Provider) Reset() {
	*x = KnowledgeBaseCreate_Generation_Provider{}
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeBaseCreate_Generation_Provider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeBaseCreate_Generation_Provider) ProtoMessage() {}

func (x *KnowledgeBaseCreate_Generation_Provider) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeBaseCreate_Generation_Provider.ProtoReflect.Descriptor instead.
func (*KnowledgeBaseCreate_Generation_Provider) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP(), []int{1, 5, 0}
}

func (x *KnowledgeBaseCreate_Generation_Provider) GetProvider() isKnowledgeBaseCreate_Generation_Provider_Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *KnowledgeBaseCreate_Generation_Provider) GetOpenai() *KnowledgeBaseCreate_Generation_Provider_OpenAI {
	if x != nil {
		if x, ok := x.Provider.(*KnowledgeBaseCreate_Generation_Provider_Openai); ok {
			return x.Openai
		}
	}
	return nil
}

type isKnowledgeBaseCreate_Generation_Provider_Provider interface {
	isKnowledgeBaseCreate_Generation_Provider_Provider()
}

type KnowledgeBaseCreate_Generation_Provider_Openai struct {
	Openai *KnowledgeBaseCreate_Generation_Provider_OpenAI `protobuf:"bytes,1,opt,name=openai,proto3,oneof"`
}

func (*KnowledgeBaseCreate_Generation_Provider_Openai) isKnowledgeBaseCreate_Generation_Provider_Provider() {
}

type KnowledgeBaseCreate_Generation_Provider_OpenAI struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ApiKey        string                 `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KnowledgeBaseCreate_Generation_Provider_OpenAI) Reset() {
	*x = KnowledgeBaseCreate_Generation_Provider_OpenAI{}
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeBaseCreate_Generation_Provider_OpenAI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeBaseCreate_Generation_Provider_OpenAI) ProtoMessage() {}

func (x *KnowledgeBaseCreate_Generation_Provider_OpenAI) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeBaseCreate_Generation_Provider_OpenAI.ProtoReflect.Descriptor instead.
func (*KnowledgeBaseCreate_Generation_Provider_OpenAI) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP(), []int{1, 5, 0, 0}
}

func (x *KnowledgeBaseCreate_Generation_Provider_OpenAI) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

type KnowledgeBaseUpdate_VectorDatabase struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to VectorDatabase:
	//
	//	*KnowledgeBaseUpdate_VectorDatabase_Postgres_
	VectorDatabase isKnowledgeBaseUpdate_VectorDatabase_VectorDatabase `protobuf_oneof:"vector_database"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *KnowledgeBaseUpdate_VectorDatabase) Reset() {
	*x = KnowledgeBaseUpdate_VectorDatabase{}
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeBaseUpdate_VectorDatabase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeBaseUpdate_VectorDatabase) ProtoMessage() {}

func (x *KnowledgeBaseUpdate_VectorDatabase) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeBaseUpdate_VectorDatabase.ProtoReflect.Descriptor instead.
func (*KnowledgeBaseUpdate_VectorDatabase) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP(), []int{2, 0}
}

func (x *KnowledgeBaseUpdate_VectorDatabase) GetVectorDatabase() isKnowledgeBaseUpdate_VectorDatabase_VectorDatabase {
	if x != nil {
		return x.VectorDatabase
	}
	return nil
}

func (x *KnowledgeBaseUpdate_VectorDatabase) GetPostgres() *KnowledgeBaseUpdate_VectorDatabase_Postgres {
	if x != nil {
		if x, ok := x.VectorDatabase.(*KnowledgeBaseUpdate_VectorDatabase_Postgres_); ok {
			return x.Postgres
		}
	}
	return nil
}

type isKnowledgeBaseUpdate_VectorDatabase_VectorDatabase interface {
	isKnowledgeBaseUpdate_VectorDatabase_VectorDatabase()
}

type KnowledgeBaseUpdate_VectorDatabase_Postgres_ struct {
	Postgres *KnowledgeBaseUpdate_VectorDatabase_Postgres `protobuf:"bytes,1,opt,name=postgres,proto3,oneof"`
}

func (*KnowledgeBaseUpdate_VectorDatabase_Postgres_) isKnowledgeBaseUpdate_VectorDatabase_VectorDatabase() {
}

type KnowledgeBaseUpdate_EmbeddingGenerator struct {
	state         protoimpl.MessageState                           `protogen:"open.v1"`
	Provider      *KnowledgeBaseUpdate_EmbeddingGenerator_Provider `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KnowledgeBaseUpdate_EmbeddingGenerator) Reset() {
	*x = KnowledgeBaseUpdate_EmbeddingGenerator{}
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeBaseUpdate_EmbeddingGenerator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeBaseUpdate_EmbeddingGenerator) ProtoMessage() {}

func (x *KnowledgeBaseUpdate_EmbeddingGenerator) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeBaseUpdate_EmbeddingGenerator.ProtoReflect.Descriptor instead.
func (*KnowledgeBaseUpdate_EmbeddingGenerator) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP(), []int{2, 1}
}

func (x *KnowledgeBaseUpdate_EmbeddingGenerator) GetProvider() *KnowledgeBaseUpdate_EmbeddingGenerator_Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

type KnowledgeBaseUpdate_Indexer struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ChunkSize        int32                  `protobuf:"varint,1,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size,omitempty"`
	ChunkOverlap     int32                  `protobuf:"varint,2,opt,name=chunk_overlap,json=chunkOverlap,proto3" json:"chunk_overlap,omitempty"`
	RedpandaUsername string                 `protobuf:"bytes,3,opt,name=redpanda_username,json=redpandaUsername,proto3" json:"redpanda_username,omitempty"`
	RedpandaPassword string                 `protobuf:"bytes,4,opt,name=redpanda_password,json=redpandaPassword,proto3" json:"redpanda_password,omitempty"`
	InputTopics      []string               `protobuf:"bytes,5,rep,name=input_topics,json=inputTopics,proto3" json:"input_topics,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *KnowledgeBaseUpdate_Indexer) Reset() {
	*x = KnowledgeBaseUpdate_Indexer{}
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeBaseUpdate_Indexer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeBaseUpdate_Indexer) ProtoMessage() {}

func (x *KnowledgeBaseUpdate_Indexer) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeBaseUpdate_Indexer.ProtoReflect.Descriptor instead.
func (*KnowledgeBaseUpdate_Indexer) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP(), []int{2, 3}
}

func (x *KnowledgeBaseUpdate_Indexer) GetChunkSize() int32 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

func (x *KnowledgeBaseUpdate_Indexer) GetChunkOverlap() int32 {
	if x != nil {
		return x.ChunkOverlap
	}
	return 0
}

func (x *KnowledgeBaseUpdate_Indexer) GetRedpandaUsername() string {
	if x != nil {
		return x.RedpandaUsername
	}
	return ""
}

func (x *KnowledgeBaseUpdate_Indexer) GetRedpandaPassword() string {
	if x != nil {
		return x.RedpandaPassword
	}
	return ""
}

func (x *KnowledgeBaseUpdate_Indexer) GetInputTopics() []string {
	if x != nil {
		return x.InputTopics
	}
	return nil
}

type KnowledgeBaseUpdate_Retriever struct {
	state         protoimpl.MessageState                  `protogen:"open.v1"`
	Reranker      *KnowledgeBaseUpdate_Retriever_Reranker `protobuf:"bytes,1,opt,name=reranker,proto3" json:"reranker,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KnowledgeBaseUpdate_Retriever) Reset() {
	*x = KnowledgeBaseUpdate_Retriever{}
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeBaseUpdate_Retriever) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeBaseUpdate_Retriever) ProtoMessage() {}

func (x *KnowledgeBaseUpdate_Retriever) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeBaseUpdate_Retriever.ProtoReflect.Descriptor instead.
func (*KnowledgeBaseUpdate_Retriever) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP(), []int{2, 4}
}

func (x *KnowledgeBaseUpdate_Retriever) GetReranker() *KnowledgeBaseUpdate_Retriever_Reranker {
	if x != nil {
		return x.Reranker
	}
	return nil
}

type KnowledgeBaseUpdate_Generation struct {
	state         protoimpl.MessageState                   `protogen:"open.v1"`
	Provider      *KnowledgeBaseUpdate_Generation_Provider `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KnowledgeBaseUpdate_Generation) Reset() {
	*x = KnowledgeBaseUpdate_Generation{}
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeBaseUpdate_Generation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeBaseUpdate_Generation) ProtoMessage() {}

func (x *KnowledgeBaseUpdate_Generation) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeBaseUpdate_Generation.ProtoReflect.Descriptor instead.
func (*KnowledgeBaseUpdate_Generation) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP(), []int{2, 5}
}

func (x *KnowledgeBaseUpdate_Generation) GetProvider() *KnowledgeBaseUpdate_Generation_Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

type KnowledgeBaseUpdate_VectorDatabase_Postgres struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Dsn           string                 `protobuf:"bytes,1,opt,name=dsn,proto3" json:"dsn,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KnowledgeBaseUpdate_VectorDatabase_Postgres) Reset() {
	*x = KnowledgeBaseUpdate_VectorDatabase_Postgres{}
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeBaseUpdate_VectorDatabase_Postgres) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeBaseUpdate_VectorDatabase_Postgres) ProtoMessage() {}

func (x *KnowledgeBaseUpdate_VectorDatabase_Postgres) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeBaseUpdate_VectorDatabase_Postgres.ProtoReflect.Descriptor instead.
func (*KnowledgeBaseUpdate_VectorDatabase_Postgres) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP(), []int{2, 0, 0}
}

func (x *KnowledgeBaseUpdate_VectorDatabase_Postgres) GetDsn() string {
	if x != nil {
		return x.Dsn
	}
	return ""
}

type KnowledgeBaseUpdate_EmbeddingGenerator_Provider struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Provider:
	//
	//	*KnowledgeBaseUpdate_EmbeddingGenerator_Provider_Openai
	//	*KnowledgeBaseUpdate_EmbeddingGenerator_Provider_Cohere_
	Provider      isKnowledgeBaseUpdate_EmbeddingGenerator_Provider_Provider `protobuf_oneof:"provider"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KnowledgeBaseUpdate_EmbeddingGenerator_Provider) Reset() {
	*x = KnowledgeBaseUpdate_EmbeddingGenerator_Provider{}
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeBaseUpdate_EmbeddingGenerator_Provider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeBaseUpdate_EmbeddingGenerator_Provider) ProtoMessage() {}

func (x *KnowledgeBaseUpdate_EmbeddingGenerator_Provider) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeBaseUpdate_EmbeddingGenerator_Provider.ProtoReflect.Descriptor instead.
func (*KnowledgeBaseUpdate_EmbeddingGenerator_Provider) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP(), []int{2, 1, 0}
}

func (x *KnowledgeBaseUpdate_EmbeddingGenerator_Provider) GetProvider() isKnowledgeBaseUpdate_EmbeddingGenerator_Provider_Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *KnowledgeBaseUpdate_EmbeddingGenerator_Provider) GetOpenai() *KnowledgeBaseUpdate_EmbeddingGenerator_Provider_OpenAI {
	if x != nil {
		if x, ok := x.Provider.(*KnowledgeBaseUpdate_EmbeddingGenerator_Provider_Openai); ok {
			return x.Openai
		}
	}
	return nil
}

func (x *KnowledgeBaseUpdate_EmbeddingGenerator_Provider) GetCohere() *KnowledgeBaseUpdate_EmbeddingGenerator_Provider_Cohere {
	if x != nil {
		if x, ok := x.Provider.(*KnowledgeBaseUpdate_EmbeddingGenerator_Provider_Cohere_); ok {
			return x.Cohere
		}
	}
	return nil
}

type isKnowledgeBaseUpdate_EmbeddingGenerator_Provider_Provider interface {
	isKnowledgeBaseUpdate_EmbeddingGenerator_Provider_Provider()
}

type KnowledgeBaseUpdate_EmbeddingGenerator_Provider_Openai struct {
	Openai *KnowledgeBaseUpdate_EmbeddingGenerator_Provider_OpenAI `protobuf:"bytes,1,opt,name=openai,proto3,oneof"`
}

type KnowledgeBaseUpdate_EmbeddingGenerator_Provider_Cohere_ struct {
	Cohere *KnowledgeBaseUpdate_EmbeddingGenerator_Provider_Cohere `protobuf:"bytes,2,opt,name=cohere,proto3,oneof"`
}

func (*KnowledgeBaseUpdate_EmbeddingGenerator_Provider_Openai) isKnowledgeBaseUpdate_EmbeddingGenerator_Provider_Provider() {
}

func (*KnowledgeBaseUpdate_EmbeddingGenerator_Provider_Cohere_) isKnowledgeBaseUpdate_EmbeddingGenerator_Provider_Provider() {
}

type KnowledgeBaseUpdate_EmbeddingGenerator_Provider_OpenAI struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ApiKey        string                 `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KnowledgeBaseUpdate_EmbeddingGenerator_Provider_OpenAI) Reset() {
	*x = KnowledgeBaseUpdate_EmbeddingGenerator_Provider_OpenAI{}
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeBaseUpdate_EmbeddingGenerator_Provider_OpenAI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeBaseUpdate_EmbeddingGenerator_Provider_OpenAI) ProtoMessage() {}

func (x *KnowledgeBaseUpdate_EmbeddingGenerator_Provider_OpenAI) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeBaseUpdate_EmbeddingGenerator_Provider_OpenAI.ProtoReflect.Descriptor instead.
func (*KnowledgeBaseUpdate_EmbeddingGenerator_Provider_OpenAI) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP(), []int{2, 1, 0, 0}
}

func (x *KnowledgeBaseUpdate_EmbeddingGenerator_Provider_OpenAI) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

type KnowledgeBaseUpdate_EmbeddingGenerator_Provider_Cohere struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BaseUrl       string                 `protobuf:"bytes,1,opt,name=base_url,json=baseUrl,proto3" json:"base_url,omitempty"`
	ApiKey        string                 `protobuf:"bytes,2,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KnowledgeBaseUpdate_EmbeddingGenerator_Provider_Cohere) Reset() {
	*x = KnowledgeBaseUpdate_EmbeddingGenerator_Provider_Cohere{}
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeBaseUpdate_EmbeddingGenerator_Provider_Cohere) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeBaseUpdate_EmbeddingGenerator_Provider_Cohere) ProtoMessage() {}

func (x *KnowledgeBaseUpdate_EmbeddingGenerator_Provider_Cohere) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeBaseUpdate_EmbeddingGenerator_Provider_Cohere.ProtoReflect.Descriptor instead.
func (*KnowledgeBaseUpdate_EmbeddingGenerator_Provider_Cohere) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP(), []int{2, 1, 0, 1}
}

func (x *KnowledgeBaseUpdate_EmbeddingGenerator_Provider_Cohere) GetBaseUrl() string {
	if x != nil {
		return x.BaseUrl
	}
	return ""
}

func (x *KnowledgeBaseUpdate_EmbeddingGenerator_Provider_Cohere) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

type KnowledgeBaseUpdate_Retriever_Reranker struct {
	state         protoimpl.MessageState                           `protogen:"open.v1"`
	Enabled       bool                                             `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Provider      *KnowledgeBaseUpdate_Retriever_Reranker_Provider `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KnowledgeBaseUpdate_Retriever_Reranker) Reset() {
	*x = KnowledgeBaseUpdate_Retriever_Reranker{}
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeBaseUpdate_Retriever_Reranker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeBaseUpdate_Retriever_Reranker) ProtoMessage() {}

func (x *KnowledgeBaseUpdate_Retriever_Reranker) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeBaseUpdate_Retriever_Reranker.ProtoReflect.Descriptor instead.
func (*KnowledgeBaseUpdate_Retriever_Reranker) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP(), []int{2, 4, 0}
}

func (x *KnowledgeBaseUpdate_Retriever_Reranker) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *KnowledgeBaseUpdate_Retriever_Reranker) GetProvider() *KnowledgeBaseUpdate_Retriever_Reranker_Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

type KnowledgeBaseUpdate_Retriever_Reranker_Provider struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Provider:
	//
	//	*KnowledgeBaseUpdate_Retriever_Reranker_Provider_Cohere_
	Provider      isKnowledgeBaseUpdate_Retriever_Reranker_Provider_Provider `protobuf_oneof:"provider"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KnowledgeBaseUpdate_Retriever_Reranker_Provider) Reset() {
	*x = KnowledgeBaseUpdate_Retriever_Reranker_Provider{}
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeBaseUpdate_Retriever_Reranker_Provider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeBaseUpdate_Retriever_Reranker_Provider) ProtoMessage() {}

func (x *KnowledgeBaseUpdate_Retriever_Reranker_Provider) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeBaseUpdate_Retriever_Reranker_Provider.ProtoReflect.Descriptor instead.
func (*KnowledgeBaseUpdate_Retriever_Reranker_Provider) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP(), []int{2, 4, 0, 0}
}

func (x *KnowledgeBaseUpdate_Retriever_Reranker_Provider) GetProvider() isKnowledgeBaseUpdate_Retriever_Reranker_Provider_Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *KnowledgeBaseUpdate_Retriever_Reranker_Provider) GetCohere() *KnowledgeBaseUpdate_Retriever_Reranker_Provider_Cohere {
	if x != nil {
		if x, ok := x.Provider.(*KnowledgeBaseUpdate_Retriever_Reranker_Provider_Cohere_); ok {
			return x.Cohere
		}
	}
	return nil
}

type isKnowledgeBaseUpdate_Retriever_Reranker_Provider_Provider interface {
	isKnowledgeBaseUpdate_Retriever_Reranker_Provider_Provider()
}

type KnowledgeBaseUpdate_Retriever_Reranker_Provider_Cohere_ struct {
	Cohere *KnowledgeBaseUpdate_Retriever_Reranker_Provider_Cohere `protobuf:"bytes,1,opt,name=cohere,proto3,oneof"`
}

func (*KnowledgeBaseUpdate_Retriever_Reranker_Provider_Cohere_) isKnowledgeBaseUpdate_Retriever_Reranker_Provider_Provider() {
}

type KnowledgeBaseUpdate_Retriever_Reranker_Provider_Cohere struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ApiKey        string                 `protobuf:"bytes,2,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	Model         string                 `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KnowledgeBaseUpdate_Retriever_Reranker_Provider_Cohere) Reset() {
	*x = KnowledgeBaseUpdate_Retriever_Reranker_Provider_Cohere{}
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeBaseUpdate_Retriever_Reranker_Provider_Cohere) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeBaseUpdate_Retriever_Reranker_Provider_Cohere) ProtoMessage() {}

func (x *KnowledgeBaseUpdate_Retriever_Reranker_Provider_Cohere) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeBaseUpdate_Retriever_Reranker_Provider_Cohere.ProtoReflect.Descriptor instead.
func (*KnowledgeBaseUpdate_Retriever_Reranker_Provider_Cohere) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP(), []int{2, 4, 0, 0, 0}
}

func (x *KnowledgeBaseUpdate_Retriever_Reranker_Provider_Cohere) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *KnowledgeBaseUpdate_Retriever_Reranker_Provider_Cohere) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

type KnowledgeBaseUpdate_Generation_Provider struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Provider:
	//
	//	*KnowledgeBaseUpdate_Generation_Provider_Openai
	Provider      isKnowledgeBaseUpdate_Generation_Provider_Provider `protobuf_oneof:"provider"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KnowledgeBaseUpdate_Generation_Provider) Reset() {
	*x = KnowledgeBaseUpdate_Generation_Provider{}
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeBaseUpdate_Generation_Provider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeBaseUpdate_Generation_Provider) ProtoMessage() {}

func (x *KnowledgeBaseUpdate_Generation_Provider) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeBaseUpdate_Generation_Provider.ProtoReflect.Descriptor instead.
func (*KnowledgeBaseUpdate_Generation_Provider) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP(), []int{2, 5, 0}
}

func (x *KnowledgeBaseUpdate_Generation_Provider) GetProvider() isKnowledgeBaseUpdate_Generation_Provider_Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *KnowledgeBaseUpdate_Generation_Provider) GetOpenai() *KnowledgeBaseUpdate_Generation_Provider_OpenAI {
	if x != nil {
		if x, ok := x.Provider.(*KnowledgeBaseUpdate_Generation_Provider_Openai); ok {
			return x.Openai
		}
	}
	return nil
}

type isKnowledgeBaseUpdate_Generation_Provider_Provider interface {
	isKnowledgeBaseUpdate_Generation_Provider_Provider()
}

type KnowledgeBaseUpdate_Generation_Provider_Openai struct {
	Openai *KnowledgeBaseUpdate_Generation_Provider_OpenAI `protobuf:"bytes,1,opt,name=openai,proto3,oneof"`
}

func (*KnowledgeBaseUpdate_Generation_Provider_Openai) isKnowledgeBaseUpdate_Generation_Provider_Provider() {
}

type KnowledgeBaseUpdate_Generation_Provider_OpenAI struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ApiKey        string                 `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KnowledgeBaseUpdate_Generation_Provider_OpenAI) Reset() {
	*x = KnowledgeBaseUpdate_Generation_Provider_OpenAI{}
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeBaseUpdate_Generation_Provider_OpenAI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeBaseUpdate_Generation_Provider_OpenAI) ProtoMessage() {}

func (x *KnowledgeBaseUpdate_Generation_Provider_OpenAI) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeBaseUpdate_Generation_Provider_OpenAI.ProtoReflect.Descriptor instead.
func (*KnowledgeBaseUpdate_Generation_Provider_OpenAI) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP(), []int{2, 5, 0, 0}
}

func (x *KnowledgeBaseUpdate_Generation_Provider_OpenAI) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

type ListKnowledgeBasesRequest_Filter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Substring match on pipeline name. Case-sensitive.
	NameContains string `protobuf:"bytes,1,opt,name=name_contains,json=nameContains,proto3" json:"name_contains,omitempty"`
	// Filter pipelines that contain all of these key/value pairs.
	Tags          map[string]string `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListKnowledgeBasesRequest_Filter) Reset() {
	*x = ListKnowledgeBasesRequest_Filter{}
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListKnowledgeBasesRequest_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKnowledgeBasesRequest_Filter) ProtoMessage() {}

func (x *ListKnowledgeBasesRequest_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKnowledgeBasesRequest_Filter.ProtoReflect.Descriptor instead.
func (*ListKnowledgeBasesRequest_Filter) Descriptor() ([]byte, []int) {
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP(), []int{7, 0}
}

func (x *ListKnowledgeBasesRequest_Filter) GetNameContains() string {
	if x != nil {
		return x.NameContains
	}
	return ""
}

func (x *ListKnowledgeBasesRequest_Filter) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

var File_redpanda_api_dataplane_v1alpha3_knowledge_base_proto protoreflect.FileDescriptor

var file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDesc = []byte{
	0x0a, 0x34, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x33, 0x2f, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x28, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x75, 0x74, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcf, 0x17, 0x0a, 0x0d, 0x4b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xe0, 0x41, 0x02, 0xe0, 0x41, 0x03,
	0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x72, 0x03, 0x98, 0x01, 0x14, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x47, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x1e, 0xc8, 0x01, 0x01,
	0x72, 0x19, 0x10, 0x03, 0x18, 0x80, 0x01, 0x32, 0x12, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d,
	0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x20, 0x2f, 0x5d, 0x2b, 0x24, 0x52, 0x0b, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba,
	0x48, 0x05, 0x72, 0x03, 0x18, 0x80, 0x02, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x71, 0x0a, 0x0f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e,
	0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x2e, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x42, 0x09, 0xe0, 0x41,
	0x02, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x7d, 0x0a, 0x13, 0x65, 0x6d, 0x62, 0x65, 0x64,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x42, 0x61, 0x73, 0x65, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x09, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x12, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x11, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x61, 0x6c, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61,
	0x6c, 0x41, 0x70, 0x69, 0x55, 0x72, 0x6c, 0x12, 0x7b, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x42, 0x61, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x2d, 0xba, 0x48, 0x2a, 0x9a, 0x01, 0x27, 0x10, 0x10, 0x2a, 0x23, 0x72, 0x21, 0x32, 0x1f, 0x5e,
	0x28, 0x5b, 0x5c, 0x70, 0x7b, 0x4c, 0x7d, 0x5c, 0x70, 0x7b, 0x5a, 0x7d, 0x5c, 0x70, 0x7b, 0x4e,
	0x7d, 0x5f, 0x2e, 0x3a, 0x2f, 0x3d, 0x2b, 0x5c, 0x2d, 0x40, 0x5d, 0x2a, 0x29, 0x24, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x12, 0x50, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x42, 0x61, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x52, 0x07, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x4b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x72, 0x52, 0x09, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x72, 0x12, 0x64,
	0x0a, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x33, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61,
	0x73, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0xe0,
	0x41, 0x02, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x9f, 0x02, 0x0a, 0x0e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x67,
	0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x4b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65,
	0x73, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x1a, 0x8c, 0x01,
	0x0a, 0x08, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x03, 0x64, 0x73,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x25, 0xc8,
	0x01, 0x01, 0x72, 0x20, 0x32, 0x1e, 0x5e, 0x5c, 0x24, 0x5c, 0x7b, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x73, 0x5c, 0x2e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5f, 0x5d,
	0x2b, 0x5c, 0x7d, 0x24, 0x52, 0x03, 0x64, 0x73, 0x6e, 0x12, 0x41, 0x0a, 0x05, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xe0, 0x41, 0x02, 0xe0, 0x41, 0x05,
	0xba, 0x48, 0x22, 0xc8, 0x01, 0x01, 0x72, 0x1d, 0x10, 0x01, 0x18, 0x3f, 0x32, 0x17, 0x5e, 0x5b,
	0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d,
	0x39, 0x5f, 0x5d, 0x2a, 0x24, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x18, 0x0a, 0x0f,
	0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12,
	0x05, 0xba, 0x48, 0x02, 0x08, 0x01, 0x1a, 0xe1, 0x04, 0x0a, 0x12, 0x45, 0x6d, 0x62, 0x65, 0x64,
	0x64, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x71, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x4a, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x33, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x2e,
	0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x09, 0xe0, 0x41, 0x02,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x12, 0x2c, 0x0a, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x0c, 0xe0, 0x41, 0x02, 0xe0, 0x41, 0x05, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22,
	0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe0,
	0x41, 0x02, 0xe0, 0x41, 0x05, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x05, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x1a, 0x85, 0x03, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x6b, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x51, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x33, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x2e,
	0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x41, 0x49, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x12, 0x6b, 0x0a, 0x06,
	0x63, 0x6f, 0x68, 0x65, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x72,
	0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x4b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x2e, 0x45, 0x6d, 0x62,
	0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x68, 0x65, 0x72, 0x65, 0x48,
	0x00, 0x52, 0x06, 0x63, 0x6f, 0x68, 0x65, 0x72, 0x65, 0x1a, 0x21, 0x0a, 0x06, 0x4f, 0x70, 0x65,
	0x6e, 0x41, 0x49, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x1a, 0x69, 0x0a, 0x06,
	0x43, 0x6f, 0x68, 0x65, 0x72, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x55, 0x72,
	0x6c, 0x12, 0x44, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2b, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x25, 0xc8, 0x01, 0x01, 0x72, 0x20, 0x32,
	0x1e, 0x5e, 0x5c, 0x24, 0x5c, 0x7b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x5c, 0x2e, 0x5b,
	0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5f, 0x5d, 0x2b, 0x5c, 0x7d, 0x24, 0x52,
	0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x42, 0x11, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x12, 0x05, 0xba, 0x48, 0x02, 0x08, 0x01, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x81, 0x02, 0x0a, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x4f, 0x76, 0x65, 0x72,
	0x6c, 0x61, 0x70, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x52, 0x0a, 0x11, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x5f, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xba, 0x48, 0x22,
	0x72, 0x20, 0x32, 0x1e, 0x5e, 0x5c, 0x24, 0x5c, 0x7b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73,
	0x5c, 0x2e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5f, 0x5d, 0x2b, 0x5c,
	0x7d, 0x24, 0x52, 0x10, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x31, 0x0a, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0e, 0xe0, 0x41, 0x02, 0xba,
	0x48, 0x08, 0xc8, 0x01, 0x01, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x1a, 0xf0, 0x03, 0x0a, 0x09, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x72, 0x12, 0x5d, 0x0a, 0x08, 0x72, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x52, 0x08, 0x72, 0x65, 0x72, 0x61,
	0x6e, 0x6b, 0x65, 0x72, 0x1a, 0x83, 0x03, 0x0a, 0x08, 0x52, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x65,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x66, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e,
	0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72,
	0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x1a, 0xf4, 0x01, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x12, 0x6b, 0x0a, 0x06, 0x63, 0x6f, 0x68, 0x65, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x51, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x33, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65,
	0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x72, 0x61, 0x6e,
	0x6b, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x68,
	0x65, 0x72, 0x65, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x68, 0x65, 0x72, 0x65, 0x1a, 0x6f, 0x0a,
	0x06, 0x43, 0x6f, 0x68, 0x65, 0x72, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x25,
	0xc8, 0x01, 0x01, 0x72, 0x20, 0x32, 0x1e, 0x5e, 0x5c, 0x24, 0x5c, 0x7b, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x73, 0x5c, 0x2e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5f,
	0x5d, 0x2b, 0x5c, 0x7d, 0x24, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a,
	0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe0, 0x41,
	0x02, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x0a,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x1a, 0xea, 0x02, 0x0a, 0x0a, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x69, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x72, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x4b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42,
	0x09, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0c, 0xe0, 0x41, 0x02, 0xe0, 0x41, 0x05, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0xcc, 0x01, 0x0a, 0x08, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x63, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x42, 0x61, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x49,
	0x48, 0x00, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x1a, 0x48, 0x0a, 0x06, 0x4f, 0x70,
	0x65, 0x6e, 0x41, 0x49, 0x12, 0x3e, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xba, 0x48, 0x22, 0x72, 0x20, 0x32, 0x1e, 0x5e, 0x5c,
	0x24, 0x5c, 0x7b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x5c, 0x2e, 0x5b, 0x41, 0x2d, 0x5a,
	0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5f, 0x5d, 0x2b, 0x5c, 0x7d, 0x24, 0x52, 0x06, 0x61, 0x70,
	0x69, 0x4b, 0x65, 0x79, 0x42, 0x11, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x12, 0x05, 0xba, 0x48, 0x02, 0x08, 0x01, 0x3a, 0x53, 0xea, 0x41, 0x50, 0x0a, 0x2d, 0x72, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2f, 0x4b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x0f, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x73, 0x32, 0x0e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x22, 0xc6, 0x15, 0x0a,
	0x13, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xe0, 0x41, 0x02, 0xba,
	0x48, 0x1e, 0xc8, 0x01, 0x01, 0x72, 0x19, 0x10, 0x03, 0x18, 0x80, 0x01, 0x32, 0x12, 0x5e, 0x5b,
	0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x20, 0x2f, 0x5d, 0x2b, 0x24,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0x18, 0x80, 0x02, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x77, 0x0a, 0x0f, 0x76, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x43, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x33, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61,
	0x73, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x42, 0x09, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x0e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x13, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x47, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x33, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x09, 0xe0, 0x41, 0x02, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x12, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x81, 0x01, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x61,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x2d, 0xba, 0x48, 0x2a, 0x9a, 0x01, 0x27, 0x10,
	0x10, 0x2a, 0x23, 0x72, 0x21, 0x32, 0x1f, 0x5e, 0x28, 0x5b, 0x5c, 0x70, 0x7b, 0x4c, 0x7d, 0x5c,
	0x70, 0x7b, 0x5a, 0x7d, 0x5c, 0x70, 0x7b, 0x4e, 0x7d, 0x5f, 0x2e, 0x3a, 0x2f, 0x3d, 0x2b, 0x5c,
	0x2d, 0x40, 0x5d, 0x2a, 0x29, 0x24, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x56, 0x0a, 0x07,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e,
	0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x52, 0x07, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x72, 0x12, 0x5c, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x72, 0x52, 0x09, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x72, 0x12, 0x5f, 0x0a, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x82, 0x02, 0x0a, 0x0e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x6f,
	0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72,
	0x65, 0x73, 0x1a, 0x6a, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x12, 0x1b,
	0x0a, 0x03, 0x64, 0x73, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe0, 0x41, 0x02,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x03, 0x64, 0x73, 0x6e, 0x12, 0x41, 0x0a, 0x05, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xe0, 0x41, 0x02, 0xe0,
	0x41, 0x05, 0xba, 0x48, 0x22, 0xc8, 0x01, 0x01, 0x72, 0x1d, 0x10, 0x01, 0x18, 0x3f, 0x32, 0x17,
	0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a,
	0x30, 0x2d, 0x39, 0x5f, 0x5d, 0x2a, 0x24, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x18,
	0x0a, 0x0f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x12, 0x05, 0xba, 0x48, 0x02, 0x08, 0x01, 0x1a, 0xcb, 0x04, 0x0a, 0x12, 0x45, 0x6d, 0x62,
	0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x77, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x50, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x33, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e,
	0x67, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x42, 0x09, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x0a, 0x64, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xe0, 0x41,
	0x02, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x09, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x1a, 0xef, 0x02, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x12, 0x71, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x57, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x33, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e,
	0x67, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x49, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x69, 0x12, 0x71, 0x0a, 0x06, 0x63, 0x6f, 0x68, 0x65, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x42, 0x61, 0x73, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64,
	0x64, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x68, 0x65, 0x72, 0x65, 0x48, 0x00, 0x52,
	0x06, 0x63, 0x6f, 0x68, 0x65, 0x72, 0x65, 0x1a, 0x21, 0x0a, 0x06, 0x4f, 0x70, 0x65, 0x6e, 0x41,
	0x49, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x1a, 0x47, 0x0a, 0x06, 0x43, 0x6f,
	0x68, 0x65, 0x72, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x12,
	0x22, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x09, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x61, 0x70, 0x69,
	0x4b, 0x65, 0x79, 0x42, 0x11, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x05, 0xba, 0x48, 0x02, 0x08, 0x01, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0xda, 0x01, 0x0a, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x12,
	0x2b, 0x0a, 0x11, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x31, 0x0a, 0x0c, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x0e, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52,
	0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x1a, 0xe7, 0x03, 0x0a,
	0x09, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x72, 0x12, 0x63, 0x0a, 0x08, 0x72, 0x65,
	0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x72,
	0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x4b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x72,
	0x61, 0x6e, 0x6b, 0x65, 0x72, 0x52, 0x08, 0x72, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x1a,
	0xf4, 0x02, 0x0a, 0x08, 0x52, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x6c, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2e, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x65,
	0x72, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x1a, 0xdf, 0x01, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x12, 0x71, 0x0a, 0x06, 0x63, 0x6f, 0x68, 0x65, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x57, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x33, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x68, 0x65, 0x72, 0x65, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f,
	0x68, 0x65, 0x72, 0x65, 0x1a, 0x4d, 0x0a, 0x06, 0x43, 0x6f, 0x68, 0x65, 0x72, 0x65, 0x12, 0x22,
	0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x09, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b,
	0x65, 0x79, 0x12, 0x1f, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x09, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x42, 0x11, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x05, 0xba, 0x48, 0x02, 0x08, 0x01, 0x1a, 0xcc, 0x02, 0x0a, 0x0a, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6f, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x42, 0x09, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0xab, 0x01, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x12, 0x69, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x42, 0x61, 0x73, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x41, 0x49, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x1a,
	0x21, 0x0a, 0x06, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x49, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b,
	0x65, 0x79, 0x42, 0x11, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x05,
	0xba, 0x48, 0x02, 0x08, 0x01, 0x22, 0xdc, 0x14, 0x0a, 0x13, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x47, 0x0a,
	0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x24, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x1e, 0xc8, 0x01, 0x01, 0x72, 0x19,
	0x10, 0x03, 0x18, 0x80, 0x01, 0x32, 0x12, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x2d, 0x5f, 0x20, 0x2f, 0x5d, 0x2b, 0x24, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48, 0x08,
	0xd8, 0x01, 0x01, 0x72, 0x03, 0x18, 0x80, 0x02, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x77, 0x0a, 0x0f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43,
	0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33,
	0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x42, 0x09, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0e,
	0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x83,
	0x01, 0x0a, 0x13, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x72,
	0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x4b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x09, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x12, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x81, 0x01, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42,
	0x61, 0x73, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x2d, 0xba, 0x48, 0x2a, 0x9a, 0x01, 0x27, 0x10, 0x10, 0x2a, 0x23, 0x72,
	0x21, 0x32, 0x1f, 0x5e, 0x28, 0x5b, 0x5c, 0x70, 0x7b, 0x4c, 0x7d, 0x5c, 0x70, 0x7b, 0x5a, 0x7d,
	0x5c, 0x70, 0x7b, 0x4e, 0x7d, 0x5f, 0x2e, 0x3a, 0x2f, 0x3d, 0x2b, 0x5c, 0x2d, 0x40, 0x5d, 0x2a,
	0x29, 0x24, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x56, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x4b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72,
	0x12, 0x5c, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42,
	0x61, 0x73, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x72, 0x52, 0x09, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x72, 0x12, 0x5f,
	0x0a, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x33, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61,
	0x73, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0xbf, 0x01, 0x0a, 0x0e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x12, 0x6a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x42, 0x61, 0x73, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72,
	0x65, 0x73, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x1a, 0x27,
	0x0a, 0x08, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x03, 0x64, 0x73,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x03, 0x64, 0x73, 0x6e, 0x42, 0x18, 0x0a, 0x0f, 0x76, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x05, 0xba, 0x48, 0x02, 0x08,
	0x01, 0x1a, 0xf4, 0x03, 0x0a, 0x12, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x77, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x4b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x09, 0xe0, 0x41,
	0x02, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x1a, 0xe4, 0x02, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x71,
	0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x57,
	0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33,
	0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x49, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x69, 0x12, 0x71, 0x0a, 0x06, 0x63, 0x6f, 0x68, 0x65, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x57, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x33, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e,
	0x67, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x68, 0x65, 0x72, 0x65, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f,
	0x68, 0x65, 0x72, 0x65, 0x1a, 0x21, 0x0a, 0x06, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x49, 0x12, 0x17,
	0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x1a, 0x3c, 0x0a, 0x06, 0x43, 0x6f, 0x68, 0x65, 0x72,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x17, 0x0a, 0x07,
	0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x70, 0x69, 0x4b, 0x65, 0x79, 0x42, 0x11, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x12, 0x05, 0xba, 0x48, 0x02, 0x08, 0x01, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0xda, 0x01, 0x0a, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61,
	0x70, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b,
	0x0a, 0x11, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x31, 0x0a, 0x0c, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x0e, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x92, 0x01, 0x02, 0x08,
	0x01, 0x52, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x1a, 0xe0,
	0x03, 0x0a, 0x09, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x72, 0x12, 0x63, 0x0a, 0x08,
	0x72, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47,
	0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33,
	0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x52, 0x08, 0x72, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x65,
	0x72, 0x1a, 0xed, 0x02, 0x0a, 0x08, 0x52, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x6c, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x4b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x72, 0x61, 0x6e,
	0x6b, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x1a, 0xd8, 0x01, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x12, 0x71, 0x0a, 0x06, 0x63, 0x6f, 0x68, 0x65, 0x72, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42,
	0x61, 0x73, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x68, 0x65, 0x72, 0x65, 0x48, 0x00, 0x52, 0x06,
	0x63, 0x6f, 0x68, 0x65, 0x72, 0x65, 0x1a, 0x4d, 0x0a, 0x06, 0x43, 0x6f, 0x68, 0x65, 0x72, 0x65,
	0x12, 0x22, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x09, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x61, 0x70,
	0x69, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x09, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x05,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x1a, 0xab, 0x02, 0x0a, 0x0a, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x6f, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x48, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x33, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61,
	0x73, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x09, 0xe0, 0x41,
	0x02, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x1a, 0xab, 0x01, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x69,
	0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f,
	0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33,
	0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x49, 0x48,
	0x00, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x1a, 0x21, 0x0a, 0x06, 0x4f, 0x70, 0x65,
	0x6e, 0x41, 0x49, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x42, 0x11, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x05, 0xba, 0x48, 0x02, 0x08, 0x01, 0x3a,
	0x53, 0xea, 0x41, 0x50, 0x0a, 0x2d, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x33, 0x2f, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42,
	0x61, 0x73, 0x65, 0x2a, 0x0f, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x73, 0x32, 0x0e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f,
	0x62, 0x61, 0x73, 0x65, 0x22, 0x79, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x5b, 0x0a, 0x0e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f,
	0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x4b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x0d, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x22,
	0x74, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55,
	0x0a, 0x0e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x52, 0x0d, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x42, 0x61, 0x73, 0x65, 0x22, 0x39, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xe0, 0x41,
	0x02, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x72, 0x03, 0x98, 0x01, 0x14, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x71, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x0d, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42,
	0x61, 0x73, 0x65, 0x22, 0xe9, 0x05, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0xa8, 0x01, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x8a, 0x01, 0x92, 0x41, 0x75, 0x32, 0x61, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64,
	0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2e, 0x20,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x31, 0x30, 0x30, 0x2e,
	0x20, 0x55, 0x73, 0x65, 0x20, 0x2d, 0x31, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x20, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x59, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x40, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xbf,
	0xba, 0x48, 0x0f, 0x1a, 0x0d, 0x18, 0x32, 0x28, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x59, 0x0a, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x72, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0xa6, 0x03, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x8b, 0x01, 0x0a, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x66, 0x92, 0x41, 0x44, 0x32, 0x42,
	0x41, 0x6e, 0x79, 0x20, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73,
	0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x6c, 0x79,
	0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6e, 0x61, 0x6d, 0x65,
	0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65,
	0x64, 0x2e, 0xba, 0x48, 0x1c, 0xd8, 0x01, 0x01, 0x72, 0x17, 0x18, 0x80, 0x01, 0x32, 0x12, 0x5e,
	0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x20, 0x2f, 0x5d, 0x2b,
	0x24, 0x52, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x12,
	0xd4, 0x01, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4b,
	0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61,
	0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x73, 0x92, 0x41, 0x43,
	0x32, 0x41, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x73,
	0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x20, 0x61, 0x6c, 0x6c, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x74, 0x61, 0x67,
	0x73, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x65, 0x64, 0x2e, 0xba, 0x48, 0x2a, 0x9a, 0x01, 0x27, 0x10, 0x10, 0x2a, 0x23, 0x72, 0x21, 0x32,
	0x1f, 0x5e, 0x28, 0x5b, 0x5c, 0x70, 0x7b, 0x4c, 0x7d, 0x5c, 0x70, 0x7b, 0x5a, 0x7d, 0x5c, 0x70,
	0x7b, 0x4e, 0x7d, 0x5f, 0x2e, 0x3a, 0x2f, 0x3d, 0x2b, 0x5c, 0x2d, 0x40, 0x5d, 0x2a, 0x29, 0x24,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x9d, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x42, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57,
	0x0a, 0x0f, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x52, 0x0e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0xe1, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xe0, 0x41, 0x02, 0xba,
	0x48, 0x08, 0xc8, 0x01, 0x01, 0x72, 0x03, 0x98, 0x01, 0x14, 0x52, 0x02, 0x69, 0x64, 0x12, 0x66,
	0x0a, 0x0e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x09, 0xe0, 0x41,
	0x02, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0d, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x73, 0x6b, 0x22, 0x74, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x55, 0x0a, 0x0e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f,
	0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x4b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x52, 0x0d, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x22, 0x3c, 0x0a, 0x1a, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0e, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x72, 0x03,
	0x98, 0x01, 0x14, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1d, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xd8, 0x08, 0x0a, 0x14, 0x4b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0xcb, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x12, 0x3b, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x39, 0x8a, 0xa6, 0x1d, 0x04, 0x08, 0x02, 0x10, 0x04, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2b, 0x3a, 0x0e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x62, 0x61,
	0x73, 0x65, 0x22, 0x19, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2f, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2d, 0x62, 0x61, 0x73, 0x65, 0x73, 0x12, 0xb7, 0x01,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61,
	0x73, 0x65, 0x12, 0x38, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x72,
	0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x47,
	0x65, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x8a, 0xa6, 0x1d, 0x04, 0x08, 0x01, 0x10,
	0x04, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x33, 0x2f, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2d, 0x62, 0x61, 0x73,
	0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xb8, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74,
	0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x73, 0x12, 0x3a,
	0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61,
	0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x8a, 0xa6, 0x1d, 0x04, 0x08, 0x01, 0x10,
	0x04, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x33, 0x2f, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2d, 0x62, 0x61, 0x73,
	0x65, 0x73, 0x12, 0xd0, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x12, 0x3b, 0x2e, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3e, 0x8a, 0xa6, 0x1d, 0x04, 0x08, 0x02, 0x10, 0x04, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x0e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x1a, 0x1e, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33,
	0x2f, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2d, 0x62, 0x61, 0x73, 0x65, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xc0, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x12, 0x3b, 0x2e,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x8a, 0xa6, 0x1d, 0x04, 0x08, 0x02,
	0x10, 0x04, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x2a, 0x1e, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x33, 0x2f, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2d, 0x62, 0x61,
	0x73, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x1a, 0x67, 0x92, 0x41, 0x64, 0x0a, 0x19, 0x52,
	0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x20, 0x41, 0x49, 0x20, 0x4b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x12, 0x47, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x20, 0x61, 0x6e, 0x64, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x20, 0x72, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x61, 0x6c, 0x2d, 0x61, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x20,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x28, 0x52, 0x41, 0x47, 0x29,
	0x20, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x20, 0x62, 0x61, 0x73, 0x65, 0x73,
	0x2e, 0x42, 0xc1, 0x02, 0x0a, 0x23, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x42, 0x12, 0x4b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x67, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c,
	0x65, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x3b, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0xa2, 0x02, 0x03, 0x52, 0x41, 0x44, 0xaa, 0x02,
	0x1f, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x41, 0x70, 0x69, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33,
	0xca, 0x02, 0x1f, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x5c, 0x41, 0x70, 0x69, 0x5c,
	0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x33, 0xe2, 0x02, 0x2b, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x5c, 0x41, 0x70,
	0x69, 0x5c, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5c, 0x56, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x33, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x22, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x3a, 0x3a, 0x41, 0x70, 0x69,
	0x3a, 0x3a, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x33, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescOnce sync.Once
	file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescData = file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDesc
)

func file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescGZIP() []byte {
	file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescOnce.Do(func() {
		file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescData = protoimpl.X.CompressGZIP(file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescData)
	})
	return file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDescData
}

var file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes = make([]protoimpl.MessageInfo, 60)
var file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_goTypes = []any{
	(*KnowledgeBase)(nil),                                    // 0: redpanda.api.dataplane.v1alpha3.KnowledgeBase
	(*KnowledgeBaseCreate)(nil),                              // 1: redpanda.api.dataplane.v1alpha3.KnowledgeBaseCreate
	(*KnowledgeBaseUpdate)(nil),                              // 2: redpanda.api.dataplane.v1alpha3.KnowledgeBaseUpdate
	(*CreateKnowledgeBaseRequest)(nil),                       // 3: redpanda.api.dataplane.v1alpha3.CreateKnowledgeBaseRequest
	(*CreateKnowledgeBaseResponse)(nil),                      // 4: redpanda.api.dataplane.v1alpha3.CreateKnowledgeBaseResponse
	(*GetKnowledgeBaseRequest)(nil),                          // 5: redpanda.api.dataplane.v1alpha3.GetKnowledgeBaseRequest
	(*GetKnowledgeBaseResponse)(nil),                         // 6: redpanda.api.dataplane.v1alpha3.GetKnowledgeBaseResponse
	(*ListKnowledgeBasesRequest)(nil),                        // 7: redpanda.api.dataplane.v1alpha3.ListKnowledgeBasesRequest
	(*ListKnowledgeBasesResponse)(nil),                       // 8: redpanda.api.dataplane.v1alpha3.ListKnowledgeBasesResponse
	(*UpdateKnowledgeBaseRequest)(nil),                       // 9: redpanda.api.dataplane.v1alpha3.UpdateKnowledgeBaseRequest
	(*UpdateKnowledgeBaseResponse)(nil),                      // 10: redpanda.api.dataplane.v1alpha3.UpdateKnowledgeBaseResponse
	(*DeleteKnowledgeBaseRequest)(nil),                       // 11: redpanda.api.dataplane.v1alpha3.DeleteKnowledgeBaseRequest
	(*DeleteKnowledgeBaseResponse)(nil),                      // 12: redpanda.api.dataplane.v1alpha3.DeleteKnowledgeBaseResponse
	(*KnowledgeBase_VectorDatabase)(nil),                     // 13: redpanda.api.dataplane.v1alpha3.KnowledgeBase.VectorDatabase
	(*KnowledgeBase_EmbeddingGenerator)(nil),                 // 14: redpanda.api.dataplane.v1alpha3.KnowledgeBase.EmbeddingGenerator
	nil,                                                      // 15: redpanda.api.dataplane.v1alpha3.KnowledgeBase.TagsEntry
	(*KnowledgeBase_Indexer)(nil),                            // 16: redpanda.api.dataplane.v1alpha3.KnowledgeBase.Indexer
	(*KnowledgeBase_Retriever)(nil),                          // 17: redpanda.api.dataplane.v1alpha3.KnowledgeBase.Retriever
	(*KnowledgeBase_Generation)(nil),                         // 18: redpanda.api.dataplane.v1alpha3.KnowledgeBase.Generation
	(*KnowledgeBase_VectorDatabase_Postgres)(nil),            // 19: redpanda.api.dataplane.v1alpha3.KnowledgeBase.VectorDatabase.Postgres
	(*KnowledgeBase_EmbeddingGenerator_Provider)(nil),        // 20: redpanda.api.dataplane.v1alpha3.KnowledgeBase.EmbeddingGenerator.Provider
	(*KnowledgeBase_EmbeddingGenerator_Provider_OpenAI)(nil), // 21: redpanda.api.dataplane.v1alpha3.KnowledgeBase.EmbeddingGenerator.Provider.OpenAI
	(*KnowledgeBase_EmbeddingGenerator_Provider_Cohere)(nil), // 22: redpanda.api.dataplane.v1alpha3.KnowledgeBase.EmbeddingGenerator.Provider.Cohere
	(*KnowledgeBase_Retriever_Reranker)(nil),                 // 23: redpanda.api.dataplane.v1alpha3.KnowledgeBase.Retriever.Reranker
	(*KnowledgeBase_Retriever_Reranker_Provider)(nil),        // 24: redpanda.api.dataplane.v1alpha3.KnowledgeBase.Retriever.Reranker.Provider
	(*KnowledgeBase_Retriever_Reranker_Provider_Cohere)(nil), // 25: redpanda.api.dataplane.v1alpha3.KnowledgeBase.Retriever.Reranker.Provider.Cohere
	(*KnowledgeBase_Generation_Provider)(nil),                // 26: redpanda.api.dataplane.v1alpha3.KnowledgeBase.Generation.Provider
	(*KnowledgeBase_Generation_Provider_OpenAI)(nil),         // 27: redpanda.api.dataplane.v1alpha3.KnowledgeBase.Generation.Provider.OpenAI
	(*KnowledgeBaseCreate_VectorDatabase)(nil),               // 28: redpanda.api.dataplane.v1alpha3.KnowledgeBaseCreate.VectorDatabase
	(*KnowledgeBaseCreate_EmbeddingGenerator)(nil),           // 29: redpanda.api.dataplane.v1alpha3.KnowledgeBaseCreate.EmbeddingGenerator
	nil,                                    // 30: redpanda.api.dataplane.v1alpha3.KnowledgeBaseCreate.TagsEntry
	(*KnowledgeBaseCreate_Indexer)(nil),    // 31: redpanda.api.dataplane.v1alpha3.KnowledgeBaseCreate.Indexer
	(*KnowledgeBaseCreate_Retriever)(nil),  // 32: redpanda.api.dataplane.v1alpha3.KnowledgeBaseCreate.Retriever
	(*KnowledgeBaseCreate_Generation)(nil), // 33: redpanda.api.dataplane.v1alpha3.KnowledgeBaseCreate.Generation
	(*KnowledgeBaseCreate_VectorDatabase_Postgres)(nil),            // 34: redpanda.api.dataplane.v1alpha3.KnowledgeBaseCreate.VectorDatabase.Postgres
	(*KnowledgeBaseCreate_EmbeddingGenerator_Provider)(nil),        // 35: redpanda.api.dataplane.v1alpha3.KnowledgeBaseCreate.EmbeddingGenerator.Provider
	(*KnowledgeBaseCreate_EmbeddingGenerator_Provider_OpenAI)(nil), // 36: redpanda.api.dataplane.v1alpha3.KnowledgeBaseCreate.EmbeddingGenerator.Provider.OpenAI
	(*KnowledgeBaseCreate_EmbeddingGenerator_Provider_Cohere)(nil), // 37: redpanda.api.dataplane.v1alpha3.KnowledgeBaseCreate.EmbeddingGenerator.Provider.Cohere
	(*KnowledgeBaseCreate_Retriever_Reranker)(nil),                 // 38: redpanda.api.dataplane.v1alpha3.KnowledgeBaseCreate.Retriever.Reranker
	(*KnowledgeBaseCreate_Retriever_Reranker_Provider)(nil),        // 39: redpanda.api.dataplane.v1alpha3.KnowledgeBaseCreate.Retriever.Reranker.Provider
	(*KnowledgeBaseCreate_Retriever_Reranker_Provider_Cohere)(nil), // 40: redpanda.api.dataplane.v1alpha3.KnowledgeBaseCreate.Retriever.Reranker.Provider.Cohere
	(*KnowledgeBaseCreate_Generation_Provider)(nil),                // 41: redpanda.api.dataplane.v1alpha3.KnowledgeBaseCreate.Generation.Provider
	(*KnowledgeBaseCreate_Generation_Provider_OpenAI)(nil),         // 42: redpanda.api.dataplane.v1alpha3.KnowledgeBaseCreate.Generation.Provider.OpenAI
	(*KnowledgeBaseUpdate_VectorDatabase)(nil),                     // 43: redpanda.api.dataplane.v1alpha3.KnowledgeBaseUpdate.VectorDatabase
	(*KnowledgeBaseUpdate_EmbeddingGenerator)(nil),                 // 44: redpanda.api.dataplane.v1alpha3.KnowledgeBaseUpdate.EmbeddingGenerator
	nil,                                    // 45: redpanda.api.dataplane.v1alpha3.KnowledgeBaseUpdate.TagsEntry
	(*KnowledgeBaseUpdate_Indexer)(nil),    // 46: redpanda.api.dataplane.v1alpha3.KnowledgeBaseUpdate.Indexer
	(*KnowledgeBaseUpdate_Retriever)(nil),  // 47: redpanda.api.dataplane.v1alpha3.KnowledgeBaseUpdate.Retriever
	(*KnowledgeBaseUpdate_Generation)(nil), // 48: redpanda.api.dataplane.v1alpha3.KnowledgeBaseUpdate.Generation
	(*KnowledgeBaseUpdate_VectorDatabase_Postgres)(nil),            // 49: redpanda.api.dataplane.v1alpha3.KnowledgeBaseUpdate.VectorDatabase.Postgres
	(*KnowledgeBaseUpdate_EmbeddingGenerator_Provider)(nil),        // 50: redpanda.api.dataplane.v1alpha3.KnowledgeBaseUpdate.EmbeddingGenerator.Provider
	(*KnowledgeBaseUpdate_EmbeddingGenerator_Provider_OpenAI)(nil), // 51: redpanda.api.dataplane.v1alpha3.KnowledgeBaseUpdate.EmbeddingGenerator.Provider.OpenAI
	(*KnowledgeBaseUpdate_EmbeddingGenerator_Provider_Cohere)(nil), // 52: redpanda.api.dataplane.v1alpha3.KnowledgeBaseUpdate.EmbeddingGenerator.Provider.Cohere
	(*KnowledgeBaseUpdate_Retriever_Reranker)(nil),                 // 53: redpanda.api.dataplane.v1alpha3.KnowledgeBaseUpdate.Retriever.Reranker
	(*KnowledgeBaseUpdate_Retriever_Reranker_Provider)(nil),        // 54: redpanda.api.dataplane.v1alpha3.KnowledgeBaseUpdate.Retriever.Reranker.Provider
	(*KnowledgeBaseUpdate_Retriever_Reranker_Provider_Cohere)(nil), // 55: redpanda.api.dataplane.v1alpha3.KnowledgeBaseUpdate.Retriever.Reranker.Provider.Cohere
	(*KnowledgeBaseUpdate_Generation_Provider)(nil),                // 56: redpanda.api.dataplane.v1alpha3.KnowledgeBaseUpdate.Generation.Provider
	(*KnowledgeBaseUpdate_Generation_Provider_OpenAI)(nil),         // 57: redpanda.api.dataplane.v1alpha3.KnowledgeBaseUpdate.Generation.Provider.OpenAI
	(*ListKnowledgeBasesRequest_Filter)(nil),                       // 58: redpanda.api.dataplane.v1alpha3.ListKnowledgeBasesRequest.Filter
	nil,                                                            // 59: redpanda.api.dataplane.v1alpha3.ListKnowledgeBasesRequest.Filter.TagsEntry
	(*fieldmaskpb.FieldMask)(nil),                                  // 60: google.protobuf.FieldMask
}
var file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_depIdxs = []int32{
	13, // 0: redpanda.api.dataplane.v1alpha3.KnowledgeBase.vector_database:type_name -> redpanda.api.dataplane.v1alpha3.KnowledgeBase.VectorDatabase
	14, // 1: redpanda.api.dataplane.v1alpha3.KnowledgeBase.embedding_generator:type_name -> redpanda.api.dataplane.v1alpha3.KnowledgeBase.EmbeddingGenerator
	15, // 2: redpanda.api.dataplane.v1alpha3.KnowledgeBase.tags:type_name -> redpanda.api.dataplane.v1alpha3.KnowledgeBase.TagsEntry
	16, // 3: redpanda.api.dataplane.v1alpha3.KnowledgeBase.indexer:type_name -> redpanda.api.dataplane.v1alpha3.KnowledgeBase.Indexer
	17, // 4: redpanda.api.dataplane.v1alpha3.KnowledgeBase.retriever:type_name -> redpanda.api.dataplane.v1alpha3.KnowledgeBase.Retriever
	18, // 5: redpanda.api.dataplane.v1alpha3.KnowledgeBase.generation:type_name -> redpanda.api.dataplane.v1alpha3.KnowledgeBase.Generation
	28, // 6: redpanda.api.dataplane.v1alpha3.KnowledgeBaseCreate.vector_database:type_name -> redpanda.api.dataplane.v1alpha3.KnowledgeBaseCreate.VectorDatabase
	29, // 7: redpanda.api.dataplane.v1alpha3.KnowledgeBaseCreate.embedding_generator:type_name -> redpanda.api.dataplane.v1alpha3.KnowledgeBaseCreate.EmbeddingGenerator
	30, // 8: redpanda.api.dataplane.v1alpha3.KnowledgeBaseCreate.tags:type_name -> redpanda.api.dataplane.v1alpha3.KnowledgeBaseCreate.TagsEntry
	31, // 9: redpanda.api.dataplane.v1alpha3.KnowledgeBaseCreate.indexer:type_name -> redpanda.api.dataplane.v1alpha3.KnowledgeBaseCreate.Indexer
	32, // 10: redpanda.api.dataplane.v1alpha3.KnowledgeBaseCreate.retriever:type_name -> redpanda.api.dataplane.v1alpha3.KnowledgeBaseCreate.Retriever
	33, // 11: redpanda.api.dataplane.v1alpha3.KnowledgeBaseCreate.generation:type_name -> redpanda.api.dataplane.v1alpha3.KnowledgeBaseCreate.Generation
	43, // 12: redpanda.api.dataplane.v1alpha3.KnowledgeBaseUpdate.vector_database:type_name -> redpanda.api.dataplane.v1alpha3.KnowledgeBaseUpdate.VectorDatabase
	44, // 13: redpanda.api.dataplane.v1alpha3.KnowledgeBaseUpdate.embedding_generator:type_name -> redpanda.api.dataplane.v1alpha3.KnowledgeBaseUpdate.EmbeddingGenerator
	45, // 14: redpanda.api.dataplane.v1alpha3.KnowledgeBaseUpdate.tags:type_name -> redpanda.api.dataplane.v1alpha3.KnowledgeBaseUpdate.TagsEntry
	46, // 15: redpanda.api.dataplane.v1alpha3.KnowledgeBaseUpdate.indexer:type_name -> redpanda.api.dataplane.v1alpha3.KnowledgeBaseUpdate.Indexer
	47, // 16: redpanda.api.dataplane.v1alpha3.KnowledgeBaseUpdate.retriever:type_name -> redpanda.api.dataplane.v1alpha3.KnowledgeBaseUpdate.Retriever
	48, // 17: redpanda.api.dataplane.v1alpha3.KnowledgeBaseUpdate.generation:type_name -> redpanda.api.dataplane.v1alpha3.KnowledgeBaseUpdate.Generation
	1,  // 18: redpanda.api.dataplane.v1alpha3.CreateKnowledgeBaseRequest.knowledge_base:type_name -> redpanda.api.dataplane.v1alpha3.KnowledgeBaseCreate
	0,  // 19: redpanda.api.dataplane.v1alpha3.CreateKnowledgeBaseResponse.knowledge_base:type_name -> redpanda.api.dataplane.v1alpha3.KnowledgeBase
	0,  // 20: redpanda.api.dataplane.v1alpha3.GetKnowledgeBaseResponse.knowledge_base:type_name -> redpanda.api.dataplane.v1alpha3.KnowledgeBase
	58, // 21: redpanda.api.dataplane.v1alpha3.ListKnowledgeBasesRequest.filter:type_name -> redpanda.api.dataplane.v1alpha3.ListKnowledgeBasesRequest.Filter
	0,  // 22: redpanda.api.dataplane.v1alpha3.ListKnowledgeBasesResponse.knowledge_bases:type_name -> redpanda.api.dataplane.v1alpha3.KnowledgeBase
	2,  // 23: redpanda.api.dataplane.v1alpha3.UpdateKnowledgeBaseRequest.knowledge_base:type_name -> redpanda.api.dataplane.v1alpha3.KnowledgeBaseUpdate
	60, // 24: redpanda.api.dataplane.v1alpha3.UpdateKnowledgeBaseRequest.update_mask:type_name -> google.protobuf.FieldMask
	0,  // 25: redpanda.api.dataplane.v1alpha3.UpdateKnowledgeBaseResponse.knowledge_base:type_name -> redpanda.api.dataplane.v1alpha3.KnowledgeBase
	19, // 26: redpanda.api.dataplane.v1alpha3.KnowledgeBase.VectorDatabase.postgres:type_name -> redpanda.api.dataplane.v1alpha3.KnowledgeBase.VectorDatabase.Postgres
	20, // 27: redpanda.api.dataplane.v1alpha3.KnowledgeBase.EmbeddingGenerator.provider:type_name -> redpanda.api.dataplane.v1alpha3.KnowledgeBase.EmbeddingGenerator.Provider
	23, // 28: redpanda.api.dataplane.v1alpha3.KnowledgeBase.Retriever.reranker:type_name -> redpanda.api.dataplane.v1alpha3.KnowledgeBase.Retriever.Reranker
	26, // 29: redpanda.api.dataplane.v1alpha3.KnowledgeBase.Generation.provider:type_name -> redpanda.api.dataplane.v1alpha3.KnowledgeBase.Generation.Provider
	21, // 30: redpanda.api.dataplane.v1alpha3.KnowledgeBase.EmbeddingGenerator.Provider.openai:type_name -> redpanda.api.dataplane.v1alpha3.KnowledgeBase.EmbeddingGenerator.Provider.OpenAI
	22, // 31: redpanda.api.dataplane.v1alpha3.KnowledgeBase.EmbeddingGenerator.Provider.cohere:type_name -> redpanda.api.dataplane.v1alpha3.KnowledgeBase.EmbeddingGenerator.Provider.Cohere
	24, // 32: redpanda.api.dataplane.v1alpha3.KnowledgeBase.Retriever.Reranker.provider:type_name -> redpanda.api.dataplane.v1alpha3.KnowledgeBase.Retriever.Reranker.Provider
	25, // 33: redpanda.api.dataplane.v1alpha3.KnowledgeBase.Retriever.Reranker.Provider.cohere:type_name -> redpanda.api.dataplane.v1alpha3.KnowledgeBase.Retriever.Reranker.Provider.Cohere
	27, // 34: redpanda.api.dataplane.v1alpha3.KnowledgeBase.Generation.Provider.openai:type_name -> redpanda.api.dataplane.v1alpha3.KnowledgeBase.Generation.Provider.OpenAI
	34, // 35: redpanda.api.dataplane.v1alpha3.KnowledgeBaseCreate.VectorDatabase.postgres:type_name -> redpanda.api.dataplane.v1alpha3.KnowledgeBaseCreate.VectorDatabase.Postgres
	35, // 36: redpanda.api.dataplane.v1alpha3.KnowledgeBaseCreate.EmbeddingGenerator.provider:type_name -> redpanda.api.dataplane.v1alpha3.KnowledgeBaseCreate.EmbeddingGenerator.Provider
	38, // 37: redpanda.api.dataplane.v1alpha3.KnowledgeBaseCreate.Retriever.reranker:type_name -> redpanda.api.dataplane.v1alpha3.KnowledgeBaseCreate.Retriever.Reranker
	41, // 38: redpanda.api.dataplane.v1alpha3.KnowledgeBaseCreate.Generation.provider:type_name -> redpanda.api.dataplane.v1alpha3.KnowledgeBaseCreate.Generation.Provider
	36, // 39: redpanda.api.dataplane.v1alpha3.KnowledgeBaseCreate.EmbeddingGenerator.Provider.openai:type_name -> redpanda.api.dataplane.v1alpha3.KnowledgeBaseCreate.EmbeddingGenerator.Provider.OpenAI
	37, // 40: redpanda.api.dataplane.v1alpha3.KnowledgeBaseCreate.EmbeddingGenerator.Provider.cohere:type_name -> redpanda.api.dataplane.v1alpha3.KnowledgeBaseCreate.EmbeddingGenerator.Provider.Cohere
	39, // 41: redpanda.api.dataplane.v1alpha3.KnowledgeBaseCreate.Retriever.Reranker.provider:type_name -> redpanda.api.dataplane.v1alpha3.KnowledgeBaseCreate.Retriever.Reranker.Provider
	40, // 42: redpanda.api.dataplane.v1alpha3.KnowledgeBaseCreate.Retriever.Reranker.Provider.cohere:type_name -> redpanda.api.dataplane.v1alpha3.KnowledgeBaseCreate.Retriever.Reranker.Provider.Cohere
	42, // 43: redpanda.api.dataplane.v1alpha3.KnowledgeBaseCreate.Generation.Provider.openai:type_name -> redpanda.api.dataplane.v1alpha3.KnowledgeBaseCreate.Generation.Provider.OpenAI
	49, // 44: redpanda.api.dataplane.v1alpha3.KnowledgeBaseUpdate.VectorDatabase.postgres:type_name -> redpanda.api.dataplane.v1alpha3.KnowledgeBaseUpdate.VectorDatabase.Postgres
	50, // 45: redpanda.api.dataplane.v1alpha3.KnowledgeBaseUpdate.EmbeddingGenerator.provider:type_name -> redpanda.api.dataplane.v1alpha3.KnowledgeBaseUpdate.EmbeddingGenerator.Provider
	53, // 46: redpanda.api.dataplane.v1alpha3.KnowledgeBaseUpdate.Retriever.reranker:type_name -> redpanda.api.dataplane.v1alpha3.KnowledgeBaseUpdate.Retriever.Reranker
	56, // 47: redpanda.api.dataplane.v1alpha3.KnowledgeBaseUpdate.Generation.provider:type_name -> redpanda.api.dataplane.v1alpha3.KnowledgeBaseUpdate.Generation.Provider
	51, // 48: redpanda.api.dataplane.v1alpha3.KnowledgeBaseUpdate.EmbeddingGenerator.Provider.openai:type_name -> redpanda.api.dataplane.v1alpha3.KnowledgeBaseUpdate.EmbeddingGenerator.Provider.OpenAI
	52, // 49: redpanda.api.dataplane.v1alpha3.KnowledgeBaseUpdate.EmbeddingGenerator.Provider.cohere:type_name -> redpanda.api.dataplane.v1alpha3.KnowledgeBaseUpdate.EmbeddingGenerator.Provider.Cohere
	54, // 50: redpanda.api.dataplane.v1alpha3.KnowledgeBaseUpdate.Retriever.Reranker.provider:type_name -> redpanda.api.dataplane.v1alpha3.KnowledgeBaseUpdate.Retriever.Reranker.Provider
	55, // 51: redpanda.api.dataplane.v1alpha3.KnowledgeBaseUpdate.Retriever.Reranker.Provider.cohere:type_name -> redpanda.api.dataplane.v1alpha3.KnowledgeBaseUpdate.Retriever.Reranker.Provider.Cohere
	57, // 52: redpanda.api.dataplane.v1alpha3.KnowledgeBaseUpdate.Generation.Provider.openai:type_name -> redpanda.api.dataplane.v1alpha3.KnowledgeBaseUpdate.Generation.Provider.OpenAI
	59, // 53: redpanda.api.dataplane.v1alpha3.ListKnowledgeBasesRequest.Filter.tags:type_name -> redpanda.api.dataplane.v1alpha3.ListKnowledgeBasesRequest.Filter.TagsEntry
	3,  // 54: redpanda.api.dataplane.v1alpha3.KnowledgeBaseService.CreateKnowledgeBase:input_type -> redpanda.api.dataplane.v1alpha3.CreateKnowledgeBaseRequest
	5,  // 55: redpanda.api.dataplane.v1alpha3.KnowledgeBaseService.GetKnowledgeBase:input_type -> redpanda.api.dataplane.v1alpha3.GetKnowledgeBaseRequest
	7,  // 56: redpanda.api.dataplane.v1alpha3.KnowledgeBaseService.ListKnowledgeBases:input_type -> redpanda.api.dataplane.v1alpha3.ListKnowledgeBasesRequest
	9,  // 57: redpanda.api.dataplane.v1alpha3.KnowledgeBaseService.UpdateKnowledgeBase:input_type -> redpanda.api.dataplane.v1alpha3.UpdateKnowledgeBaseRequest
	11, // 58: redpanda.api.dataplane.v1alpha3.KnowledgeBaseService.DeleteKnowledgeBase:input_type -> redpanda.api.dataplane.v1alpha3.DeleteKnowledgeBaseRequest
	4,  // 59: redpanda.api.dataplane.v1alpha3.KnowledgeBaseService.CreateKnowledgeBase:output_type -> redpanda.api.dataplane.v1alpha3.CreateKnowledgeBaseResponse
	6,  // 60: redpanda.api.dataplane.v1alpha3.KnowledgeBaseService.GetKnowledgeBase:output_type -> redpanda.api.dataplane.v1alpha3.GetKnowledgeBaseResponse
	8,  // 61: redpanda.api.dataplane.v1alpha3.KnowledgeBaseService.ListKnowledgeBases:output_type -> redpanda.api.dataplane.v1alpha3.ListKnowledgeBasesResponse
	10, // 62: redpanda.api.dataplane.v1alpha3.KnowledgeBaseService.UpdateKnowledgeBase:output_type -> redpanda.api.dataplane.v1alpha3.UpdateKnowledgeBaseResponse
	12, // 63: redpanda.api.dataplane.v1alpha3.KnowledgeBaseService.DeleteKnowledgeBase:output_type -> redpanda.api.dataplane.v1alpha3.DeleteKnowledgeBaseResponse
	59, // [59:64] is the sub-list for method output_type
	54, // [54:59] is the sub-list for method input_type
	54, // [54:54] is the sub-list for extension type_name
	54, // [54:54] is the sub-list for extension extendee
	0,  // [0:54] is the sub-list for field type_name
}

func init() { file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_init() }
func file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_init() {
	if File_redpanda_api_dataplane_v1alpha3_knowledge_base_proto != nil {
		return
	}
	file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[13].OneofWrappers = []any{
		(*KnowledgeBase_VectorDatabase_Postgres_)(nil),
	}
	file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[20].OneofWrappers = []any{
		(*KnowledgeBase_EmbeddingGenerator_Provider_Openai)(nil),
		(*KnowledgeBase_EmbeddingGenerator_Provider_Cohere_)(nil),
	}
	file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[24].OneofWrappers = []any{
		(*KnowledgeBase_Retriever_Reranker_Provider_Cohere_)(nil),
	}
	file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[26].OneofWrappers = []any{
		(*KnowledgeBase_Generation_Provider_Openai)(nil),
	}
	file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[28].OneofWrappers = []any{
		(*KnowledgeBaseCreate_VectorDatabase_Postgres_)(nil),
	}
	file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[35].OneofWrappers = []any{
		(*KnowledgeBaseCreate_EmbeddingGenerator_Provider_Openai)(nil),
		(*KnowledgeBaseCreate_EmbeddingGenerator_Provider_Cohere_)(nil),
	}
	file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[39].OneofWrappers = []any{
		(*KnowledgeBaseCreate_Retriever_Reranker_Provider_Cohere_)(nil),
	}
	file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[41].OneofWrappers = []any{
		(*KnowledgeBaseCreate_Generation_Provider_Openai)(nil),
	}
	file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[43].OneofWrappers = []any{
		(*KnowledgeBaseUpdate_VectorDatabase_Postgres_)(nil),
	}
	file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[50].OneofWrappers = []any{
		(*KnowledgeBaseUpdate_EmbeddingGenerator_Provider_Openai)(nil),
		(*KnowledgeBaseUpdate_EmbeddingGenerator_Provider_Cohere_)(nil),
	}
	file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[54].OneofWrappers = []any{
		(*KnowledgeBaseUpdate_Retriever_Reranker_Provider_Cohere_)(nil),
	}
	file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes[56].OneofWrappers = []any{
		(*KnowledgeBaseUpdate_Generation_Provider_Openai)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   60,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_goTypes,
		DependencyIndexes: file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_depIdxs,
		MessageInfos:      file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_msgTypes,
	}.Build()
	File_redpanda_api_dataplane_v1alpha3_knowledge_base_proto = out.File
	file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_rawDesc = nil
	file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_goTypes = nil
	file_redpanda_api_dataplane_v1alpha3_knowledge_base_proto_depIdxs = nil
}
