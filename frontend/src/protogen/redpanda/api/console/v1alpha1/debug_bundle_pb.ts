// @generated by protoc-gen-es v1.6.0 with parameter "target=ts,import_extension="
// @generated from file redpanda/api/console/v1alpha1/debug_bundle.proto (package redpanda.api.console.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * Error code enum.
 * https://github.com/redpanda-data/redpanda/blob/dev/src/v/debug_bundle/error.h#L22
 *
 * @generated from enum redpanda.api.console.v1alpha1.BundleErrorCode
 */
export enum BundleErrorCode {
  /**
   * buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
   * OK. No Error.
   *
   * @generated from enum value: BUNDLE_ERROR_CODE_OK = 0;
   */
  OK = 0,

  /**
   * Debug bundle process already running
   *
   * @generated from enum value: BUNDLE_ERROR_CODE_PROCESS_ALREADY_RUNNING = 1;
   */
  PROCESS_ALREADY_RUNNING = 1,

  /**
   * Debug bundle process not running.
   *
   * @generated from enum value: BUNDLE_ERROR_CODE_PROCESS_NOT_RUNNING = 2;
   */
  PROCESS_NOT_RUNNING = 2,

  /**
   * Invalid parameters.
   *
   * @generated from enum value: BUNDLE_ERROR_CODE_INVALID_PARAMETERS = 3;
   */
  INVALID_PARAMETERS = 3,

  /**
   * Internal error.
   *
   * @generated from enum value: BUNDLE_ERROR_CODE_INTERNAL_ERROR = 4;
   */
  INTERNAL_ERROR = 4,

  /**
   * Debug process failed.
   *
   * @generated from enum value: BUNDLE_ERROR_CODE_PROCESS_FAILED = 5;
   */
  PROCESS_FAILED = 5,

  /**
   * Job ID not recognized.
   *
   * @generated from enum value: BUNDLE_ERROR_CODE_INVALID_JOB_ID = 6;
   */
  INVALID_JOB_ID = 6,

  /**
   * Debug bundle process was never started.
   *
   * @generated from enum value: BUNDLE_ERROR_CODE_PROCESS_NOT_STARTED = 7;
   */
  PROCESS_NOT_STARTED = 7,

  /**
   * rpk binary not found
   *
   * @generated from enum value: BUNDLE_ERROR_CODE_RPK_BINARY_NOT_PRESENT = 8;
   */
  RPK_BINARY_NOT_PRESENT = 8,

  /**
   * Debug bundle expired.
   *
   * @generated from enum value: BUNDLE_ERROR_CODE_DEBUG_BUNDLE_EXPIRED = 9;
   */
  DEBUG_BUNDLE_EXPIRED = 9,
}
// Retrieve enum metadata with: proto3.getEnumType(BundleErrorCode)
proto3.util.setEnumType(BundleErrorCode, "redpanda.api.console.v1alpha1.BundleErrorCode", [
  { no: 0, name: "BUNDLE_ERROR_CODE_OK" },
  { no: 1, name: "BUNDLE_ERROR_CODE_PROCESS_ALREADY_RUNNING" },
  { no: 2, name: "BUNDLE_ERROR_CODE_PROCESS_NOT_RUNNING" },
  { no: 3, name: "BUNDLE_ERROR_CODE_INVALID_PARAMETERS" },
  { no: 4, name: "BUNDLE_ERROR_CODE_INTERNAL_ERROR" },
  { no: 5, name: "BUNDLE_ERROR_CODE_PROCESS_FAILED" },
  { no: 6, name: "BUNDLE_ERROR_CODE_INVALID_JOB_ID" },
  { no: 7, name: "BUNDLE_ERROR_CODE_PROCESS_NOT_STARTED" },
  { no: 8, name: "BUNDLE_ERROR_CODE_RPK_BINARY_NOT_PRESENT" },
  { no: 9, name: "BUNDLE_ERROR_CODE_DEBUG_BUNDLE_EXPIRED" },
]);

/**
 * @generated from enum redpanda.api.console.v1alpha1.UnhealthyReason
 */
export enum UnhealthyReason {
  /**
   * @generated from enum value: UNHEALTHY_REASON_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: UNHEALTHY_REASON_NODES_DOWN = 1;
   */
  NODES_DOWN = 1,

  /**
   * @generated from enum value: UNHEALTHY_REASON_LEADERLESS_PARTITIONS = 2;
   */
  LEADERLESS_PARTITIONS = 2,

  /**
   * @generated from enum value: UNHEALTHY_REASON_UNDER_REPLICATED_PARTITIONS = 3;
   */
  UNDER_REPLICATED_PARTITIONS = 3,

  /**
   * @generated from enum value: UNHEALTHY_REASON_NO_ELECTED_CONTROLLER = 4;
   */
  NO_ELECTED_CONTROLLER = 4,

  /**
   * @generated from enum value: UNHEALTHY_REASON_NO_HEALTH_REPORT = 5;
   */
  NO_HEALTH_REPORT = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(UnhealthyReason)
proto3.util.setEnumType(UnhealthyReason, "redpanda.api.console.v1alpha1.UnhealthyReason", [
  { no: 0, name: "UNHEALTHY_REASON_UNSPECIFIED" },
  { no: 1, name: "UNHEALTHY_REASON_NODES_DOWN" },
  { no: 2, name: "UNHEALTHY_REASON_LEADERLESS_PARTITIONS" },
  { no: 3, name: "UNHEALTHY_REASON_UNDER_REPLICATED_PARTITIONS" },
  { no: 4, name: "UNHEALTHY_REASON_NO_ELECTED_CONTROLLER" },
  { no: 5, name: "UNHEALTHY_REASON_NO_HEALTH_REPORT" },
]);

/**
 * SCRAM Auth settings.
 *
 * @generated from message redpanda.api.console.v1alpha1.SCRAMAuth
 */
export class SCRAMAuth extends Message<SCRAMAuth> {
  /**
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * @generated from field: string password = 2;
   */
  password = "";

  /**
   * @generated from field: redpanda.api.console.v1alpha1.SCRAMAuth.Mechanism mechanism = 3;
   */
  mechanism = SCRAMAuth_Mechanism.UNSPECIFIED;

  constructor(data?: PartialMessage<SCRAMAuth>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.SCRAMAuth";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "mechanism", kind: "enum", T: proto3.getEnumType(SCRAMAuth_Mechanism) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SCRAMAuth {
    return new SCRAMAuth().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SCRAMAuth {
    return new SCRAMAuth().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SCRAMAuth {
    return new SCRAMAuth().fromJsonString(jsonString, options);
  }

  static equals(a: SCRAMAuth | PlainMessage<SCRAMAuth> | undefined, b: SCRAMAuth | PlainMessage<SCRAMAuth> | undefined): boolean {
    return proto3.util.equals(SCRAMAuth, a, b);
  }
}

/**
 * @generated from enum redpanda.api.console.v1alpha1.SCRAMAuth.Mechanism
 */
export enum SCRAMAuth_Mechanism {
  /**
   * @generated from enum value: MECHANISM_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: MECHANISM_SCRAM_SHA_256 = 1;
   */
  SCRAM_SHA_256 = 1,

  /**
   * @generated from enum value: MECHANISM_SCRAM_SHA_512 = 2;
   */
  SCRAM_SHA_512 = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(SCRAMAuth_Mechanism)
proto3.util.setEnumType(SCRAMAuth_Mechanism, "redpanda.api.console.v1alpha1.SCRAMAuth.Mechanism", [
  { no: 0, name: "MECHANISM_UNSPECIFIED" },
  { no: 1, name: "MECHANISM_SCRAM_SHA_256" },
  { no: 2, name: "MECHANISM_SCRAM_SHA_512" },
]);

/**
 * Request to start the creation of debug bundle process with given configuration parameters.
 *
 * @generated from message redpanda.api.console.v1alpha1.CreateDebugBundleRequest
 */
export class CreateDebugBundleRequest extends Message<CreateDebugBundleRequest> {
  /**
   * Optional authentication settings to use for the request.
   *
   * @generated from oneof redpanda.api.console.v1alpha1.CreateDebugBundleRequest.authentication
   */
  authentication: {
    /**
     * @generated from field: redpanda.api.console.v1alpha1.SCRAMAuth scram = 1;
     */
    value: SCRAMAuth;
    case: "scram";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * Optional broker IDs. Do not set / leave empty to create for all.
   *
   * @generated from field: repeated int32 broker_ids = 3;
   */
  brokerIds: number[] = [];

  /**
   * The size limit of the controller logs that can be stored in the bundle.
   *
   * @generated from field: int32 controller_logs_size_limit_bytes = 4;
   */
  controllerLogsSizeLimitBytes = 0;

  /**
   * For how long to collect samples for the CPU profiler
   *
   * @generated from field: optional int32 cpu_profiler_wait_seconds = 5;
   */
  cpuProfilerWaitSeconds?: number;

  /**
   * Include logs dated from specified date onward.
   *
   * @generated from field: google.protobuf.Timestamp logs_since = 6;
   */
  logsSince?: Timestamp;

  /**
   * Read the logs until the given size is reached.
   *
   * @generated from field: int32 logs_size_limit_bytes = 7;
   */
  logsSizeLimitBytes = 0;

  /**
   * Include logs older than the specified date.
   *
   * @generated from field: google.protobuf.Timestamp logs_until = 8;
   */
  logsUntil?: Timestamp;

  /**
   * Interval between metrics snapshots.
   *
   * @generated from field: int32 metrics_interval_seconds = 9;
   */
  metricsIntervalSeconds = 0;

  /**
   * Interval between metrics snapshots.
   *
   * @generated from field: int32 metrics_samples = 10;
   */
  metricsSamples = 0;

  /**
   * @generated from field: bool tls_enabled = 11;
   */
  tlsEnabled = false;

  /**
   * @generated from field: bool tls_insecure_skip_verify = 12;
   */
  tlsInsecureSkipVerify = false;

  /**
   * @generated from field: string namespace = 13;
   */
  namespace = "";

  /**
   * Label selector configuration properties.
   *
   * @generated from field: repeated redpanda.api.console.v1alpha1.LabelSelector label_selector = 14;
   */
  labelSelector: LabelSelector[] = [];

  /**
   * Partitions. When provided, rpk saves extra admin API requests for those partitions.
   * Optional.
   * In format {namespace/}topic/{partition ids} where namespace is optional and will be replaced with "kafka" if not provided.
   * Partition IDs is comma separated numbers.
   * kafka/foo/1,2,3. also there can be multiple of those so
   * ['kafka/foo/1,2,3', 'private/baz/3.4.5']
   *
   * @generated from field: repeated string partitions = 15;
   */
  partitions: string[] = [];

  constructor(data?: PartialMessage<CreateDebugBundleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.CreateDebugBundleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "scram", kind: "message", T: SCRAMAuth, oneof: "authentication" },
    { no: 3, name: "broker_ids", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 4, name: "controller_logs_size_limit_bytes", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "cpu_profiler_wait_seconds", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 6, name: "logs_since", kind: "message", T: Timestamp },
    { no: 7, name: "logs_size_limit_bytes", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "logs_until", kind: "message", T: Timestamp },
    { no: 9, name: "metrics_interval_seconds", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 10, name: "metrics_samples", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 11, name: "tls_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 12, name: "tls_insecure_skip_verify", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 13, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "label_selector", kind: "message", T: LabelSelector, repeated: true },
    { no: 15, name: "partitions", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateDebugBundleRequest {
    return new CreateDebugBundleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateDebugBundleRequest {
    return new CreateDebugBundleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateDebugBundleRequest {
    return new CreateDebugBundleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateDebugBundleRequest | PlainMessage<CreateDebugBundleRequest> | undefined, b: CreateDebugBundleRequest | PlainMessage<CreateDebugBundleRequest> | undefined): boolean {
    return proto3.util.equals(CreateDebugBundleRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.console.v1alpha1.LabelSelector
 */
export class LabelSelector extends Message<LabelSelector> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: string value = 2;
   */
  value = "";

  constructor(data?: PartialMessage<LabelSelector>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.LabelSelector";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LabelSelector {
    return new LabelSelector().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LabelSelector {
    return new LabelSelector().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LabelSelector {
    return new LabelSelector().fromJsonString(jsonString, options);
  }

  static equals(a: LabelSelector | PlainMessage<LabelSelector> | undefined, b: LabelSelector | PlainMessage<LabelSelector> | undefined): boolean {
    return proto3.util.equals(LabelSelector, a, b);
  }
}

/**
 * Response to CreateDebugBundle.
 *
 * @generated from message redpanda.api.console.v1alpha1.CreateDebugBundleResponse
 */
export class CreateDebugBundleResponse extends Message<CreateDebugBundleResponse> {
  /**
   * Job ID. UUID.
   *
   * @generated from field: string job_id = 1;
   */
  jobId = "";

  constructor(data?: PartialMessage<CreateDebugBundleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.CreateDebugBundleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "job_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateDebugBundleResponse {
    return new CreateDebugBundleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateDebugBundleResponse {
    return new CreateDebugBundleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateDebugBundleResponse {
    return new CreateDebugBundleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateDebugBundleResponse | PlainMessage<CreateDebugBundleResponse> | undefined, b: CreateDebugBundleResponse | PlainMessage<CreateDebugBundleResponse> | undefined): boolean {
    return proto3.util.equals(CreateDebugBundleResponse, a, b);
  }
}

/**
 * Gets status of debug bundle progress.
 *
 * @generated from message redpanda.api.console.v1alpha1.GetDebugBundleStatusRequest
 */
export class GetDebugBundleStatusRequest extends Message<GetDebugBundleStatusRequest> {
  /**
   * Optional broker IDs to get. If not set / empty get all.
   *
   * @generated from field: repeated int32 broker_ids = 1;
   */
  brokerIds: number[] = [];

  constructor(data?: PartialMessage<GetDebugBundleStatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.GetDebugBundleStatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "broker_ids", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDebugBundleStatusRequest {
    return new GetDebugBundleStatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDebugBundleStatusRequest {
    return new GetDebugBundleStatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDebugBundleStatusRequest {
    return new GetDebugBundleStatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetDebugBundleStatusRequest | PlainMessage<GetDebugBundleStatusRequest> | undefined, b: GetDebugBundleStatusRequest | PlainMessage<GetDebugBundleStatusRequest> | undefined): boolean {
    return proto3.util.equals(GetDebugBundleStatusRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.console.v1alpha1.DebugBundleStatus
 */
export class DebugBundleStatus extends Message<DebugBundleStatus> {
  /**
   * The broker ID.
   *
   * @generated from field: int32 broker_id = 1;
   */
  brokerId = 0;

  /**
   * The job UUID of this process.
   *
   * @generated from field: string job_id = 2;
   */
  jobId = "";

  /**
   * The status of the job.
   *
   * @generated from field: redpanda.api.console.v1alpha1.DebugBundleStatus.Status status = 3;
   */
  status = DebugBundleStatus_Status.UNSPECIFIED;

  /**
   * When the job was started.
   *
   * @generated from field: google.protobuf.Timestamp created_at = 4;
   */
  createdAt?: Timestamp;

  /**
   * Path in API to get the file.
   *
   * @generated from field: string filename = 5;
   */
  filename = "";

  /**
   * Size of the debug bundle zip file.
   *
   * @generated from field: int64 size_bytes = 6;
   */
  sizeBytes = protoInt64.zero;

  /**
   * Only filled in once the process completes.  Content of stdout from rpk.
   *
   * @generated from field: repeated string stdout = 7;
   */
  stdout: string[] = [];

  /**
   * Only filled in once the process completes.  Content of stderr from rpk.
   *
   * @generated from field: repeated string stderr = 8;
   */
  stderr: string[] = [];

  constructor(data?: PartialMessage<DebugBundleStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.DebugBundleStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "broker_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "job_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "status", kind: "enum", T: proto3.getEnumType(DebugBundleStatus_Status) },
    { no: 4, name: "created_at", kind: "message", T: Timestamp },
    { no: 5, name: "filename", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "size_bytes", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "stdout", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 8, name: "stderr", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DebugBundleStatus {
    return new DebugBundleStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DebugBundleStatus {
    return new DebugBundleStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DebugBundleStatus {
    return new DebugBundleStatus().fromJsonString(jsonString, options);
  }

  static equals(a: DebugBundleStatus | PlainMessage<DebugBundleStatus> | undefined, b: DebugBundleStatus | PlainMessage<DebugBundleStatus> | undefined): boolean {
    return proto3.util.equals(DebugBundleStatus, a, b);
  }
}

/**
 * @generated from enum redpanda.api.console.v1alpha1.DebugBundleStatus.Status
 */
export enum DebugBundleStatus_Status {
  /**
   * @generated from enum value: STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: STATUS_RUNNING = 1;
   */
  RUNNING = 1,

  /**
   * @generated from enum value: STATUS_SUCCESS = 2;
   */
  SUCCESS = 2,

  /**
   * There is a cluster config that permits users to set a TTL on the generated bundle.
   * By default there is no expiration, but a user can set it to say "expire 1 day after it's generated" so once that day passes,
   * the service will clean up the bundle from disk and mark that job as expired.
   *
   * @generated from enum value: STATUS_EXPIRED = 3;
   */
  EXPIRED = 3,

  /**
   * @generated from enum value: STATUS_ERROR = 4;
   */
  ERROR = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(DebugBundleStatus_Status)
proto3.util.setEnumType(DebugBundleStatus_Status, "redpanda.api.console.v1alpha1.DebugBundleStatus.Status", [
  { no: 0, name: "STATUS_UNSPECIFIED" },
  { no: 1, name: "STATUS_RUNNING" },
  { no: 2, name: "STATUS_SUCCESS" },
  { no: 3, name: "STATUS_EXPIRED" },
  { no: 4, name: "STATUS_ERROR" },
]);

/**
 * The response to GetDebugBundleStatus.
 *
 * @generated from message redpanda.api.console.v1alpha1.GetDebugBundleStatusResponse
 */
export class GetDebugBundleStatusResponse extends Message<GetDebugBundleStatusResponse> {
  /**
   * @generated from field: repeated redpanda.api.console.v1alpha1.GetDebugBundleStatusResponse.DebugBundleBrokerStatus broker_statuses = 1;
   */
  brokerStatuses: GetDebugBundleStatusResponse_DebugBundleBrokerStatus[] = [];

  /**
   * true if any of the brokers have debug bundle process
   * status regardless of error state
   * false if we get "debug bundle process not started" error
   * for all brokers
   *
   * @generated from field: bool has_debug_process = 2;
   */
  hasDebugProcess = false;

  constructor(data?: PartialMessage<GetDebugBundleStatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.GetDebugBundleStatusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "broker_statuses", kind: "message", T: GetDebugBundleStatusResponse_DebugBundleBrokerStatus, repeated: true },
    { no: 2, name: "has_debug_process", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDebugBundleStatusResponse {
    return new GetDebugBundleStatusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDebugBundleStatusResponse {
    return new GetDebugBundleStatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDebugBundleStatusResponse {
    return new GetDebugBundleStatusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetDebugBundleStatusResponse | PlainMessage<GetDebugBundleStatusResponse> | undefined, b: GetDebugBundleStatusResponse | PlainMessage<GetDebugBundleStatusResponse> | undefined): boolean {
    return proto3.util.equals(GetDebugBundleStatusResponse, a, b);
  }
}

/**
 * @generated from message redpanda.api.console.v1alpha1.GetDebugBundleStatusResponse.DebugBundleBrokerStatus
 */
export class GetDebugBundleStatusResponse_DebugBundleBrokerStatus extends Message<GetDebugBundleStatusResponse_DebugBundleBrokerStatus> {
  /**
   * The broker ID.
   *
   * @generated from field: int32 broker_id = 1;
   */
  brokerId = 0;

  /**
   * The broker URL used to get the status.
   *
   * @generated from field: string broker_url = 2;
   */
  brokerUrl = "";

  /**
   * Whether the broker URL was determined speculatively.
   *
   * @generated from field: bool speculative = 3;
   */
  speculative = false;

  /**
   * The value of the status, either Bundle Error or status.
   *
   * @generated from oneof redpanda.api.console.v1alpha1.GetDebugBundleStatusResponse.DebugBundleBrokerStatus.value
   */
  value: {
    /**
     * @generated from field: redpanda.api.console.v1alpha1.BundleError error = 4;
     */
    value: BundleError;
    case: "error";
  } | {
    /**
     * @generated from field: redpanda.api.console.v1alpha1.DebugBundleStatus bundle_status = 5;
     */
    value: DebugBundleStatus;
    case: "bundleStatus";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<GetDebugBundleStatusResponse_DebugBundleBrokerStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.GetDebugBundleStatusResponse.DebugBundleBrokerStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "broker_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "broker_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "speculative", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "error", kind: "message", T: BundleError, oneof: "value" },
    { no: 5, name: "bundle_status", kind: "message", T: DebugBundleStatus, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDebugBundleStatusResponse_DebugBundleBrokerStatus {
    return new GetDebugBundleStatusResponse_DebugBundleBrokerStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDebugBundleStatusResponse_DebugBundleBrokerStatus {
    return new GetDebugBundleStatusResponse_DebugBundleBrokerStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDebugBundleStatusResponse_DebugBundleBrokerStatus {
    return new GetDebugBundleStatusResponse_DebugBundleBrokerStatus().fromJsonString(jsonString, options);
  }

  static equals(a: GetDebugBundleStatusResponse_DebugBundleBrokerStatus | PlainMessage<GetDebugBundleStatusResponse_DebugBundleBrokerStatus> | undefined, b: GetDebugBundleStatusResponse_DebugBundleBrokerStatus | PlainMessage<GetDebugBundleStatusResponse_DebugBundleBrokerStatus> | undefined): boolean {
    return proto3.util.equals(GetDebugBundleStatusResponse_DebugBundleBrokerStatus, a, b);
  }
}

/**
 * @generated from message redpanda.api.console.v1alpha1.CancelDebugBundleProcessRequest
 */
export class CancelDebugBundleProcessRequest extends Message<CancelDebugBundleProcessRequest> {
  /**
   * @generated from field: string job_id = 1;
   */
  jobId = "";

  /**
   * Optional broker IDs. Do not set / empty for all.
   *
   * @generated from field: repeated int32 broker_ids = 2;
   */
  brokerIds: number[] = [];

  constructor(data?: PartialMessage<CancelDebugBundleProcessRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.CancelDebugBundleProcessRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "job_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "broker_ids", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CancelDebugBundleProcessRequest {
    return new CancelDebugBundleProcessRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CancelDebugBundleProcessRequest {
    return new CancelDebugBundleProcessRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CancelDebugBundleProcessRequest {
    return new CancelDebugBundleProcessRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CancelDebugBundleProcessRequest | PlainMessage<CancelDebugBundleProcessRequest> | undefined, b: CancelDebugBundleProcessRequest | PlainMessage<CancelDebugBundleProcessRequest> | undefined): boolean {
    return proto3.util.equals(CancelDebugBundleProcessRequest, a, b);
  }
}

/**
 * Response for CancelDebugBundleProcess.
 *
 * @generated from message redpanda.api.console.v1alpha1.CancelDebugBundleProcessResponse
 */
export class CancelDebugBundleProcessResponse extends Message<CancelDebugBundleProcessResponse> {
  /**
   * @generated from field: repeated redpanda.api.console.v1alpha1.BundleError errors = 1;
   */
  errors: BundleError[] = [];

  constructor(data?: PartialMessage<CancelDebugBundleProcessResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.CancelDebugBundleProcessResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "errors", kind: "message", T: BundleError, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CancelDebugBundleProcessResponse {
    return new CancelDebugBundleProcessResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CancelDebugBundleProcessResponse {
    return new CancelDebugBundleProcessResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CancelDebugBundleProcessResponse {
    return new CancelDebugBundleProcessResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CancelDebugBundleProcessResponse | PlainMessage<CancelDebugBundleProcessResponse> | undefined, b: CancelDebugBundleProcessResponse | PlainMessage<CancelDebugBundleProcessResponse> | undefined): boolean {
    return proto3.util.equals(CancelDebugBundleProcessResponse, a, b);
  }
}

/**
 * Request for DeleteDebugBundleFile.
 *
 * @generated from message redpanda.api.console.v1alpha1.DeleteDebugBundleFileRequest
 */
export class DeleteDebugBundleFileRequest extends Message<DeleteDebugBundleFileRequest> {
  /**
   * optionally delete all
   * overrides individual settings
   *
   * @generated from field: bool delete_all = 1;
   */
  deleteAll = false;

  /**
   * @generated from field: repeated redpanda.api.console.v1alpha1.DeleteDebugBundleFileForBroker files = 2;
   */
  files: DeleteDebugBundleFileForBroker[] = [];

  constructor(data?: PartialMessage<DeleteDebugBundleFileRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.DeleteDebugBundleFileRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delete_all", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "files", kind: "message", T: DeleteDebugBundleFileForBroker, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteDebugBundleFileRequest {
    return new DeleteDebugBundleFileRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteDebugBundleFileRequest {
    return new DeleteDebugBundleFileRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteDebugBundleFileRequest {
    return new DeleteDebugBundleFileRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteDebugBundleFileRequest | PlainMessage<DeleteDebugBundleFileRequest> | undefined, b: DeleteDebugBundleFileRequest | PlainMessage<DeleteDebugBundleFileRequest> | undefined): boolean {
    return proto3.util.equals(DeleteDebugBundleFileRequest, a, b);
  }
}

/**
 * Parameters for DeleteDebugBundleFileRequest.
 *
 * @generated from message redpanda.api.console.v1alpha1.DeleteDebugBundleFileForBroker
 */
export class DeleteDebugBundleFileForBroker extends Message<DeleteDebugBundleFileForBroker> {
  /**
   * @generated from field: int32 broker_id = 1;
   */
  brokerId = 0;

  /**
   * @generated from field: string filename = 2;
   */
  filename = "";

  constructor(data?: PartialMessage<DeleteDebugBundleFileForBroker>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.DeleteDebugBundleFileForBroker";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "broker_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "filename", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteDebugBundleFileForBroker {
    return new DeleteDebugBundleFileForBroker().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteDebugBundleFileForBroker {
    return new DeleteDebugBundleFileForBroker().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteDebugBundleFileForBroker {
    return new DeleteDebugBundleFileForBroker().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteDebugBundleFileForBroker | PlainMessage<DeleteDebugBundleFileForBroker> | undefined, b: DeleteDebugBundleFileForBroker | PlainMessage<DeleteDebugBundleFileForBroker> | undefined): boolean {
    return proto3.util.equals(DeleteDebugBundleFileForBroker, a, b);
  }
}

/**
 * Response for DeleteDebugBundleFile.
 *
 * @generated from message redpanda.api.console.v1alpha1.DeleteDebugBundleFileResponse
 */
export class DeleteDebugBundleFileResponse extends Message<DeleteDebugBundleFileResponse> {
  /**
   * @generated from field: repeated redpanda.api.console.v1alpha1.BundleError errors = 1;
   */
  errors: BundleError[] = [];

  constructor(data?: PartialMessage<DeleteDebugBundleFileResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.DeleteDebugBundleFileResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "errors", kind: "message", T: BundleError, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteDebugBundleFileResponse {
    return new DeleteDebugBundleFileResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteDebugBundleFileResponse {
    return new DeleteDebugBundleFileResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteDebugBundleFileResponse {
    return new DeleteDebugBundleFileResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteDebugBundleFileResponse | PlainMessage<DeleteDebugBundleFileResponse> | undefined, b: DeleteDebugBundleFileResponse | PlainMessage<DeleteDebugBundleFileResponse> | undefined): boolean {
    return proto3.util.equals(DeleteDebugBundleFileResponse, a, b);
  }
}

/**
 * Error details for various responses and operations.
 *
 * @generated from message redpanda.api.console.v1alpha1.BundleError
 */
export class BundleError extends Message<BundleError> {
  /**
   * The broker ID.
   *
   * @generated from field: int32 broker_id = 1;
   */
  brokerId = 0;

  /**
   * The broker URL used to get the status.
   *
   * @generated from field: string broker_url = 2;
   */
  brokerUrl = "";

  /**
   * Whether the broker URL was determined speculatively.
   *
   * @generated from field: bool speculative = 3;
   */
  speculative = false;

  /**
   * The error code.
   *
   * @generated from field: redpanda.api.console.v1alpha1.BundleErrorCode code = 4;
   */
  code = BundleErrorCode.OK;

  /**
   * Additional information
   *
   * @generated from field: string message = 5;
   */
  message = "";

  constructor(data?: PartialMessage<BundleError>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.BundleError";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "broker_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "broker_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "speculative", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "code", kind: "enum", T: proto3.getEnumType(BundleErrorCode) },
    { no: 5, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BundleError {
    return new BundleError().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BundleError {
    return new BundleError().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BundleError {
    return new BundleError().fromJsonString(jsonString, options);
  }

  static equals(a: BundleError | PlainMessage<BundleError> | undefined, b: BundleError | PlainMessage<BundleError> | undefined): boolean {
    return proto3.util.equals(BundleError, a, b);
  }
}

/**
 * Request for GetClusterHealth call.
 *
 * @generated from message redpanda.api.console.v1alpha1.GetClusterHealthRequest
 */
export class GetClusterHealthRequest extends Message<GetClusterHealthRequest> {
  constructor(data?: PartialMessage<GetClusterHealthRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.GetClusterHealthRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetClusterHealthRequest {
    return new GetClusterHealthRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetClusterHealthRequest {
    return new GetClusterHealthRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetClusterHealthRequest {
    return new GetClusterHealthRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetClusterHealthRequest | PlainMessage<GetClusterHealthRequest> | undefined, b: GetClusterHealthRequest | PlainMessage<GetClusterHealthRequest> | undefined): boolean {
    return proto3.util.equals(GetClusterHealthRequest, a, b);
  }
}

/**
 * Response for GetClusterHealth call.
 *
 * @generated from message redpanda.api.console.v1alpha1.GetClusterHealthResponse
 */
export class GetClusterHealthResponse extends Message<GetClusterHealthResponse> {
  /**
   * whether cluster is health or not
   *
   * @generated from field: bool is_healthy = 1;
   */
  isHealthy = false;

  /**
   * @generated from field: repeated redpanda.api.console.v1alpha1.UnhealthyReason unhealthy_reasons = 2;
   */
  unhealthyReasons: UnhealthyReason[] = [];

  /**
   * optional controller ID.
   * if cluster has no controller the property will not be present.
   *
   * @generated from field: optional int32 controller_id = 3;
   */
  controllerId?: number;

  /**
   * @generated from field: repeated int32 all_broker_ids = 4;
   */
  allBrokerIds: number[] = [];

  /**
   * @generated from field: repeated int32 offline_broker_ids = 5;
   */
  offlineBrokerIds: number[] = [];

  /**
   * @generated from field: repeated int32 broker_ids_in_recovery_mode = 6;
   */
  brokerIdsInRecoveryMode: number[] = [];

  /**
   * @generated from field: int32 leaderless_partitions_count = 7;
   */
  leaderlessPartitionsCount = 0;

  /**
   * @generated from field: repeated redpanda.api.console.v1alpha1.TopicPartitions leaderless_partitions = 8;
   */
  leaderlessPartitions: TopicPartitions[] = [];

  /**
   * @generated from field: int32 under_replicated_partitions_count = 9;
   */
  underReplicatedPartitionsCount = 0;

  /**
   * @generated from field: repeated redpanda.api.console.v1alpha1.TopicPartitions under_replicated_partitions = 10;
   */
  underReplicatedPartitions: TopicPartitions[] = [];

  constructor(data?: PartialMessage<GetClusterHealthResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.GetClusterHealthResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_healthy", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "unhealthy_reasons", kind: "enum", T: proto3.getEnumType(UnhealthyReason), repeated: true },
    { no: 3, name: "controller_id", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 4, name: "all_broker_ids", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 5, name: "offline_broker_ids", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 6, name: "broker_ids_in_recovery_mode", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 7, name: "leaderless_partitions_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "leaderless_partitions", kind: "message", T: TopicPartitions, repeated: true },
    { no: 9, name: "under_replicated_partitions_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 10, name: "under_replicated_partitions", kind: "message", T: TopicPartitions, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetClusterHealthResponse {
    return new GetClusterHealthResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetClusterHealthResponse {
    return new GetClusterHealthResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetClusterHealthResponse {
    return new GetClusterHealthResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetClusterHealthResponse | PlainMessage<GetClusterHealthResponse> | undefined, b: GetClusterHealthResponse | PlainMessage<GetClusterHealthResponse> | undefined): boolean {
    return proto3.util.equals(GetClusterHealthResponse, a, b);
  }
}

/**
 * @generated from message redpanda.api.console.v1alpha1.TopicPartitions
 */
export class TopicPartitions extends Message<TopicPartitions> {
  /**
   * @generated from field: string topic_name = 1;
   */
  topicName = "";

  /**
   * @generated from field: repeated int32 partition_ids = 2;
   */
  partitionIds: number[] = [];

  constructor(data?: PartialMessage<TopicPartitions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.TopicPartitions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "topic_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "partition_ids", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TopicPartitions {
    return new TopicPartitions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TopicPartitions {
    return new TopicPartitions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TopicPartitions {
    return new TopicPartitions().fromJsonString(jsonString, options);
  }

  static equals(a: TopicPartitions | PlainMessage<TopicPartitions> | undefined, b: TopicPartitions | PlainMessage<TopicPartitions> | undefined): boolean {
    return proto3.util.equals(TopicPartitions, a, b);
  }
}

