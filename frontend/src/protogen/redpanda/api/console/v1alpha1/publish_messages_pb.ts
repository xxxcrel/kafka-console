// @generated by protoc-gen-es v1.6.0 with parameter "target=ts,import_extension="
// @generated from file redpanda/api/console/v1alpha1/publish_messages.proto (package redpanda.api.console.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { CompressionType, KafkaRecordHeader, PayloadEncoding } from "./common_pb";

/**
 * PublishMessageRequest is the request for PublishMessage call.
 *
 * @generated from message redpanda.api.console.v1alpha1.PublishMessageRequest
 */
export class PublishMessageRequest extends Message<PublishMessageRequest> {
  /**
   * The topics to publish to.
   *
   * @generated from field: string topic = 1;
   */
  topic = "";

  /**
   * -1 for automatic partition assignment.
   *
   * @generated from field: int32 partition_id = 2;
   */
  partitionId = 0;

  /**
   * The compression to be used.
   *
   * @generated from field: redpanda.api.console.v1alpha1.CompressionType compression = 3;
   */
  compression = CompressionType.UNSPECIFIED;

  /**
   * Use transactions.
   *
   * @generated from field: bool use_transactions = 4;
   */
  useTransactions = false;

  /**
   * Kafka record headers.
   *
   * @generated from field: repeated redpanda.api.console.v1alpha1.KafkaRecordHeader headers = 5;
   */
  headers: KafkaRecordHeader[] = [];

  /**
   * @generated from field: redpanda.api.console.v1alpha1.PublishMessagePayloadOptions key = 6;
   */
  key?: PublishMessagePayloadOptions;

  /**
   * @generated from field: redpanda.api.console.v1alpha1.PublishMessagePayloadOptions value = 7;
   */
  value?: PublishMessagePayloadOptions;

  constructor(data?: PartialMessage<PublishMessageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.PublishMessageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "topic", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "partition_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "compression", kind: "enum", T: proto3.getEnumType(CompressionType) },
    { no: 4, name: "use_transactions", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "headers", kind: "message", T: KafkaRecordHeader, repeated: true },
    { no: 6, name: "key", kind: "message", T: PublishMessagePayloadOptions },
    { no: 7, name: "value", kind: "message", T: PublishMessagePayloadOptions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublishMessageRequest {
    return new PublishMessageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublishMessageRequest {
    return new PublishMessageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublishMessageRequest {
    return new PublishMessageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PublishMessageRequest | PlainMessage<PublishMessageRequest> | undefined, b: PublishMessageRequest | PlainMessage<PublishMessageRequest> | undefined): boolean {
    return proto3.util.equals(PublishMessageRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.console.v1alpha1.PublishMessagePayloadOptions
 */
export class PublishMessagePayloadOptions extends Message<PublishMessagePayloadOptions> {
  /**
   * Payload encoding to use.
   *
   * @generated from field: redpanda.api.console.v1alpha1.PayloadEncoding encoding = 1;
   */
  encoding = PayloadEncoding.UNSPECIFIED;

  /**
   * Data.
   *
   * @generated from field: bytes data = 2;
   */
  data = new Uint8Array(0);

  /**
   * Optional schema ID.
   *
   * @generated from field: optional int32 schema_id = 9;
   */
  schemaId?: number;

  /**
   * Optional index. Useful for Protobuf messages.
   *
   * @generated from field: optional int32 index = 10;
   */
  index?: number;

  constructor(data?: PartialMessage<PublishMessagePayloadOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.PublishMessagePayloadOptions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "encoding", kind: "enum", T: proto3.getEnumType(PayloadEncoding) },
    { no: 2, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 9, name: "schema_id", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 10, name: "index", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublishMessagePayloadOptions {
    return new PublishMessagePayloadOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublishMessagePayloadOptions {
    return new PublishMessagePayloadOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublishMessagePayloadOptions {
    return new PublishMessagePayloadOptions().fromJsonString(jsonString, options);
  }

  static equals(a: PublishMessagePayloadOptions | PlainMessage<PublishMessagePayloadOptions> | undefined, b: PublishMessagePayloadOptions | PlainMessage<PublishMessagePayloadOptions> | undefined): boolean {
    return proto3.util.equals(PublishMessagePayloadOptions, a, b);
  }
}

/**
 * PublishMessageResponse is the response for PublishMessage call.
 *
 * @generated from message redpanda.api.console.v1alpha1.PublishMessageResponse
 */
export class PublishMessageResponse extends Message<PublishMessageResponse> {
  /**
   * @generated from field: string topic = 1;
   */
  topic = "";

  /**
   * @generated from field: int32 partition_id = 2;
   */
  partitionId = 0;

  /**
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  constructor(data?: PartialMessage<PublishMessageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.PublishMessageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "topic", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "partition_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublishMessageResponse {
    return new PublishMessageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublishMessageResponse {
    return new PublishMessageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublishMessageResponse {
    return new PublishMessageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PublishMessageResponse | PlainMessage<PublishMessageResponse> | undefined, b: PublishMessageResponse | PlainMessage<PublishMessageResponse> | undefined): boolean {
    return proto3.util.equals(PublishMessageResponse, a, b);
  }
}

