// @generated by protoc-gen-es v2.2.5 with parameter "target=ts"
// @generated from file redpanda/api/dataplane/v1/mcp.proto (package redpanda.api.dataplane.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_buf_validate_validate } from "../../../../buf/validate/validate_pb";
import { file_google_api_annotations } from "../../../../google/api/annotations_pb";
import { file_google_api_field_behavior } from "../../../../google/api/field_behavior_pb";
import { file_google_api_resource } from "../../../../google/api/resource_pb";
import type { FieldMask } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_field_mask } from "@bufbuild/protobuf/wkt";
import { file_protoc_gen_openapiv2_options_annotations } from "../../../../protoc-gen-openapiv2/options/annotations_pb";
import { file_redpanda_api_auth_v1_authorization } from "../../auth/v1/authorization_pb";
import type { Pipeline_Resources } from "./pipeline_pb";
import { file_redpanda_api_dataplane_v1_pipeline } from "./pipeline_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file redpanda/api/dataplane/v1/mcp.proto.
 */
export const file_redpanda_api_dataplane_v1_mcp: GenFile = /*@__PURE__*/
  fileDesc("", [file_buf_validate_validate, file_google_api_annotations, file_google_api_field_behavior, file_google_api_resource, file_google_protobuf_field_mask, file_protoc_gen_openapiv2_options_annotations, file_redpanda_api_auth_v1_authorization, file_redpanda_api_dataplane_v1_pipeline]);

/**
 * Defines the MCP server resource.
 *
 * @generated from message redpanda.api.dataplane.v1.MCPServer
 */
export type MCPServer = Message<"redpanda.api.dataplane.v1.MCPServer"> & {
  /**
   * MCP Server ID.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * User-friendly MCP server name.
   *
   * @generated from field: string display_name = 2;
   */
  displayName: string;

  /**
   * Optional MCP server description.
   *
   * @generated from field: string description = 3;
   */
  description: string;

  /**
   * All the configuration files for the MCP server.
   * The key in the map is the path to the configuration file, this path must be relative and also valid in to layout in a filesystem,
   * when considering many paths in a full configuration (so it's not valid to have both entries for `foo/bar` and `foo/bar/baz`).
   *
   * @generated from field: map<string, redpanda.api.dataplane.v1.MCPServer.Tool> tools = 4;
   */
  tools: { [key: string]: MCPServer_Tool };

  /**
   * The number of resources that are guaranteed to be assigned to the MCP server.
   *
   * @generated from field: redpanda.api.dataplane.v1.Pipeline.Resources resources = 5;
   */
  resources?: Pipeline_Resources;

  /**
   * Tags are key-value pairs that can be assigned to a MCP server resource.
   * They help organize MCP servers and enable filtering when listing them.
   *
   * @generated from field: map<string, string> tags = 6;
   */
  tags: { [key: string]: string };

  /**
   * The current MCP server state.
   *
   * @generated from field: redpanda.api.dataplane.v1.MCPServer.State state = 7;
   */
  state: MCPServer_State;

  /**
   * @generated from field: redpanda.api.dataplane.v1.MCPServer.Status status = 8;
   */
  status?: MCPServer_Status;

  /**
   * URL to connect to the MCP server
   *
   * @generated from field: string url = 9;
   */
  url: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1.MCPServer.
 * Use `create(MCPServerSchema)` to create a new message.
 */
export const MCPServerSchema: GenMessage<MCPServer> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_mcp, 0);

/**
 * A configuration file for the MCP server.
 *
 * @generated from message redpanda.api.dataplane.v1.MCPServer.Tool
 */
export type MCPServer_Tool = Message<"redpanda.api.dataplane.v1.MCPServer.Tool"> & {
  /**
   * @generated from field: string component_type = 1;
   */
  componentType: string;

  /**
   * The contents of the configuration file in YAML format.
   *
   * @generated from field: string config_yaml = 2;
   */
  configYaml: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1.MCPServer.Tool.
 * Use `create(MCPServer_ToolSchema)` to create a new message.
 */
export const MCPServer_ToolSchema: GenMessage<MCPServer_Tool> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_mcp, 0, 0);

/**
 * MCP server status may contain an error message.
 *
 * @generated from message redpanda.api.dataplane.v1.MCPServer.Status
 */
export type MCPServer_Status = Message<"redpanda.api.dataplane.v1.MCPServer.Status"> & {
  /**
   * @generated from field: string error = 1;
   */
  error: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1.MCPServer.Status.
 * Use `create(MCPServer_StatusSchema)` to create a new message.
 */
export const MCPServer_StatusSchema: GenMessage<MCPServer_Status> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_mcp, 0, 1);

/**
 * State of the MCP server.
 *
 * @generated from enum redpanda.api.dataplane.v1.MCPServer.State
 */
export enum MCPServer_State {
  /**
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The MCP server is starting.
   *
   * @generated from enum value: STATE_STARTING = 1;
   */
  STARTING = 1,

  /**
   * The MCP server is running.
   *
   * @generated from enum value: STATE_RUNNING = 2;
   */
  RUNNING = 2,

  /**
   * The MCP server is in the process of stopping.
   *
   * @generated from enum value: STATE_STOPPING = 3;
   */
  STOPPING = 3,

  /**
   * The MCP server is stopped and in paused state.
   *
   * @generated from enum value: STATE_STOPPED = 4;
   */
  STOPPED = 4,

  /**
   * The MCP server encountered an error.
   *
   * @generated from enum value: STATE_ERROR = 5;
   */
  ERROR = 5,
}

/**
 * Describes the enum redpanda.api.dataplane.v1.MCPServer.State.
 */
export const MCPServer_StateSchema: GenEnum<MCPServer_State> = /*@__PURE__*/
  enumDesc(file_redpanda_api_dataplane_v1_mcp, 0, 0);

/**
 * MCPServerCreate contains the details for the MCP Server creation request.
 *
 * @generated from message redpanda.api.dataplane.v1.MCPServerCreate
 */
export type MCPServerCreate = Message<"redpanda.api.dataplane.v1.MCPServerCreate"> & {
  /**
   * User-friendly MCP server name.
   *
   * @generated from field: string display_name = 1;
   */
  displayName: string;

  /**
   * MCP server description.
   *
   * @generated from field: string description = 2;
   */
  description: string;

  /**
   * All the configuration files for the MCP server.
   * The key in the map is the path to the configuration file, this path must be relative and also valid in to layout in a filesystem,
   * when considering many paths in a full configuration (so it's not valid to have both entries for `foo/bar` and `foo/bar/baz`).
   *
   * @generated from field: map<string, redpanda.api.dataplane.v1.MCPServer.Tool> tools = 3;
   */
  tools: { [key: string]: MCPServer_Tool };

  /**
   * The number of resources that are guaranteed to be assigned to the MCP server.
   *
   * @generated from field: redpanda.api.dataplane.v1.Pipeline.Resources resources = 4;
   */
  resources?: Pipeline_Resources;

  /**
   * Optional list of tags to attach to a MCP server.
   *
   * @generated from field: map<string, string> tags = 5;
   */
  tags: { [key: string]: string };
};

/**
 * Describes the message redpanda.api.dataplane.v1.MCPServerCreate.
 * Use `create(MCPServerCreateSchema)` to create a new message.
 */
export const MCPServerCreateSchema: GenMessage<MCPServerCreate> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_mcp, 1);

/**
 * CreateMCPServerRequest is the request of CreateMCPServer.
 *
 * @generated from message redpanda.api.dataplane.v1.CreateMCPServerRequest
 */
export type CreateMCPServerRequest = Message<"redpanda.api.dataplane.v1.CreateMCPServerRequest"> & {
  /**
   * @generated from field: redpanda.api.dataplane.v1.MCPServerCreate mcp_server = 1;
   */
  mcpServer?: MCPServerCreate;
};

/**
 * Describes the message redpanda.api.dataplane.v1.CreateMCPServerRequest.
 * Use `create(CreateMCPServerRequestSchema)` to create a new message.
 */
export const CreateMCPServerRequestSchema: GenMessage<CreateMCPServerRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_mcp, 2);

/**
 * @generated from message redpanda.api.dataplane.v1.CreateMCPServerResponse
 */
export type CreateMCPServerResponse = Message<"redpanda.api.dataplane.v1.CreateMCPServerResponse"> & {
  /**
   * @generated from field: redpanda.api.dataplane.v1.MCPServer mcp_server = 1;
   */
  mcpServer?: MCPServer;
};

/**
 * Describes the message redpanda.api.dataplane.v1.CreateMCPServerResponse.
 * Use `create(CreateMCPServerResponseSchema)` to create a new message.
 */
export const CreateMCPServerResponseSchema: GenMessage<CreateMCPServerResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_mcp, 3);

/**
 * @generated from message redpanda.api.dataplane.v1.GetMCPServerRequest
 */
export type GetMCPServerRequest = Message<"redpanda.api.dataplane.v1.GetMCPServerRequest"> & {
  /**
   * MCP server ID.
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1.GetMCPServerRequest.
 * Use `create(GetMCPServerRequestSchema)` to create a new message.
 */
export const GetMCPServerRequestSchema: GenMessage<GetMCPServerRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_mcp, 4);

/**
 * @generated from message redpanda.api.dataplane.v1.GetMCPServerResponse
 */
export type GetMCPServerResponse = Message<"redpanda.api.dataplane.v1.GetMCPServerResponse"> & {
  /**
   * @generated from field: redpanda.api.dataplane.v1.MCPServer mcp_server = 1;
   */
  mcpServer?: MCPServer;
};

/**
 * Describes the message redpanda.api.dataplane.v1.GetMCPServerResponse.
 * Use `create(GetMCPServerResponseSchema)` to create a new message.
 */
export const GetMCPServerResponseSchema: GenMessage<GetMCPServerResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_mcp, 5);

/**
 * @generated from message redpanda.api.dataplane.v1.ListMCPServersRequest
 */
export type ListMCPServersRequest = Message<"redpanda.api.dataplane.v1.ListMCPServersRequest"> & {
  /**
   * List filter.
   *
   * @generated from field: redpanda.api.dataplane.v1.ListMCPServersRequest.Filter filter = 1;
   */
  filter?: ListMCPServersRequest_Filter;

  /**
   * Limit the paginated response to a number of items.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * Value of the next_page_token field returned by the previous response.
   * If not provided, the system assumes the first page is requested.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1.ListMCPServersRequest.
 * Use `create(ListMCPServersRequestSchema)` to create a new message.
 */
export const ListMCPServersRequestSchema: GenMessage<ListMCPServersRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_mcp, 6);

/**
 * @generated from message redpanda.api.dataplane.v1.ListMCPServersRequest.Filter
 */
export type ListMCPServersRequest_Filter = Message<"redpanda.api.dataplane.v1.ListMCPServersRequest.Filter"> & {
  /**
   * Substring match on MCP server name. Case-sensitive.
   *
   * @generated from field: string display_name_contains = 1;
   */
  displayNameContains: string;

  /**
   * Match MCP servers that contain all of these key/value pairs.
   *
   * @generated from field: map<string, string> tags = 2;
   */
  tags: { [key: string]: string };

  /**
   * Match MCP servers that use this secret ID.
   *
   * @generated from field: string secret_id = 3;
   */
  secretId: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1.ListMCPServersRequest.Filter.
 * Use `create(ListMCPServersRequest_FilterSchema)` to create a new message.
 */
export const ListMCPServersRequest_FilterSchema: GenMessage<ListMCPServersRequest_Filter> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_mcp, 6, 0);

/**
 * @generated from message redpanda.api.dataplane.v1.ListMCPServersResponse
 */
export type ListMCPServersResponse = Message<"redpanda.api.dataplane.v1.ListMCPServersResponse"> & {
  /**
   * @generated from field: repeated redpanda.api.dataplane.v1.MCPServer mcp_servers = 1;
   */
  mcpServers: MCPServer[];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1.ListMCPServersResponse.
 * Use `create(ListMCPServersResponseSchema)` to create a new message.
 */
export const ListMCPServersResponseSchema: GenMessage<ListMCPServersResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_mcp, 7);

/**
 * @generated from message redpanda.api.dataplane.v1.MCPServerUpdate
 */
export type MCPServerUpdate = Message<"redpanda.api.dataplane.v1.MCPServerUpdate"> & {
  /**
   * User-friendly MCP servers name.
   *
   * @generated from field: string display_name = 1;
   */
  displayName: string;

  /**
   * MCP server description.
   *
   * @generated from field: string description = 2;
   */
  description: string;

  /**
   * All the configuration files for the MCP server.
   *
   * @generated from field: map<string, redpanda.api.dataplane.v1.MCPServer.Tool> tools = 3;
   */
  tools: { [key: string]: MCPServer_Tool };

  /**
   * The number of resources that are guaranteed to be assigned to the MCP server.
   *
   * @generated from field: redpanda.api.dataplane.v1.Pipeline.Resources resources = 4;
   */
  resources?: Pipeline_Resources;

  /**
   * A map of tags to add, update or delete.
   * If a tag's value is empty, the server interprets that as a deletion.
   *
   * @generated from field: map<string, string> tags = 5;
   */
  tags: { [key: string]: string };
};

/**
 * Describes the message redpanda.api.dataplane.v1.MCPServerUpdate.
 * Use `create(MCPServerUpdateSchema)` to create a new message.
 */
export const MCPServerUpdateSchema: GenMessage<MCPServerUpdate> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_mcp, 8);

/**
 * @generated from message redpanda.api.dataplane.v1.UpdateMCPServerRequest
 */
export type UpdateMCPServerRequest = Message<"redpanda.api.dataplane.v1.UpdateMCPServerRequest"> & {
  /**
   * MCP Server ID.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: redpanda.api.dataplane.v1.MCPServerUpdate mcp_server = 2;
   */
  mcpServer?: MCPServerUpdate;

  /**
   * Specifies which fields should be updated. If not provided,
   * all fields will be updated.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 3;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message redpanda.api.dataplane.v1.UpdateMCPServerRequest.
 * Use `create(UpdateMCPServerRequestSchema)` to create a new message.
 */
export const UpdateMCPServerRequestSchema: GenMessage<UpdateMCPServerRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_mcp, 9);

/**
 * @generated from message redpanda.api.dataplane.v1.UpdateMCPServerResponse
 */
export type UpdateMCPServerResponse = Message<"redpanda.api.dataplane.v1.UpdateMCPServerResponse"> & {
  /**
   * @generated from field: redpanda.api.dataplane.v1.MCPServer mcp_server = 1;
   */
  mcpServer?: MCPServer;
};

/**
 * Describes the message redpanda.api.dataplane.v1.UpdateMCPServerResponse.
 * Use `create(UpdateMCPServerResponseSchema)` to create a new message.
 */
export const UpdateMCPServerResponseSchema: GenMessage<UpdateMCPServerResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_mcp, 10);

/**
 * @generated from message redpanda.api.dataplane.v1.DeleteMCPServerRequest
 */
export type DeleteMCPServerRequest = Message<"redpanda.api.dataplane.v1.DeleteMCPServerRequest"> & {
  /**
   * MCP Server ID.
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1.DeleteMCPServerRequest.
 * Use `create(DeleteMCPServerRequestSchema)` to create a new message.
 */
export const DeleteMCPServerRequestSchema: GenMessage<DeleteMCPServerRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_mcp, 11);

/**
 * @generated from message redpanda.api.dataplane.v1.DeleteMCPServerResponse
 */
export type DeleteMCPServerResponse = Message<"redpanda.api.dataplane.v1.DeleteMCPServerResponse"> & {
};

/**
 * Describes the message redpanda.api.dataplane.v1.DeleteMCPServerResponse.
 * Use `create(DeleteMCPServerResponseSchema)` to create a new message.
 */
export const DeleteMCPServerResponseSchema: GenMessage<DeleteMCPServerResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_mcp, 12);

/**
 * @generated from message redpanda.api.dataplane.v1.StopMCPServerRequest
 */
export type StopMCPServerRequest = Message<"redpanda.api.dataplane.v1.StopMCPServerRequest"> & {
  /**
   * MCP Server ID.
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1.StopMCPServerRequest.
 * Use `create(StopMCPServerRequestSchema)` to create a new message.
 */
export const StopMCPServerRequestSchema: GenMessage<StopMCPServerRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_mcp, 13);

/**
 * @generated from message redpanda.api.dataplane.v1.StopMCPServerResponse
 */
export type StopMCPServerResponse = Message<"redpanda.api.dataplane.v1.StopMCPServerResponse"> & {
  /**
   * @generated from field: redpanda.api.dataplane.v1.MCPServer mcp_server = 1;
   */
  mcpServer?: MCPServer;
};

/**
 * Describes the message redpanda.api.dataplane.v1.StopMCPServerResponse.
 * Use `create(StopMCPServerResponseSchema)` to create a new message.
 */
export const StopMCPServerResponseSchema: GenMessage<StopMCPServerResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_mcp, 14);

/**
 * @generated from message redpanda.api.dataplane.v1.StartMCPServerRequest
 */
export type StartMCPServerRequest = Message<"redpanda.api.dataplane.v1.StartMCPServerRequest"> & {
  /**
   * MCP Server ID.
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1.StartMCPServerRequest.
 * Use `create(StartMCPServerRequestSchema)` to create a new message.
 */
export const StartMCPServerRequestSchema: GenMessage<StartMCPServerRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_mcp, 15);

/**
 * @generated from message redpanda.api.dataplane.v1.StartMCPServerResponse
 */
export type StartMCPServerResponse = Message<"redpanda.api.dataplane.v1.StartMCPServerResponse"> & {
  /**
   * @generated from field: redpanda.api.dataplane.v1.MCPServer mcp_server = 1;
   */
  mcpServer?: MCPServer;
};

/**
 * Describes the message redpanda.api.dataplane.v1.StartMCPServerResponse.
 * Use `create(StartMCPServerResponseSchema)` to create a new message.
 */
export const StartMCPServerResponseSchema: GenMessage<StartMCPServerResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_mcp, 16);

/**
 * @generated from message redpanda.api.dataplane.v1.GetMCPServerServiceConfigSchemaRequest
 */
export type GetMCPServerServiceConfigSchemaRequest = Message<"redpanda.api.dataplane.v1.GetMCPServerServiceConfigSchemaRequest"> & {
};

/**
 * Describes the message redpanda.api.dataplane.v1.GetMCPServerServiceConfigSchemaRequest.
 * Use `create(GetMCPServerServiceConfigSchemaRequestSchema)` to create a new message.
 */
export const GetMCPServerServiceConfigSchemaRequestSchema: GenMessage<GetMCPServerServiceConfigSchemaRequest> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_mcp, 17);

/**
 * @generated from message redpanda.api.dataplane.v1.GetMCPServerServiceConfigSchemaResponse
 */
export type GetMCPServerServiceConfigSchemaResponse = Message<"redpanda.api.dataplane.v1.GetMCPServerServiceConfigSchemaResponse"> & {
  /**
   * @generated from field: repeated redpanda.api.dataplane.v1.GetMCPServerServiceConfigSchemaResponse.ConfigurationFileSchema configuration_files = 1;
   */
  configurationFiles: GetMCPServerServiceConfigSchemaResponse_ConfigurationFileSchema[];
};

/**
 * Describes the message redpanda.api.dataplane.v1.GetMCPServerServiceConfigSchemaResponse.
 * Use `create(GetMCPServerServiceConfigSchemaResponseSchema)` to create a new message.
 */
export const GetMCPServerServiceConfigSchemaResponseSchema: GenMessage<GetMCPServerServiceConfigSchemaResponse> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_mcp, 18);

/**
 * @generated from message redpanda.api.dataplane.v1.GetMCPServerServiceConfigSchemaResponse.ConfigurationFileSchema
 */
export type GetMCPServerServiceConfigSchemaResponse_ConfigurationFileSchema = Message<"redpanda.api.dataplane.v1.GetMCPServerServiceConfigSchemaResponse.ConfigurationFileSchema"> & {
  /**
   * The glob pattern that matches the configuration file paths.
   *
   * Example: "o11y/*.yaml" or "processors/*.yaml"
   *
   * Single and double asterisks are supported.
   *
   * @generated from field: string path_pattern = 1;
   */
  pathPattern: string;

  /**
   * JSON schema of the configuration components that are allowed for MCP Servers.
   *
   * @generated from field: string config_schema = 2;
   */
  configSchema: string;
};

/**
 * Describes the message redpanda.api.dataplane.v1.GetMCPServerServiceConfigSchemaResponse.ConfigurationFileSchema.
 * Use `create(GetMCPServerServiceConfigSchemaResponse_ConfigurationFileSchemaSchema)` to create a new message.
 */
export const GetMCPServerServiceConfigSchemaResponse_ConfigurationFileSchemaSchema: GenMessage<GetMCPServerServiceConfigSchemaResponse_ConfigurationFileSchema> = /*@__PURE__*/
  messageDesc(file_redpanda_api_dataplane_v1_mcp, 18, 0);

/**
 * MCPServer is the service for Redpanda Connect MCP Servers.
 * It exposes the API for creating and managing Redpanda Connect MCP servers and their configurations.
 *
 * @generated from service redpanda.api.dataplane.v1.MCPServerService
 */
export const MCPServerService: GenService<{
  /**
   * CreateMCPServer creates a Redpanda Connect MCP Server in the Redpanda cluster.
   *
   * @generated from rpc redpanda.api.dataplane.v1.MCPServerService.CreateMCPServer
   */
  createMCPServer: {
    methodKind: "unary";
    input: typeof CreateMCPServerRequestSchema;
    output: typeof CreateMCPServerResponseSchema;
  },
  /**
   * GetMCPServer gets a specific Redpanda Connect MCP Server.
   *
   * @generated from rpc redpanda.api.dataplane.v1.MCPServerService.GetMCPServer
   */
  getMCPServer: {
    methodKind: "unary";
    input: typeof GetMCPServerRequestSchema;
    output: typeof GetMCPServerResponseSchema;
  },
  /**
   * ListMCPServers implements the list mcp_servers method which lists the MCP servers
   * in the Redpanda cluster.
   *
   * @generated from rpc redpanda.api.dataplane.v1.MCPServerService.ListMCPServers
   */
  listMCPServers: {
    methodKind: "unary";
    input: typeof ListMCPServersRequestSchema;
    output: typeof ListMCPServersResponseSchema;
  },
  /**
   * Update MCPServer updates a specific Redpanda Connect MCP server configuration.
   *
   * @generated from rpc redpanda.api.dataplane.v1.MCPServerService.UpdateMCPServer
   */
  updateMCPServer: {
    methodKind: "unary";
    input: typeof UpdateMCPServerRequestSchema;
    output: typeof UpdateMCPServerResponseSchema;
  },
  /**
   * DeleteMCPServer deletes a specific Redpanda Connect MCP server.
   *
   * @generated from rpc redpanda.api.dataplane.v1.MCPServerService.DeleteMCPServer
   */
  deleteMCPServer: {
    methodKind: "unary";
    input: typeof DeleteMCPServerRequestSchema;
    output: typeof DeleteMCPServerResponseSchema;
  },
  /**
   * StopMCPServer stops a specific Redpanda Connect MCP server.
   *
   * @generated from rpc redpanda.api.dataplane.v1.MCPServerService.StopMCPServer
   */
  stopMCPServer: {
    methodKind: "unary";
    input: typeof StopMCPServerRequestSchema;
    output: typeof StopMCPServerResponseSchema;
  },
  /**
   * StartMCPServer starts a specific Redpanda Connect MCP server that has been previously stopped.
   *
   * @generated from rpc redpanda.api.dataplane.v1.MCPServerService.StartMCPServer
   */
  startMCPServer: {
    methodKind: "unary";
    input: typeof StartMCPServerRequestSchema;
    output: typeof StartMCPServerResponseSchema;
  },
  /**
   * The configuration schema includes available components and processors in this Redpanda Connect MCP Server instance.
   *
   * @generated from rpc redpanda.api.dataplane.v1.MCPServerService.GetMCPServerServiceConfigSchema
   */
  getMCPServerServiceConfigSchema: {
    methodKind: "unary";
    input: typeof GetMCPServerServiceConfigSchemaRequestSchema;
    output: typeof GetMCPServerServiceConfigSchemaResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_redpanda_api_dataplane_v1_mcp, 0);

