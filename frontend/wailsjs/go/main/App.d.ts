// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT
import {kadm} from '../models';
import {kmsg} from '../models';
import {kconsole} from '../models';
import {sr} from '../models';
import {clusterstatus} from '../models';
import {kgo} from '../models';
import {serde} from '../models';

export function AddPartitionsToTopics(arg1:number,arg2:Array<string>,arg3:boolean):Promise<kadm.CreatePartitionsResponses>;

export function AlterConfigs(arg1:kmsg.AlterConfigsRequest):Promise<kmsg.AlterConfigsResponse>;

export function AlterPartitionAssignments(arg1:Array<kmsg.AlterPartitionAssignmentsRequestTopic>):Promise<Array<kconsole.AlterPartitionReassignmentsResponse>>;

export function CreateACL(arg1:kmsg.CreateACLsRequestCreation):Promise<void>;

export function CreateACLs(arg1:kmsg.CreateACLsRequest):Promise<kmsg.CreateACLsResponse>;

export function CreateSchemaRegistrySchema(arg1:string,arg2:sr.Schema):Promise<kconsole.CreateSchemaResponse>;

export function CreateTopic(arg1:kmsg.CreateTopicsRequestTopic):Promise<kconsole.CreateTopicResponse>;

export function CreateTopics(arg1:kmsg.CreateTopicsRequest):Promise<kmsg.CreateTopicsResponse>;

export function DeleteACLs(arg1:kmsg.DeleteACLsRequestFilter):Promise<kconsole.DeleteACLsResponse>;

export function DeleteACLsKafka(arg1:kmsg.DeleteACLsRequest):Promise<kmsg.DeleteACLsResponse>;

export function DeleteConsumerGroup(arg1:string):Promise<void>;

export function DeleteConsumerGroupOffsets(arg1:string,arg2:Array<kmsg.OffsetDeleteRequestTopic>):Promise<Array<kconsole.DeleteConsumerGroupOffsetsResponseTopic>>;

export function DeleteSchemaRegistrySubject(arg1:string,arg2:boolean):Promise<kconsole.SchemaRegistryDeleteSubjectResponse>;

export function DeleteSchemaRegistrySubjectConfig(arg1:string):Promise<void>;

export function DeleteSchemaRegistrySubjectVersion(arg1:string,arg2:number,arg3:boolean):Promise<kconsole.SchemaRegistryDeleteSubjectVersionResponse>;

export function DeleteTopic(arg1:string):Promise<void>;

export function DeleteTopicRecords(arg1:kmsg.DeleteRecordsRequestTopic):Promise<kconsole.DeleteTopicRecordsResponse>;

export function DeleteTopics(arg1:kmsg.DeleteTopicsRequest):Promise<kmsg.DeleteTopicsResponse>;

export function DescribeConfigs(arg1:kmsg.DescribeConfigsRequest):Promise<kmsg.DescribeConfigsResponse>;

export function DescribeQuotas():Promise<kconsole.QuotaResponse>;

export function EditConsumerGroupOffsets(arg1:string,arg2:Array<kmsg.OffsetCommitRequestTopic>):Promise<kconsole.EditConsumerGroupOffsetsResponse>;

export function EditTopicConfig(arg1:string,arg2:Array<kmsg.IncrementalAlterConfigsRequestResourceConfig>):Promise<void>;

export function GetAPIVersions():Promise<Array<kconsole.APIVersion>>;

export function GetAllBrokerConfigs():Promise<Record<number, kconsole.BrokerConfig>>;

export function GetAllTopicNames():Promise<Array<string>>;

export function GetBrokerConfig(arg1:number):Promise<Array<kconsole.BrokerConfigEntry>>;

export function GetBrokersWithLogDirs():Promise<Array<kconsole.BrokerWithLogDirs>>;

export function GetClusterInfo():Promise<kconsole.ClusterInfo>;

export function GetConsoleInfo():Promise<string>;

export function GetConsumerGroupsOverview(arg1:Array<string>):Promise<Array<kconsole.ConsumerGroupOverview>>;

export function GetEndpointCompatibility():Promise<kconsole.EndpointCompatibility>;

export function GetKafkaAuthorizerInfo():Promise<number>;

export function GetKafkaConnectInfo():Promise<Array<clusterstatus.KafkaConnectCluster>>;

export function GetKafkaInfo():Promise<clusterstatus.KafkaInfo>;

export function GetKafkaVersion():Promise<string>;

export function GetMetadata(arg1:kmsg.MetadataRequest):Promise<kmsg.MetadataResponse>;

export function GetSchemaRegistryConfig(arg1:string):Promise<kconsole.SchemaRegistryConfig>;

export function GetSchemaRegistryInfo():Promise<clusterstatus.SchemaRegistryInfo>;

export function GetSchemaRegistryMode():Promise<kconsole.SchemaRegistryMode>;

export function GetSchemaRegistrySchemaReferencedBy(arg1:string,arg2:number):Promise<Array<kconsole.SchemaReference>>;

export function GetSchemaRegistrySchemaTypes():Promise<kconsole.SchemaRegistrySchemaTypes>;

export function GetSchemaRegistrySubjectDetails(arg1:string,arg2:string):Promise<kconsole.SchemaRegistrySubjectDetails>;

export function GetSchemaRegistrySubjects():Promise<Array<kconsole.SchemaRegistrySubject>>;

export function GetSchemaUsagesByID(arg1:number):Promise<Array<kconsole.SchemaVersion>>;

export function GetTopicConfigs(arg1:string,arg2:Array<string>):Promise<kconsole.TopicConfig>;

export function GetTopicDetails(arg1:Array<string>):Promise<Array<kconsole.TopicDetails>>;

export function GetTopicDocumentation(arg1:string):Promise<kconsole.TopicDocumentation>;

export function GetTopicsConfigs(arg1:Array<string>,arg2:Array<string>):Promise<Record<string, kconsole.TopicConfig>>;

export function GetTopicsOverview():Promise<Array<kconsole.TopicSummary>>;

export function IncrementalAlterConfigs(arg1:Array<kmsg.IncrementalAlterConfigsRequestResource>):Promise<Array<kconsole.IncrementalAlterConfigsResourceResponse>>;

export function IncrementalAlterConfigsKafka(arg1:kmsg.IncrementalAlterConfigsRequest):Promise<kmsg.IncrementalAlterConfigsResponse>;

export function ListAllACLs(arg1:kmsg.DescribeACLsRequest):Promise<kconsole.ACLOverview>;

export function ListMessages(arg1:kconsole.ListMessageRequest):Promise<Array<kconsole.TopicMessage>>;

export function ListOffsets(arg1:Array<string>,arg2:number):Promise<Array<kconsole.TopicOffset>>;

export function ListPartitionReassignments():Promise<Array<kconsole.PartitionReassignments>>;

export function ListTopicConsumers(arg1:string):Promise<Array<kconsole.TopicConsumerGroup>>;

export function ProducePlainRecords(arg1:Array<kgo.Record>,arg2:boolean,arg3:Array<kgo.CompressionCodec>):Promise<kconsole.ProduceRecordsResponse>;

export function ProduceRecord(arg1:string,arg2:number,arg3:Array<kgo.RecordHeader>,arg4:serde.RecordPayloadInput,arg5:serde.RecordPayloadInput,arg6:boolean,arg7:Array<kgo.CompressionCodec>):Promise<kconsole.ProduceRecordResponse>;

export function PutSchemaRegistryConfig(arg1:string,arg2:sr.SetCompatibility):Promise<kconsole.SchemaRegistryConfig>;

export function SetPartitionsToTopics(arg1:number,arg2:Array<string>,arg3:boolean):Promise<kadm.CreatePartitionsResponses>;

export function ValidateSchemaRegistrySchema(arg1:string,arg2:number,arg3:sr.Schema):Promise<kconsole.SchemaRegistrySchemaValidation>;
