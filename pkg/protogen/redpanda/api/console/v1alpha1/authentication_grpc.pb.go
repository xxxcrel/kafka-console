// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: redpanda/api/console/v1alpha1/authentication.proto

package consolev1alpha1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AuthenticationService_LoginSaslScram_FullMethodName            = "/redpanda.api.console.v1alpha1.AuthenticationService/LoginSaslScram"
	AuthenticationService_ListAuthenticationMethods_FullMethodName = "/redpanda.api.console.v1alpha1.AuthenticationService/ListAuthenticationMethods"
	AuthenticationService_GetIdentity_FullMethodName               = "/redpanda.api.console.v1alpha1.AuthenticationService/GetIdentity"
	AuthenticationService_ListConsoleUsers_FullMethodName          = "/redpanda.api.console.v1alpha1.AuthenticationService/ListConsoleUsers"
)

// AuthenticationServiceClient is the client API for AuthenticationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthenticationServiceClient interface {
	// RPC to login using SASL-SCRAM.
	LoginSaslScram(ctx context.Context, in *LoginSaslScramRequest, opts ...grpc.CallOption) (*LoginSaslScramResponse, error)
	// RPC to list available authentication methods.
	ListAuthenticationMethods(ctx context.Context, in *ListAuthenticationMethodsRequest, opts ...grpc.CallOption) (*ListAuthenticationMethodsResponse, error)
	// GetIdentity returns user information for the currently logged-in user.
	GetIdentity(ctx context.Context, in *GetIdentityRequest, opts ...grpc.CallOption) (*GetIdentityResponse, error)
	// ListConsoleUsers returns a list of all authorized Console users.
	ListConsoleUsers(ctx context.Context, in *ListConsoleUsersRequest, opts ...grpc.CallOption) (*ListConsoleUsersResponse, error)
}

type authenticationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthenticationServiceClient(cc grpc.ClientConnInterface) AuthenticationServiceClient {
	return &authenticationServiceClient{cc}
}

func (c *authenticationServiceClient) LoginSaslScram(ctx context.Context, in *LoginSaslScramRequest, opts ...grpc.CallOption) (*LoginSaslScramResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginSaslScramResponse)
	err := c.cc.Invoke(ctx, AuthenticationService_LoginSaslScram_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) ListAuthenticationMethods(ctx context.Context, in *ListAuthenticationMethodsRequest, opts ...grpc.CallOption) (*ListAuthenticationMethodsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAuthenticationMethodsResponse)
	err := c.cc.Invoke(ctx, AuthenticationService_ListAuthenticationMethods_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) GetIdentity(ctx context.Context, in *GetIdentityRequest, opts ...grpc.CallOption) (*GetIdentityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIdentityResponse)
	err := c.cc.Invoke(ctx, AuthenticationService_GetIdentity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) ListConsoleUsers(ctx context.Context, in *ListConsoleUsersRequest, opts ...grpc.CallOption) (*ListConsoleUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListConsoleUsersResponse)
	err := c.cc.Invoke(ctx, AuthenticationService_ListConsoleUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthenticationServiceServer is the server API for AuthenticationService service.
// All implementations must embed UnimplementedAuthenticationServiceServer
// for forward compatibility.
type AuthenticationServiceServer interface {
	// RPC to login using SASL-SCRAM.
	LoginSaslScram(context.Context, *LoginSaslScramRequest) (*LoginSaslScramResponse, error)
	// RPC to list available authentication methods.
	ListAuthenticationMethods(context.Context, *ListAuthenticationMethodsRequest) (*ListAuthenticationMethodsResponse, error)
	// GetIdentity returns user information for the currently logged-in user.
	GetIdentity(context.Context, *GetIdentityRequest) (*GetIdentityResponse, error)
	// ListConsoleUsers returns a list of all authorized Console users.
	ListConsoleUsers(context.Context, *ListConsoleUsersRequest) (*ListConsoleUsersResponse, error)
	mustEmbedUnimplementedAuthenticationServiceServer()
}

// UnimplementedAuthenticationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthenticationServiceServer struct{}

func (UnimplementedAuthenticationServiceServer) LoginSaslScram(context.Context, *LoginSaslScramRequest) (*LoginSaslScramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginSaslScram not implemented")
}
func (UnimplementedAuthenticationServiceServer) ListAuthenticationMethods(context.Context, *ListAuthenticationMethodsRequest) (*ListAuthenticationMethodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuthenticationMethods not implemented")
}
func (UnimplementedAuthenticationServiceServer) GetIdentity(context.Context, *GetIdentityRequest) (*GetIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdentity not implemented")
}
func (UnimplementedAuthenticationServiceServer) ListConsoleUsers(context.Context, *ListConsoleUsersRequest) (*ListConsoleUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConsoleUsers not implemented")
}
func (UnimplementedAuthenticationServiceServer) mustEmbedUnimplementedAuthenticationServiceServer() {}
func (UnimplementedAuthenticationServiceServer) testEmbeddedByValue()                               {}

// UnsafeAuthenticationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthenticationServiceServer will
// result in compilation errors.
type UnsafeAuthenticationServiceServer interface {
	mustEmbedUnimplementedAuthenticationServiceServer()
}

func RegisterAuthenticationServiceServer(s grpc.ServiceRegistrar, srv AuthenticationServiceServer) {
	// If the following call pancis, it indicates UnimplementedAuthenticationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthenticationService_ServiceDesc, srv)
}

func _AuthenticationService_LoginSaslScram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginSaslScramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).LoginSaslScram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthenticationService_LoginSaslScram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).LoginSaslScram(ctx, req.(*LoginSaslScramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_ListAuthenticationMethods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuthenticationMethodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).ListAuthenticationMethods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthenticationService_ListAuthenticationMethods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).ListAuthenticationMethods(ctx, req.(*ListAuthenticationMethodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_GetIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).GetIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthenticationService_GetIdentity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).GetIdentity(ctx, req.(*GetIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_ListConsoleUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConsoleUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).ListConsoleUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthenticationService_ListConsoleUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).ListConsoleUsers(ctx, req.(*ListConsoleUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthenticationService_ServiceDesc is the grpc.ServiceDesc for AuthenticationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthenticationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "redpanda.api.console.v1alpha1.AuthenticationService",
	HandlerType: (*AuthenticationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoginSaslScram",
			Handler:    _AuthenticationService_LoginSaslScram_Handler,
		},
		{
			MethodName: "ListAuthenticationMethods",
			Handler:    _AuthenticationService_ListAuthenticationMethods_Handler,
		},
		{
			MethodName: "GetIdentity",
			Handler:    _AuthenticationService_GetIdentity_Handler,
		},
		{
			MethodName: "ListConsoleUsers",
			Handler:    _AuthenticationService_ListConsoleUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "redpanda/api/console/v1alpha1/authentication.proto",
}
