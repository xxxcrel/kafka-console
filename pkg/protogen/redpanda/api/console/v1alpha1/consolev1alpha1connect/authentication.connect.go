// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: redpanda/api/console/v1alpha1/authentication.proto

package consolev1alpha1connect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect "connectrpc.com/connect"

	v1alpha1 "github.com/xxxcrel/kafka-console/pkg/protogen/redpanda/api/console/v1alpha1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuthenticationServiceName is the fully-qualified name of the AuthenticationService service.
	AuthenticationServiceName = "redpanda.api.console.v1alpha1.AuthenticationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthenticationServiceLoginSaslScramProcedure is the fully-qualified name of the
	// AuthenticationService's LoginSaslScram RPC.
	AuthenticationServiceLoginSaslScramProcedure = "/redpanda.api.console.v1alpha1.AuthenticationService/LoginSaslScram"
	// AuthenticationServiceListAuthenticationMethodsProcedure is the fully-qualified name of the
	// AuthenticationService's ListAuthenticationMethods RPC.
	AuthenticationServiceListAuthenticationMethodsProcedure = "/redpanda.api.console.v1alpha1.AuthenticationService/ListAuthenticationMethods"
	// AuthenticationServiceGetIdentityProcedure is the fully-qualified name of the
	// AuthenticationService's GetIdentity RPC.
	AuthenticationServiceGetIdentityProcedure = "/redpanda.api.console.v1alpha1.AuthenticationService/GetIdentity"
	// AuthenticationServiceListConsoleUsersProcedure is the fully-qualified name of the
	// AuthenticationService's ListConsoleUsers RPC.
	AuthenticationServiceListConsoleUsersProcedure = "/redpanda.api.console.v1alpha1.AuthenticationService/ListConsoleUsers"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	authenticationServiceServiceDescriptor                         = v1alpha1.File_redpanda_api_console_v1alpha1_authentication_proto.Services().ByName("AuthenticationService")
	authenticationServiceLoginSaslScramMethodDescriptor            = authenticationServiceServiceDescriptor.Methods().ByName("LoginSaslScram")
	authenticationServiceListAuthenticationMethodsMethodDescriptor = authenticationServiceServiceDescriptor.Methods().ByName("ListAuthenticationMethods")
	authenticationServiceGetIdentityMethodDescriptor               = authenticationServiceServiceDescriptor.Methods().ByName("GetIdentity")
	authenticationServiceListConsoleUsersMethodDescriptor          = authenticationServiceServiceDescriptor.Methods().ByName("ListConsoleUsers")
)

// AuthenticationServiceClient is a client for the
// redpanda.api.console.v1alpha1.AuthenticationService service.
type AuthenticationServiceClient interface {
	// RPC to login using SASL-SCRAM.
	LoginSaslScram(context.Context, *connect.Request[v1alpha1.LoginSaslScramRequest]) (*connect.Response[v1alpha1.LoginSaslScramResponse], error)
	// RPC to list available authentication methods.
	ListAuthenticationMethods(context.Context, *connect.Request[v1alpha1.ListAuthenticationMethodsRequest]) (*connect.Response[v1alpha1.ListAuthenticationMethodsResponse], error)
	// GetIdentity returns user information for the currently logged-in user.
	GetIdentity(context.Context, *connect.Request[v1alpha1.GetIdentityRequest]) (*connect.Response[v1alpha1.GetIdentityResponse], error)
	// ListConsoleUsers returns a list of all authorized Console users.
	ListConsoleUsers(context.Context, *connect.Request[v1alpha1.ListConsoleUsersRequest]) (*connect.Response[v1alpha1.ListConsoleUsersResponse], error)
}

// NewAuthenticationServiceClient constructs a client for the
// redpanda.api.console.v1alpha1.AuthenticationService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthenticationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthenticationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &authenticationServiceClient{
		loginSaslScram: connect.NewClient[v1alpha1.LoginSaslScramRequest, v1alpha1.LoginSaslScramResponse](
			httpClient,
			baseURL+AuthenticationServiceLoginSaslScramProcedure,
			connect.WithSchema(authenticationServiceLoginSaslScramMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listAuthenticationMethods: connect.NewClient[v1alpha1.ListAuthenticationMethodsRequest, v1alpha1.ListAuthenticationMethodsResponse](
			httpClient,
			baseURL+AuthenticationServiceListAuthenticationMethodsProcedure,
			connect.WithSchema(authenticationServiceListAuthenticationMethodsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getIdentity: connect.NewClient[v1alpha1.GetIdentityRequest, v1alpha1.GetIdentityResponse](
			httpClient,
			baseURL+AuthenticationServiceGetIdentityProcedure,
			connect.WithSchema(authenticationServiceGetIdentityMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listConsoleUsers: connect.NewClient[v1alpha1.ListConsoleUsersRequest, v1alpha1.ListConsoleUsersResponse](
			httpClient,
			baseURL+AuthenticationServiceListConsoleUsersProcedure,
			connect.WithSchema(authenticationServiceListConsoleUsersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// authenticationServiceClient implements AuthenticationServiceClient.
type authenticationServiceClient struct {
	loginSaslScram            *connect.Client[v1alpha1.LoginSaslScramRequest, v1alpha1.LoginSaslScramResponse]
	listAuthenticationMethods *connect.Client[v1alpha1.ListAuthenticationMethodsRequest, v1alpha1.ListAuthenticationMethodsResponse]
	getIdentity               *connect.Client[v1alpha1.GetIdentityRequest, v1alpha1.GetIdentityResponse]
	listConsoleUsers          *connect.Client[v1alpha1.ListConsoleUsersRequest, v1alpha1.ListConsoleUsersResponse]
}

// LoginSaslScram calls redpanda.api.console.v1alpha1.AuthenticationService.LoginSaslScram.
func (c *authenticationServiceClient) LoginSaslScram(ctx context.Context, req *connect.Request[v1alpha1.LoginSaslScramRequest]) (*connect.Response[v1alpha1.LoginSaslScramResponse], error) {
	return c.loginSaslScram.CallUnary(ctx, req)
}

// ListAuthenticationMethods calls
// redpanda.api.console.v1alpha1.AuthenticationService.ListAuthenticationMethods.
func (c *authenticationServiceClient) ListAuthenticationMethods(ctx context.Context, req *connect.Request[v1alpha1.ListAuthenticationMethodsRequest]) (*connect.Response[v1alpha1.ListAuthenticationMethodsResponse], error) {
	return c.listAuthenticationMethods.CallUnary(ctx, req)
}

// GetIdentity calls redpanda.api.console.v1alpha1.AuthenticationService.GetIdentity.
func (c *authenticationServiceClient) GetIdentity(ctx context.Context, req *connect.Request[v1alpha1.GetIdentityRequest]) (*connect.Response[v1alpha1.GetIdentityResponse], error) {
	return c.getIdentity.CallUnary(ctx, req)
}

// ListConsoleUsers calls redpanda.api.console.v1alpha1.AuthenticationService.ListConsoleUsers.
func (c *authenticationServiceClient) ListConsoleUsers(ctx context.Context, req *connect.Request[v1alpha1.ListConsoleUsersRequest]) (*connect.Response[v1alpha1.ListConsoleUsersResponse], error) {
	return c.listConsoleUsers.CallUnary(ctx, req)
}

// AuthenticationServiceHandler is an implementation of the
// redpanda.api.console.v1alpha1.AuthenticationService service.
type AuthenticationServiceHandler interface {
	// RPC to login using SASL-SCRAM.
	LoginSaslScram(context.Context, *connect.Request[v1alpha1.LoginSaslScramRequest]) (*connect.Response[v1alpha1.LoginSaslScramResponse], error)
	// RPC to list available authentication methods.
	ListAuthenticationMethods(context.Context, *connect.Request[v1alpha1.ListAuthenticationMethodsRequest]) (*connect.Response[v1alpha1.ListAuthenticationMethodsResponse], error)
	// GetIdentity returns user information for the currently logged-in user.
	GetIdentity(context.Context, *connect.Request[v1alpha1.GetIdentityRequest]) (*connect.Response[v1alpha1.GetIdentityResponse], error)
	// ListConsoleUsers returns a list of all authorized Console users.
	ListConsoleUsers(context.Context, *connect.Request[v1alpha1.ListConsoleUsersRequest]) (*connect.Response[v1alpha1.ListConsoleUsersResponse], error)
}

// NewAuthenticationServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthenticationServiceHandler(svc AuthenticationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authenticationServiceLoginSaslScramHandler := connect.NewUnaryHandler(
		AuthenticationServiceLoginSaslScramProcedure,
		svc.LoginSaslScram,
		connect.WithSchema(authenticationServiceLoginSaslScramMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	authenticationServiceListAuthenticationMethodsHandler := connect.NewUnaryHandler(
		AuthenticationServiceListAuthenticationMethodsProcedure,
		svc.ListAuthenticationMethods,
		connect.WithSchema(authenticationServiceListAuthenticationMethodsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	authenticationServiceGetIdentityHandler := connect.NewUnaryHandler(
		AuthenticationServiceGetIdentityProcedure,
		svc.GetIdentity,
		connect.WithSchema(authenticationServiceGetIdentityMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	authenticationServiceListConsoleUsersHandler := connect.NewUnaryHandler(
		AuthenticationServiceListConsoleUsersProcedure,
		svc.ListConsoleUsers,
		connect.WithSchema(authenticationServiceListConsoleUsersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/redpanda.api.console.v1alpha1.AuthenticationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthenticationServiceLoginSaslScramProcedure:
			authenticationServiceLoginSaslScramHandler.ServeHTTP(w, r)
		case AuthenticationServiceListAuthenticationMethodsProcedure:
			authenticationServiceListAuthenticationMethodsHandler.ServeHTTP(w, r)
		case AuthenticationServiceGetIdentityProcedure:
			authenticationServiceGetIdentityHandler.ServeHTTP(w, r)
		case AuthenticationServiceListConsoleUsersProcedure:
			authenticationServiceListConsoleUsersHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthenticationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthenticationServiceHandler struct{}

func (UnimplementedAuthenticationServiceHandler) LoginSaslScram(context.Context, *connect.Request[v1alpha1.LoginSaslScramRequest]) (*connect.Response[v1alpha1.LoginSaslScramResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.console.v1alpha1.AuthenticationService.LoginSaslScram is not implemented"))
}

func (UnimplementedAuthenticationServiceHandler) ListAuthenticationMethods(context.Context, *connect.Request[v1alpha1.ListAuthenticationMethodsRequest]) (*connect.Response[v1alpha1.ListAuthenticationMethodsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.console.v1alpha1.AuthenticationService.ListAuthenticationMethods is not implemented"))
}

func (UnimplementedAuthenticationServiceHandler) GetIdentity(context.Context, *connect.Request[v1alpha1.GetIdentityRequest]) (*connect.Response[v1alpha1.GetIdentityResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.console.v1alpha1.AuthenticationService.GetIdentity is not implemented"))
}

func (UnimplementedAuthenticationServiceHandler) ListConsoleUsers(context.Context, *connect.Request[v1alpha1.ListConsoleUsersRequest]) (*connect.Response[v1alpha1.ListConsoleUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.console.v1alpha1.AuthenticationService.ListConsoleUsers is not implemented"))
}
