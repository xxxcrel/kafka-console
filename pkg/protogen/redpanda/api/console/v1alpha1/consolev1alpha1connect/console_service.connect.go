// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: redpanda/api/console/v1alpha1/console_service.proto

package consolev1alpha1connect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect "connectrpc.com/connect"

	v1alpha1 "github.com/xxxcrel/kafka-console/pkg/protogen/redpanda/api/console/v1alpha1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ConsoleServiceName is the fully-qualified name of the ConsoleService service.
	ConsoleServiceName = "redpanda.api.console.v1alpha1.ConsoleService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ConsoleServiceListMessagesProcedure is the fully-qualified name of the ConsoleService's
	// ListMessages RPC.
	ConsoleServiceListMessagesProcedure = "/redpanda.api.console.v1alpha1.ConsoleService/ListMessages"
	// ConsoleServicePublishMessageProcedure is the fully-qualified name of the ConsoleService's
	// PublishMessage RPC.
	ConsoleServicePublishMessageProcedure = "/redpanda.api.console.v1alpha1.ConsoleService/PublishMessage"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	consoleServiceServiceDescriptor              = v1alpha1.File_redpanda_api_console_v1alpha1_console_service_proto.Services().ByName("ConsoleService")
	consoleServiceListMessagesMethodDescriptor   = consoleServiceServiceDescriptor.Methods().ByName("ListMessages")
	consoleServicePublishMessageMethodDescriptor = consoleServiceServiceDescriptor.Methods().ByName("PublishMessage")
)

// ConsoleServiceClient is a client for the redpanda.api.console.v1alpha1.ConsoleService service.
type ConsoleServiceClient interface {
	// ListMessages lists the messages according to the requested query.
	ListMessages(context.Context, *connect.Request[v1alpha1.ListMessagesRequest]) (*connect.ServerStreamForClient[v1alpha1.ListMessagesResponse], error)
	// PublishMessage publishes message.
	PublishMessage(context.Context, *connect.Request[v1alpha1.PublishMessageRequest]) (*connect.Response[v1alpha1.PublishMessageResponse], error)
}

// NewConsoleServiceClient constructs a client for the redpanda.api.console.v1alpha1.ConsoleService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewConsoleServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ConsoleServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &consoleServiceClient{
		listMessages: connect.NewClient[v1alpha1.ListMessagesRequest, v1alpha1.ListMessagesResponse](
			httpClient,
			baseURL+ConsoleServiceListMessagesProcedure,
			connect.WithSchema(consoleServiceListMessagesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		publishMessage: connect.NewClient[v1alpha1.PublishMessageRequest, v1alpha1.PublishMessageResponse](
			httpClient,
			baseURL+ConsoleServicePublishMessageProcedure,
			connect.WithSchema(consoleServicePublishMessageMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// consoleServiceClient implements ConsoleServiceClient.
type consoleServiceClient struct {
	listMessages   *connect.Client[v1alpha1.ListMessagesRequest, v1alpha1.ListMessagesResponse]
	publishMessage *connect.Client[v1alpha1.PublishMessageRequest, v1alpha1.PublishMessageResponse]
}

// ListMessages calls redpanda.api.console.v1alpha1.ConsoleService.ListMessages.
func (c *consoleServiceClient) ListMessages(ctx context.Context, req *connect.Request[v1alpha1.ListMessagesRequest]) (*connect.ServerStreamForClient[v1alpha1.ListMessagesResponse], error) {
	return c.listMessages.CallServerStream(ctx, req)
}

// PublishMessage calls redpanda.api.console.v1alpha1.ConsoleService.PublishMessage.
func (c *consoleServiceClient) PublishMessage(ctx context.Context, req *connect.Request[v1alpha1.PublishMessageRequest]) (*connect.Response[v1alpha1.PublishMessageResponse], error) {
	return c.publishMessage.CallUnary(ctx, req)
}

// ConsoleServiceHandler is an implementation of the redpanda.api.console.v1alpha1.ConsoleService
// service.
type ConsoleServiceHandler interface {
	// ListMessages lists the messages according to the requested query.
	ListMessages(context.Context, *connect.Request[v1alpha1.ListMessagesRequest], *connect.ServerStream[v1alpha1.ListMessagesResponse]) error
	// PublishMessage publishes message.
	PublishMessage(context.Context, *connect.Request[v1alpha1.PublishMessageRequest]) (*connect.Response[v1alpha1.PublishMessageResponse], error)
}

// NewConsoleServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewConsoleServiceHandler(svc ConsoleServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	consoleServiceListMessagesHandler := connect.NewServerStreamHandler(
		ConsoleServiceListMessagesProcedure,
		svc.ListMessages,
		connect.WithSchema(consoleServiceListMessagesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	consoleServicePublishMessageHandler := connect.NewUnaryHandler(
		ConsoleServicePublishMessageProcedure,
		svc.PublishMessage,
		connect.WithSchema(consoleServicePublishMessageMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/redpanda.api.console.v1alpha1.ConsoleService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ConsoleServiceListMessagesProcedure:
			consoleServiceListMessagesHandler.ServeHTTP(w, r)
		case ConsoleServicePublishMessageProcedure:
			consoleServicePublishMessageHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedConsoleServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedConsoleServiceHandler struct{}

func (UnimplementedConsoleServiceHandler) ListMessages(context.Context, *connect.Request[v1alpha1.ListMessagesRequest], *connect.ServerStream[v1alpha1.ListMessagesResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.console.v1alpha1.ConsoleService.ListMessages is not implemented"))
}

func (UnimplementedConsoleServiceHandler) PublishMessage(context.Context, *connect.Request[v1alpha1.PublishMessageRequest]) (*connect.Response[v1alpha1.PublishMessageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.console.v1alpha1.ConsoleService.PublishMessage is not implemented"))
}
