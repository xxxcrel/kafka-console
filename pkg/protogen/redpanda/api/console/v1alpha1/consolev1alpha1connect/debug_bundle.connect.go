// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: redpanda/api/console/v1alpha1/debug_bundle.proto

package consolev1alpha1connect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect "connectrpc.com/connect"

	v1alpha1 "github.com/xxxcrel/kafka-console/pkg/protogen/redpanda/api/console/v1alpha1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DebugBundleServiceName is the fully-qualified name of the DebugBundleService service.
	DebugBundleServiceName = "redpanda.api.console.v1alpha1.DebugBundleService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DebugBundleServiceGetClusterHealthProcedure is the fully-qualified name of the
	// DebugBundleService's GetClusterHealth RPC.
	DebugBundleServiceGetClusterHealthProcedure = "/redpanda.api.console.v1alpha1.DebugBundleService/GetClusterHealth"
	// DebugBundleServiceCreateDebugBundleProcedure is the fully-qualified name of the
	// DebugBundleService's CreateDebugBundle RPC.
	DebugBundleServiceCreateDebugBundleProcedure = "/redpanda.api.console.v1alpha1.DebugBundleService/CreateDebugBundle"
	// DebugBundleServiceGetDebugBundleStatusProcedure is the fully-qualified name of the
	// DebugBundleService's GetDebugBundleStatus RPC.
	DebugBundleServiceGetDebugBundleStatusProcedure = "/redpanda.api.console.v1alpha1.DebugBundleService/GetDebugBundleStatus"
	// DebugBundleServiceCancelDebugBundleProcessProcedure is the fully-qualified name of the
	// DebugBundleService's CancelDebugBundleProcess RPC.
	DebugBundleServiceCancelDebugBundleProcessProcedure = "/redpanda.api.console.v1alpha1.DebugBundleService/CancelDebugBundleProcess"
	// DebugBundleServiceDeleteDebugBundleFileProcedure is the fully-qualified name of the
	// DebugBundleService's DeleteDebugBundleFile RPC.
	DebugBundleServiceDeleteDebugBundleFileProcedure = "/redpanda.api.console.v1alpha1.DebugBundleService/DeleteDebugBundleFile"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	debugBundleServiceServiceDescriptor                        = v1alpha1.File_redpanda_api_console_v1alpha1_debug_bundle_proto.Services().ByName("DebugBundleService")
	debugBundleServiceGetClusterHealthMethodDescriptor         = debugBundleServiceServiceDescriptor.Methods().ByName("GetClusterHealth")
	debugBundleServiceCreateDebugBundleMethodDescriptor        = debugBundleServiceServiceDescriptor.Methods().ByName("CreateDebugBundle")
	debugBundleServiceGetDebugBundleStatusMethodDescriptor     = debugBundleServiceServiceDescriptor.Methods().ByName("GetDebugBundleStatus")
	debugBundleServiceCancelDebugBundleProcessMethodDescriptor = debugBundleServiceServiceDescriptor.Methods().ByName("CancelDebugBundleProcess")
	debugBundleServiceDeleteDebugBundleFileMethodDescriptor    = debugBundleServiceServiceDescriptor.Methods().ByName("DeleteDebugBundleFile")
)

// DebugBundleServiceClient is a client for the redpanda.api.console.v1alpha1.DebugBundleService
// service.
type DebugBundleServiceClient interface {
	GetClusterHealth(context.Context, *connect.Request[v1alpha1.GetClusterHealthRequest]) (*connect.Response[v1alpha1.GetClusterHealthResponse], error)
	CreateDebugBundle(context.Context, *connect.Request[v1alpha1.CreateDebugBundleRequest]) (*connect.Response[v1alpha1.CreateDebugBundleResponse], error)
	GetDebugBundleStatus(context.Context, *connect.Request[v1alpha1.GetDebugBundleStatusRequest]) (*connect.Response[v1alpha1.GetDebugBundleStatusResponse], error)
	CancelDebugBundleProcess(context.Context, *connect.Request[v1alpha1.CancelDebugBundleProcessRequest]) (*connect.Response[v1alpha1.CancelDebugBundleProcessResponse], error)
	DeleteDebugBundleFile(context.Context, *connect.Request[v1alpha1.DeleteDebugBundleFileRequest]) (*connect.Response[v1alpha1.DeleteDebugBundleFileResponse], error)
}

// NewDebugBundleServiceClient constructs a client for the
// redpanda.api.console.v1alpha1.DebugBundleService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDebugBundleServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DebugBundleServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &debugBundleServiceClient{
		getClusterHealth: connect.NewClient[v1alpha1.GetClusterHealthRequest, v1alpha1.GetClusterHealthResponse](
			httpClient,
			baseURL+DebugBundleServiceGetClusterHealthProcedure,
			connect.WithSchema(debugBundleServiceGetClusterHealthMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createDebugBundle: connect.NewClient[v1alpha1.CreateDebugBundleRequest, v1alpha1.CreateDebugBundleResponse](
			httpClient,
			baseURL+DebugBundleServiceCreateDebugBundleProcedure,
			connect.WithSchema(debugBundleServiceCreateDebugBundleMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getDebugBundleStatus: connect.NewClient[v1alpha1.GetDebugBundleStatusRequest, v1alpha1.GetDebugBundleStatusResponse](
			httpClient,
			baseURL+DebugBundleServiceGetDebugBundleStatusProcedure,
			connect.WithSchema(debugBundleServiceGetDebugBundleStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		cancelDebugBundleProcess: connect.NewClient[v1alpha1.CancelDebugBundleProcessRequest, v1alpha1.CancelDebugBundleProcessResponse](
			httpClient,
			baseURL+DebugBundleServiceCancelDebugBundleProcessProcedure,
			connect.WithSchema(debugBundleServiceCancelDebugBundleProcessMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteDebugBundleFile: connect.NewClient[v1alpha1.DeleteDebugBundleFileRequest, v1alpha1.DeleteDebugBundleFileResponse](
			httpClient,
			baseURL+DebugBundleServiceDeleteDebugBundleFileProcedure,
			connect.WithSchema(debugBundleServiceDeleteDebugBundleFileMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// debugBundleServiceClient implements DebugBundleServiceClient.
type debugBundleServiceClient struct {
	getClusterHealth         *connect.Client[v1alpha1.GetClusterHealthRequest, v1alpha1.GetClusterHealthResponse]
	createDebugBundle        *connect.Client[v1alpha1.CreateDebugBundleRequest, v1alpha1.CreateDebugBundleResponse]
	getDebugBundleStatus     *connect.Client[v1alpha1.GetDebugBundleStatusRequest, v1alpha1.GetDebugBundleStatusResponse]
	cancelDebugBundleProcess *connect.Client[v1alpha1.CancelDebugBundleProcessRequest, v1alpha1.CancelDebugBundleProcessResponse]
	deleteDebugBundleFile    *connect.Client[v1alpha1.DeleteDebugBundleFileRequest, v1alpha1.DeleteDebugBundleFileResponse]
}

// GetClusterHealth calls redpanda.api.console.v1alpha1.DebugBundleService.GetClusterHealth.
func (c *debugBundleServiceClient) GetClusterHealth(ctx context.Context, req *connect.Request[v1alpha1.GetClusterHealthRequest]) (*connect.Response[v1alpha1.GetClusterHealthResponse], error) {
	return c.getClusterHealth.CallUnary(ctx, req)
}

// CreateDebugBundle calls redpanda.api.console.v1alpha1.DebugBundleService.CreateDebugBundle.
func (c *debugBundleServiceClient) CreateDebugBundle(ctx context.Context, req *connect.Request[v1alpha1.CreateDebugBundleRequest]) (*connect.Response[v1alpha1.CreateDebugBundleResponse], error) {
	return c.createDebugBundle.CallUnary(ctx, req)
}

// GetDebugBundleStatus calls redpanda.api.console.v1alpha1.DebugBundleService.GetDebugBundleStatus.
func (c *debugBundleServiceClient) GetDebugBundleStatus(ctx context.Context, req *connect.Request[v1alpha1.GetDebugBundleStatusRequest]) (*connect.Response[v1alpha1.GetDebugBundleStatusResponse], error) {
	return c.getDebugBundleStatus.CallUnary(ctx, req)
}

// CancelDebugBundleProcess calls
// redpanda.api.console.v1alpha1.DebugBundleService.CancelDebugBundleProcess.
func (c *debugBundleServiceClient) CancelDebugBundleProcess(ctx context.Context, req *connect.Request[v1alpha1.CancelDebugBundleProcessRequest]) (*connect.Response[v1alpha1.CancelDebugBundleProcessResponse], error) {
	return c.cancelDebugBundleProcess.CallUnary(ctx, req)
}

// DeleteDebugBundleFile calls
// redpanda.api.console.v1alpha1.DebugBundleService.DeleteDebugBundleFile.
func (c *debugBundleServiceClient) DeleteDebugBundleFile(ctx context.Context, req *connect.Request[v1alpha1.DeleteDebugBundleFileRequest]) (*connect.Response[v1alpha1.DeleteDebugBundleFileResponse], error) {
	return c.deleteDebugBundleFile.CallUnary(ctx, req)
}

// DebugBundleServiceHandler is an implementation of the
// redpanda.api.console.v1alpha1.DebugBundleService service.
type DebugBundleServiceHandler interface {
	GetClusterHealth(context.Context, *connect.Request[v1alpha1.GetClusterHealthRequest]) (*connect.Response[v1alpha1.GetClusterHealthResponse], error)
	CreateDebugBundle(context.Context, *connect.Request[v1alpha1.CreateDebugBundleRequest]) (*connect.Response[v1alpha1.CreateDebugBundleResponse], error)
	GetDebugBundleStatus(context.Context, *connect.Request[v1alpha1.GetDebugBundleStatusRequest]) (*connect.Response[v1alpha1.GetDebugBundleStatusResponse], error)
	CancelDebugBundleProcess(context.Context, *connect.Request[v1alpha1.CancelDebugBundleProcessRequest]) (*connect.Response[v1alpha1.CancelDebugBundleProcessResponse], error)
	DeleteDebugBundleFile(context.Context, *connect.Request[v1alpha1.DeleteDebugBundleFileRequest]) (*connect.Response[v1alpha1.DeleteDebugBundleFileResponse], error)
}

// NewDebugBundleServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDebugBundleServiceHandler(svc DebugBundleServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	debugBundleServiceGetClusterHealthHandler := connect.NewUnaryHandler(
		DebugBundleServiceGetClusterHealthProcedure,
		svc.GetClusterHealth,
		connect.WithSchema(debugBundleServiceGetClusterHealthMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	debugBundleServiceCreateDebugBundleHandler := connect.NewUnaryHandler(
		DebugBundleServiceCreateDebugBundleProcedure,
		svc.CreateDebugBundle,
		connect.WithSchema(debugBundleServiceCreateDebugBundleMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	debugBundleServiceGetDebugBundleStatusHandler := connect.NewUnaryHandler(
		DebugBundleServiceGetDebugBundleStatusProcedure,
		svc.GetDebugBundleStatus,
		connect.WithSchema(debugBundleServiceGetDebugBundleStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	debugBundleServiceCancelDebugBundleProcessHandler := connect.NewUnaryHandler(
		DebugBundleServiceCancelDebugBundleProcessProcedure,
		svc.CancelDebugBundleProcess,
		connect.WithSchema(debugBundleServiceCancelDebugBundleProcessMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	debugBundleServiceDeleteDebugBundleFileHandler := connect.NewUnaryHandler(
		DebugBundleServiceDeleteDebugBundleFileProcedure,
		svc.DeleteDebugBundleFile,
		connect.WithSchema(debugBundleServiceDeleteDebugBundleFileMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/redpanda.api.console.v1alpha1.DebugBundleService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DebugBundleServiceGetClusterHealthProcedure:
			debugBundleServiceGetClusterHealthHandler.ServeHTTP(w, r)
		case DebugBundleServiceCreateDebugBundleProcedure:
			debugBundleServiceCreateDebugBundleHandler.ServeHTTP(w, r)
		case DebugBundleServiceGetDebugBundleStatusProcedure:
			debugBundleServiceGetDebugBundleStatusHandler.ServeHTTP(w, r)
		case DebugBundleServiceCancelDebugBundleProcessProcedure:
			debugBundleServiceCancelDebugBundleProcessHandler.ServeHTTP(w, r)
		case DebugBundleServiceDeleteDebugBundleFileProcedure:
			debugBundleServiceDeleteDebugBundleFileHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDebugBundleServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDebugBundleServiceHandler struct{}

func (UnimplementedDebugBundleServiceHandler) GetClusterHealth(context.Context, *connect.Request[v1alpha1.GetClusterHealthRequest]) (*connect.Response[v1alpha1.GetClusterHealthResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.console.v1alpha1.DebugBundleService.GetClusterHealth is not implemented"))
}

func (UnimplementedDebugBundleServiceHandler) CreateDebugBundle(context.Context, *connect.Request[v1alpha1.CreateDebugBundleRequest]) (*connect.Response[v1alpha1.CreateDebugBundleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.console.v1alpha1.DebugBundleService.CreateDebugBundle is not implemented"))
}

func (UnimplementedDebugBundleServiceHandler) GetDebugBundleStatus(context.Context, *connect.Request[v1alpha1.GetDebugBundleStatusRequest]) (*connect.Response[v1alpha1.GetDebugBundleStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.console.v1alpha1.DebugBundleService.GetDebugBundleStatus is not implemented"))
}

func (UnimplementedDebugBundleServiceHandler) CancelDebugBundleProcess(context.Context, *connect.Request[v1alpha1.CancelDebugBundleProcessRequest]) (*connect.Response[v1alpha1.CancelDebugBundleProcessResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.console.v1alpha1.DebugBundleService.CancelDebugBundleProcess is not implemented"))
}

func (UnimplementedDebugBundleServiceHandler) DeleteDebugBundleFile(context.Context, *connect.Request[v1alpha1.DeleteDebugBundleFileRequest]) (*connect.Response[v1alpha1.DeleteDebugBundleFileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.console.v1alpha1.DebugBundleService.DeleteDebugBundleFile is not implemented"))
}
