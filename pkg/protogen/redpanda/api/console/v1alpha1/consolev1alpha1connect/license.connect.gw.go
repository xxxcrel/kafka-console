// Code generated by protoc-gen-connect-gateway. DO NOT EDIT.
//
// Source: redpanda/api/console/v1alpha1/license.proto

package consolev1alpha1connect

import (
	context "context"
	fmt "fmt"

	runtime "github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	connect_gateway "go.vallahaye.net/connect-gateway"

	v1alpha1 "github.com/xxxcrel/kafka-console/pkg/protogen/redpanda/api/console/v1alpha1"
)

// LicenseServiceGatewayServer implements the gRPC server API for the LicenseService service.
type LicenseServiceGatewayServer struct {
	v1alpha1.UnimplementedLicenseServiceServer
	listLicenses           connect_gateway.UnaryHandler[v1alpha1.ListLicensesRequest, v1alpha1.ListLicensesResponse]
	setLicense             connect_gateway.UnaryHandler[v1alpha1.SetLicenseRequest, v1alpha1.SetLicenseResponse]
	listEnterpriseFeatures connect_gateway.UnaryHandler[v1alpha1.ListEnterpriseFeaturesRequest, v1alpha1.ListEnterpriseFeaturesResponse]
}

// NewLicenseServiceGatewayServer constructs a Connect-Gateway gRPC server for the LicenseService
// service.
func NewLicenseServiceGatewayServer(svc LicenseServiceHandler, opts ...connect_gateway.HandlerOption) *LicenseServiceGatewayServer {
	return &LicenseServiceGatewayServer{
		listLicenses:           connect_gateway.NewUnaryHandler(LicenseServiceListLicensesProcedure, svc.ListLicenses, opts...),
		setLicense:             connect_gateway.NewUnaryHandler(LicenseServiceSetLicenseProcedure, svc.SetLicense, opts...),
		listEnterpriseFeatures: connect_gateway.NewUnaryHandler(LicenseServiceListEnterpriseFeaturesProcedure, svc.ListEnterpriseFeatures, opts...),
	}
}

func (s *LicenseServiceGatewayServer) ListLicenses(ctx context.Context, req *v1alpha1.ListLicensesRequest) (*v1alpha1.ListLicensesResponse, error) {
	return s.listLicenses(ctx, req)
}

func (s *LicenseServiceGatewayServer) SetLicense(ctx context.Context, req *v1alpha1.SetLicenseRequest) (*v1alpha1.SetLicenseResponse, error) {
	return s.setLicense(ctx, req)
}

func (s *LicenseServiceGatewayServer) ListEnterpriseFeatures(ctx context.Context, req *v1alpha1.ListEnterpriseFeaturesRequest) (*v1alpha1.ListEnterpriseFeaturesResponse, error) {
	return s.listEnterpriseFeatures(ctx, req)
}

// RegisterLicenseServiceHandlerGatewayServer registers the Connect handlers for the LicenseService
// "svc" to "mux".
func RegisterLicenseServiceHandlerGatewayServer(mux *runtime.ServeMux, svc LicenseServiceHandler, opts ...connect_gateway.HandlerOption) {
	if err := v1alpha1.RegisterLicenseServiceHandlerServer(context.TODO(), mux, NewLicenseServiceGatewayServer(svc, opts...)); err != nil {
		panic(fmt.Errorf("connect-gateway: %w", err))
	}
}
