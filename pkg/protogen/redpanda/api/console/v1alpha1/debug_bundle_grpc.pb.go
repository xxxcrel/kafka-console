// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: redpanda/api/console/v1alpha1/debug_bundle.proto

package consolev1alpha1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DebugBundleService_GetClusterHealth_FullMethodName         = "/redpanda.api.console.v1alpha1.DebugBundleService/GetClusterHealth"
	DebugBundleService_CreateDebugBundle_FullMethodName        = "/redpanda.api.console.v1alpha1.DebugBundleService/CreateDebugBundle"
	DebugBundleService_GetDebugBundleStatus_FullMethodName     = "/redpanda.api.console.v1alpha1.DebugBundleService/GetDebugBundleStatus"
	DebugBundleService_CancelDebugBundleProcess_FullMethodName = "/redpanda.api.console.v1alpha1.DebugBundleService/CancelDebugBundleProcess"
	DebugBundleService_DeleteDebugBundleFile_FullMethodName    = "/redpanda.api.console.v1alpha1.DebugBundleService/DeleteDebugBundleFile"
)

// DebugBundleServiceClient is the client API for DebugBundleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DebugBundleServiceClient interface {
	GetClusterHealth(ctx context.Context, in *GetClusterHealthRequest, opts ...grpc.CallOption) (*GetClusterHealthResponse, error)
	CreateDebugBundle(ctx context.Context, in *CreateDebugBundleRequest, opts ...grpc.CallOption) (*CreateDebugBundleResponse, error)
	GetDebugBundleStatus(ctx context.Context, in *GetDebugBundleStatusRequest, opts ...grpc.CallOption) (*GetDebugBundleStatusResponse, error)
	CancelDebugBundleProcess(ctx context.Context, in *CancelDebugBundleProcessRequest, opts ...grpc.CallOption) (*CancelDebugBundleProcessResponse, error)
	DeleteDebugBundleFile(ctx context.Context, in *DeleteDebugBundleFileRequest, opts ...grpc.CallOption) (*DeleteDebugBundleFileResponse, error)
}

type debugBundleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDebugBundleServiceClient(cc grpc.ClientConnInterface) DebugBundleServiceClient {
	return &debugBundleServiceClient{cc}
}

func (c *debugBundleServiceClient) GetClusterHealth(ctx context.Context, in *GetClusterHealthRequest, opts ...grpc.CallOption) (*GetClusterHealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetClusterHealthResponse)
	err := c.cc.Invoke(ctx, DebugBundleService_GetClusterHealth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugBundleServiceClient) CreateDebugBundle(ctx context.Context, in *CreateDebugBundleRequest, opts ...grpc.CallOption) (*CreateDebugBundleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDebugBundleResponse)
	err := c.cc.Invoke(ctx, DebugBundleService_CreateDebugBundle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugBundleServiceClient) GetDebugBundleStatus(ctx context.Context, in *GetDebugBundleStatusRequest, opts ...grpc.CallOption) (*GetDebugBundleStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDebugBundleStatusResponse)
	err := c.cc.Invoke(ctx, DebugBundleService_GetDebugBundleStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugBundleServiceClient) CancelDebugBundleProcess(ctx context.Context, in *CancelDebugBundleProcessRequest, opts ...grpc.CallOption) (*CancelDebugBundleProcessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelDebugBundleProcessResponse)
	err := c.cc.Invoke(ctx, DebugBundleService_CancelDebugBundleProcess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugBundleServiceClient) DeleteDebugBundleFile(ctx context.Context, in *DeleteDebugBundleFileRequest, opts ...grpc.CallOption) (*DeleteDebugBundleFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDebugBundleFileResponse)
	err := c.cc.Invoke(ctx, DebugBundleService_DeleteDebugBundleFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DebugBundleServiceServer is the server API for DebugBundleService service.
// All implementations must embed UnimplementedDebugBundleServiceServer
// for forward compatibility.
type DebugBundleServiceServer interface {
	GetClusterHealth(context.Context, *GetClusterHealthRequest) (*GetClusterHealthResponse, error)
	CreateDebugBundle(context.Context, *CreateDebugBundleRequest) (*CreateDebugBundleResponse, error)
	GetDebugBundleStatus(context.Context, *GetDebugBundleStatusRequest) (*GetDebugBundleStatusResponse, error)
	CancelDebugBundleProcess(context.Context, *CancelDebugBundleProcessRequest) (*CancelDebugBundleProcessResponse, error)
	DeleteDebugBundleFile(context.Context, *DeleteDebugBundleFileRequest) (*DeleteDebugBundleFileResponse, error)
	mustEmbedUnimplementedDebugBundleServiceServer()
}

// UnimplementedDebugBundleServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDebugBundleServiceServer struct{}

func (UnimplementedDebugBundleServiceServer) GetClusterHealth(context.Context, *GetClusterHealthRequest) (*GetClusterHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterHealth not implemented")
}
func (UnimplementedDebugBundleServiceServer) CreateDebugBundle(context.Context, *CreateDebugBundleRequest) (*CreateDebugBundleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDebugBundle not implemented")
}
func (UnimplementedDebugBundleServiceServer) GetDebugBundleStatus(context.Context, *GetDebugBundleStatusRequest) (*GetDebugBundleStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDebugBundleStatus not implemented")
}
func (UnimplementedDebugBundleServiceServer) CancelDebugBundleProcess(context.Context, *CancelDebugBundleProcessRequest) (*CancelDebugBundleProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelDebugBundleProcess not implemented")
}
func (UnimplementedDebugBundleServiceServer) DeleteDebugBundleFile(context.Context, *DeleteDebugBundleFileRequest) (*DeleteDebugBundleFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDebugBundleFile not implemented")
}
func (UnimplementedDebugBundleServiceServer) mustEmbedUnimplementedDebugBundleServiceServer() {}
func (UnimplementedDebugBundleServiceServer) testEmbeddedByValue()                            {}

// UnsafeDebugBundleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DebugBundleServiceServer will
// result in compilation errors.
type UnsafeDebugBundleServiceServer interface {
	mustEmbedUnimplementedDebugBundleServiceServer()
}

func RegisterDebugBundleServiceServer(s grpc.ServiceRegistrar, srv DebugBundleServiceServer) {
	// If the following call pancis, it indicates UnimplementedDebugBundleServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DebugBundleService_ServiceDesc, srv)
}

func _DebugBundleService_GetClusterHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugBundleServiceServer).GetClusterHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DebugBundleService_GetClusterHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugBundleServiceServer).GetClusterHealth(ctx, req.(*GetClusterHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebugBundleService_CreateDebugBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDebugBundleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugBundleServiceServer).CreateDebugBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DebugBundleService_CreateDebugBundle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugBundleServiceServer).CreateDebugBundle(ctx, req.(*CreateDebugBundleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebugBundleService_GetDebugBundleStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDebugBundleStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugBundleServiceServer).GetDebugBundleStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DebugBundleService_GetDebugBundleStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugBundleServiceServer).GetDebugBundleStatus(ctx, req.(*GetDebugBundleStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebugBundleService_CancelDebugBundleProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelDebugBundleProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugBundleServiceServer).CancelDebugBundleProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DebugBundleService_CancelDebugBundleProcess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugBundleServiceServer).CancelDebugBundleProcess(ctx, req.(*CancelDebugBundleProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebugBundleService_DeleteDebugBundleFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDebugBundleFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugBundleServiceServer).DeleteDebugBundleFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DebugBundleService_DeleteDebugBundleFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugBundleServiceServer).DeleteDebugBundleFile(ctx, req.(*DeleteDebugBundleFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DebugBundleService_ServiceDesc is the grpc.ServiceDesc for DebugBundleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DebugBundleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "redpanda.api.console.v1alpha1.DebugBundleService",
	HandlerType: (*DebugBundleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetClusterHealth",
			Handler:    _DebugBundleService_GetClusterHealth_Handler,
		},
		{
			MethodName: "CreateDebugBundle",
			Handler:    _DebugBundleService_CreateDebugBundle_Handler,
		},
		{
			MethodName: "GetDebugBundleStatus",
			Handler:    _DebugBundleService_GetDebugBundleStatus_Handler,
		},
		{
			MethodName: "CancelDebugBundleProcess",
			Handler:    _DebugBundleService_CancelDebugBundleProcess_Handler,
		},
		{
			MethodName: "DeleteDebugBundleFile",
			Handler:    _DebugBundleService_DeleteDebugBundleFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "redpanda/api/console/v1alpha1/debug_bundle.proto",
}
